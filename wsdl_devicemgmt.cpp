// This file is generated by KDAB's kdwsdl2cpp from devicemgmt.wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/

#include "wsdl_devicemgmt.h"

#include <QtCore/QRegExp>
#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <QSharedPointer>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>

void dm::TT__AuxiliaryData::setValue( const QString& value )
{
    bool rangeOk = true;

    rangeOk = rangeOk && ((value).length() <= 128);

    if (!rangeOk)
        qDebug( "Invalid range in TT__AuxiliaryData::setValue()" );

    mValue = value;
}

QString dm::TT__AuxiliaryData::value() const
{
    return mValue;
}

dm::TT__AuxiliaryData::TT__AuxiliaryData( const QString& value )
{
    setValue(value);
}

dm::TT__AuxiliaryData::operator QString() const
{
    return mValue;
}

QVariant dm::TT__AuxiliaryData::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void dm::TT__AuxiliaryData::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// converter_simpletype.cpp:366
}

dm::TT__AuxiliaryData::TT__AuxiliaryData()
{
}

dm::TT__AuxiliaryData::~TT__AuxiliaryData()
{
}

void dm::TT__ReferenceToken::setValue( const QString& value )
{
    bool rangeOk = true;

    rangeOk = rangeOk && ((value).length() <= 64);

    if (!rangeOk)
        qDebug( "Invalid range in TT__ReferenceToken::setValue()" );

    mValue = value;
}

QString dm::TT__ReferenceToken::value() const
{
    return mValue;
}

dm::TT__ReferenceToken::TT__ReferenceToken( const QString& value )
{
    setValue(value);
}

dm::TT__ReferenceToken::operator QString() const
{
    return mValue;
}

QVariant dm::TT__ReferenceToken::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void dm::TT__ReferenceToken::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// converter_simpletype.cpp:366
}

dm::TT__ReferenceToken::TT__ReferenceToken()
{
}

dm::TT__ReferenceToken::~TT__ReferenceToken()
{
}


dm::TT__DiscoveryMode::TT__DiscoveryMode( const Type &type )
{
    mType = type;
}

void dm::TT__DiscoveryMode::setType( Type type )
{
    mType = type;
}

dm::TT__DiscoveryMode::Type dm::TT__DiscoveryMode::type() const
{
    return mType;
}

dm::TT__DiscoveryMode::operator Type() const
{
    return mType;
}

QVariant dm::TT__DiscoveryMode::serialize() const
{
    switch ( mType ) {
        case dm::TT__DiscoveryMode::Discoverable:
            return QString::fromLatin1("Discoverable");
        case dm::TT__DiscoveryMode::NonDiscoverable:
            return QString::fromLatin1("NonDiscoverable");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__DiscoveryMode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Discoverable", dm::TT__DiscoveryMode::Discoverable },
    { "NonDiscoverable", dm::TT__DiscoveryMode::NonDiscoverable }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__DiscoveryMode'.", qPrintable(str) );
}

dm::TT__DiscoveryMode::TT__DiscoveryMode()
    : mType(Type(0))
{
}

dm::TT__DiscoveryMode::~TT__DiscoveryMode()
{
}


void dm::TT__IPv4Address::setValue( const QString& value )
{
    mValue = value;
}

QString dm::TT__IPv4Address::value() const
{
    return mValue;
}

dm::TT__IPv4Address::TT__IPv4Address( const QString& value )
{
    setValue(value);
}

dm::TT__IPv4Address::operator QString() const
{
    return mValue;
}

QVariant dm::TT__IPv4Address::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void dm::TT__IPv4Address::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// converter_simpletype.cpp:366
}

dm::TT__IPv4Address::TT__IPv4Address()
{
}

dm::TT__IPv4Address::~TT__IPv4Address()
{
}


dm::TT__CapabilityCategory::TT__CapabilityCategory( const Type &type )
{
    mType = type;
}

void dm::TT__CapabilityCategory::setType( Type type )
{
    mType = type;
}

dm::TT__CapabilityCategory::Type dm::TT__CapabilityCategory::type() const
{
    return mType;
}

dm::TT__CapabilityCategory::operator Type() const
{
    return mType;
}

QVariant dm::TT__CapabilityCategory::serialize() const
{
    switch ( mType ) {
        case dm::TT__CapabilityCategory::All:
            return QString::fromLatin1("All");
        case dm::TT__CapabilityCategory::Analytics:
            return QString::fromLatin1("Analytics");
        case dm::TT__CapabilityCategory::Device:
            return QString::fromLatin1("Device");
        case dm::TT__CapabilityCategory::Events:
            return QString::fromLatin1("Events");
        case dm::TT__CapabilityCategory::Imaging:
            return QString::fromLatin1("Imaging");
        case dm::TT__CapabilityCategory::Media:
            return QString::fromLatin1("Media");
        case dm::TT__CapabilityCategory::PTZ:
            return QString::fromLatin1("PTZ");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__CapabilityCategory::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[7] = {
    { "All", dm::TT__CapabilityCategory::All },
    { "Analytics", dm::TT__CapabilityCategory::Analytics },
    { "Device", dm::TT__CapabilityCategory::Device },
    { "Events", dm::TT__CapabilityCategory::Events },
    { "Imaging", dm::TT__CapabilityCategory::Imaging },
    { "Media", dm::TT__CapabilityCategory::Media },
    { "PTZ", dm::TT__CapabilityCategory::PTZ }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 7; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__CapabilityCategory'.", qPrintable(str) );
}

dm::TT__CapabilityCategory::TT__CapabilityCategory()
    : mType(Type(0))
{
}

dm::TT__CapabilityCategory::~TT__CapabilityCategory()
{
}


dm::TT__SetDateTimeType::TT__SetDateTimeType( const Type &type )
{
    mType = type;
}

void dm::TT__SetDateTimeType::setType( Type type )
{
    mType = type;
}

dm::TT__SetDateTimeType::Type dm::TT__SetDateTimeType::type() const
{
    return mType;
}

dm::TT__SetDateTimeType::operator Type() const
{
    return mType;
}

QVariant dm::TT__SetDateTimeType::serialize() const
{
    switch ( mType ) {
        case dm::TT__SetDateTimeType::Manual:
            return QString::fromLatin1("Manual");
        case dm::TT__SetDateTimeType::NTP:
            return QString::fromLatin1("NTP");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__SetDateTimeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Manual", dm::TT__SetDateTimeType::Manual },
    { "NTP", dm::TT__SetDateTimeType::NTP }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__SetDateTimeType'.", qPrintable(str) );
}

dm::TT__SetDateTimeType::TT__SetDateTimeType()
    : mType(Type(0))
{
}

dm::TT__SetDateTimeType::~TT__SetDateTimeType()
{
}


void dm::TT__DNSName::setValue( const QString& value )
{
    mValue = value;
}

QString dm::TT__DNSName::value() const
{
    return mValue;
}

dm::TT__DNSName::TT__DNSName( const QString& value )
{
    setValue(value);
}

dm::TT__DNSName::operator QString() const
{
    return mValue;
}

QVariant dm::TT__DNSName::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void dm::TT__DNSName::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// converter_simpletype.cpp:366
}

dm::TT__DNSName::TT__DNSName()
{
}

dm::TT__DNSName::~TT__DNSName()
{
}


dm::TT__DynamicDNSType::TT__DynamicDNSType( const Type &type )
{
    mType = type;
}

void dm::TT__DynamicDNSType::setType( Type type )
{
    mType = type;
}

dm::TT__DynamicDNSType::Type dm::TT__DynamicDNSType::type() const
{
    return mType;
}

dm::TT__DynamicDNSType::operator Type() const
{
    return mType;
}

QVariant dm::TT__DynamicDNSType::serialize() const
{
    switch ( mType ) {
        case dm::TT__DynamicDNSType::NoUpdate:
            return QString::fromLatin1("NoUpdate");
        case dm::TT__DynamicDNSType::ClientUpdates:
            return QString::fromLatin1("ClientUpdates");
        case dm::TT__DynamicDNSType::ServerUpdates:
            return QString::fromLatin1("ServerUpdates");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__DynamicDNSType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "NoUpdate", dm::TT__DynamicDNSType::NoUpdate },
    { "ClientUpdates", dm::TT__DynamicDNSType::ClientUpdates },
    { "ServerUpdates", dm::TT__DynamicDNSType::ServerUpdates }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__DynamicDNSType'.", qPrintable(str) );
}

dm::TT__DynamicDNSType::TT__DynamicDNSType()
    : mType(Type(0))
{
}

dm::TT__DynamicDNSType::~TT__DynamicDNSType()
{
}


dm::TT__FactoryDefaultType::TT__FactoryDefaultType( const Type &type )
{
    mType = type;
}

void dm::TT__FactoryDefaultType::setType( Type type )
{
    mType = type;
}

dm::TT__FactoryDefaultType::Type dm::TT__FactoryDefaultType::type() const
{
    return mType;
}

dm::TT__FactoryDefaultType::operator Type() const
{
    return mType;
}

QVariant dm::TT__FactoryDefaultType::serialize() const
{
    switch ( mType ) {
        case dm::TT__FactoryDefaultType::Hard:
            return QString::fromLatin1("Hard");
        case dm::TT__FactoryDefaultType::Soft:
            return QString::fromLatin1("Soft");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__FactoryDefaultType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Hard", dm::TT__FactoryDefaultType::Hard },
    { "Soft", dm::TT__FactoryDefaultType::Soft }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__FactoryDefaultType'.", qPrintable(str) );
}

dm::TT__FactoryDefaultType::TT__FactoryDefaultType()
    : mType(Type(0))
{
}

dm::TT__FactoryDefaultType::~TT__FactoryDefaultType()
{
}


void dm::TT__IPv6Address::setValue( const QString& value )
{
    mValue = value;
}

QString dm::TT__IPv6Address::value() const
{
    return mValue;
}

dm::TT__IPv6Address::TT__IPv6Address( const QString& value )
{
    setValue(value);
}

dm::TT__IPv6Address::operator QString() const
{
    return mValue;
}

QVariant dm::TT__IPv6Address::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void dm::TT__IPv6Address::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// converter_simpletype.cpp:366
}

dm::TT__IPv6Address::TT__IPv6Address()
{
}

dm::TT__IPv6Address::~TT__IPv6Address()
{
}


dm::TT__SystemLogType::TT__SystemLogType( const Type &type )
{
    mType = type;
}

void dm::TT__SystemLogType::setType( Type type )
{
    mType = type;
}

dm::TT__SystemLogType::Type dm::TT__SystemLogType::type() const
{
    return mType;
}

dm::TT__SystemLogType::operator Type() const
{
    return mType;
}

QVariant dm::TT__SystemLogType::serialize() const
{
    switch ( mType ) {
        case dm::TT__SystemLogType::System:
            return QString::fromLatin1("System");
        case dm::TT__SystemLogType::Access:
            return QString::fromLatin1("Access");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__SystemLogType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "System", dm::TT__SystemLogType::System },
    { "Access", dm::TT__SystemLogType::Access }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__SystemLogType'.", qPrintable(str) );
}

dm::TT__SystemLogType::TT__SystemLogType()
    : mType(Type(0))
{
}

dm::TT__SystemLogType::~TT__SystemLogType()
{
}


dm::TT__RelayLogicalState::TT__RelayLogicalState( const Type &type )
{
    mType = type;
}

void dm::TT__RelayLogicalState::setType( Type type )
{
    mType = type;
}

dm::TT__RelayLogicalState::Type dm::TT__RelayLogicalState::type() const
{
    return mType;
}

dm::TT__RelayLogicalState::operator Type() const
{
    return mType;
}

QVariant dm::TT__RelayLogicalState::serialize() const
{
    switch ( mType ) {
        case dm::TT__RelayLogicalState::Active:
            return QString::fromLatin1("active");
        case dm::TT__RelayLogicalState::Inactive:
            return QString::fromLatin1("inactive");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__RelayLogicalState::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "active", dm::TT__RelayLogicalState::Active },
    { "inactive", dm::TT__RelayLogicalState::Inactive }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__RelayLogicalState'.", qPrintable(str) );
}

dm::TT__RelayLogicalState::TT__RelayLogicalState()
    : mType(Type(0))
{
}

dm::TT__RelayLogicalState::~TT__RelayLogicalState()
{
}


dm::TT__IPAddressFilterType::TT__IPAddressFilterType( const Type &type )
{
    mType = type;
}

void dm::TT__IPAddressFilterType::setType( Type type )
{
    mType = type;
}

dm::TT__IPAddressFilterType::Type dm::TT__IPAddressFilterType::type() const
{
        return mType;
}
dm::TT__IPAddressFilterType::operator Type() const
{
    return mType;
}

QVariant dm::TT__IPAddressFilterType::serialize() const
{
    switch ( mType ) {
        case dm::TT__IPAddressFilterType::Allow:
            return QString::fromLatin1("Allow");
        case dm::TT__IPAddressFilterType::Deny:
            return QString::fromLatin1("Deny");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__IPAddressFilterType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Allow", dm::TT__IPAddressFilterType::Allow },
    { "Deny", dm::TT__IPAddressFilterType::Deny }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__IPAddressFilterType'.", qPrintable(str) );
}

dm::TT__IPAddressFilterType::TT__IPAddressFilterType()
    : mType(Type(0))
{
}

dm::TT__IPAddressFilterType::~TT__IPAddressFilterType()
{
}


dm::TT__UserLevel::TT__UserLevel( const Type &type )
{
    mType = type;
}

void dm::TT__UserLevel::setType( Type type )
{
    mType = type;
}

dm::TT__UserLevel::Type dm::TT__UserLevel::type() const
{
    return mType;
}

dm::TT__UserLevel::operator Type() const
{
    return mType;
}

QVariant dm::TT__UserLevel::serialize() const
{
    switch ( mType ) {
        case dm::TT__UserLevel::Administrator:
            return QString::fromLatin1("Administrator");
        case dm::TT__UserLevel::Operator:
            return QString::fromLatin1("Operator");
        case dm::TT__UserLevel::User:
            return QString::fromLatin1("User");
        case dm::TT__UserLevel::Anonymous:
            return QString::fromLatin1("Anonymous");
        case dm::TT__UserLevel::Extended:
            return QString::fromLatin1("Extended");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__UserLevel::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "Administrator", dm::TT__UserLevel::Administrator },
    { "Operator", dm::TT__UserLevel::Operator },
    { "User", dm::TT__UserLevel::User },
    { "Anonymous", dm::TT__UserLevel::Anonymous },
    { "Extended", dm::TT__UserLevel::Extended }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__UserLevel'.", qPrintable(str) );
}

dm::TT__UserLevel::TT__UserLevel()
    : mType(Type(0))
{
}

dm::TT__UserLevel::~TT__UserLevel()
{
}


dm::TT__Dot11Cipher::TT__Dot11Cipher( const Type &type )
{
    mType = type;
}

void dm::TT__Dot11Cipher::setType( Type type )
{
    mType = type;
}

dm::TT__Dot11Cipher::Type dm::TT__Dot11Cipher::type() const
{
    return mType;
}

dm::TT__Dot11Cipher::operator Type() const
{
    return mType;
}

QVariant dm::TT__Dot11Cipher::serialize() const
{
    switch ( mType ) {
        case dm::TT__Dot11Cipher::CCMP:
            return QString::fromLatin1("CCMP");
        case dm::TT__Dot11Cipher::TKIP:
            return QString::fromLatin1("TKIP");
        case dm::TT__Dot11Cipher::Any:
            return QString::fromLatin1("Any");
        case dm::TT__Dot11Cipher::Extended:
            return QString::fromLatin1("Extended");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__Dot11Cipher::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[4] = {
    { "CCMP", dm::TT__Dot11Cipher::CCMP },
    { "TKIP", dm::TT__Dot11Cipher::TKIP },
    { "Any", dm::TT__Dot11Cipher::Any },
    { "Extended", dm::TT__Dot11Cipher::Extended }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 4; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__Dot11Cipher'.", qPrintable(str) );
}

dm::TT__Dot11Cipher::TT__Dot11Cipher()
    : mType(Type(0))
{
}

dm::TT__Dot11Cipher::~TT__Dot11Cipher()
{
}


dm::TT__NetworkHostType::TT__NetworkHostType( const Type &type )
{
    mType = type;
}

void dm::TT__NetworkHostType::setType( Type type )
{
    mType = type;
}

dm::TT__NetworkHostType::Type dm::TT__NetworkHostType::type() const
{
    return mType;
}

dm::TT__NetworkHostType::operator Type() const
{
    return mType;
}

QVariant dm::TT__NetworkHostType::serialize() const
{
    switch ( mType ) {
        case dm::TT__NetworkHostType::IPv4:
            return QString::fromLatin1("IPv4");
        case dm::TT__NetworkHostType::IPv6:
            return QString::fromLatin1("IPv6");
        case dm::TT__NetworkHostType::DNS:
            return QString::fromLatin1("DNS");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__NetworkHostType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "IPv4", dm::TT__NetworkHostType::IPv4 },
    { "IPv6", dm::TT__NetworkHostType::IPv6 },
    { "DNS", dm::TT__NetworkHostType::DNS }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__NetworkHostType'.", qPrintable(str) );
}

dm::TT__NetworkHostType::TT__NetworkHostType()
    : mType(Type(0))
{
}

dm::TT__NetworkHostType::~TT__NetworkHostType()
{
}


void dm::TT__Dot11SSIDType::setValue( const QByteArray& value )
{
    bool rangeOk = true;

    rangeOk = rangeOk && ((value).length() >= 1);
    rangeOk = rangeOk && ((value).length() <= 32);

    if (!rangeOk)
        qDebug( "Invalid range in TT__Dot11SSIDType::setValue()" );

    mValue = value;
}

QByteArray dm::TT__Dot11SSIDType::value() const
{
    return mValue;
}

dm::TT__Dot11SSIDType::TT__Dot11SSIDType( const QByteArray& value )
{
    setValue(value);
}

dm::TT__Dot11SSIDType::operator QByteArray() const
{
    return mValue;
}

QVariant dm::TT__Dot11SSIDType::serialize() const
{
    return QString::fromLatin1(mValue.toHex().constData());// converter_simpletype.cpp:365
}

void dm::TT__Dot11SSIDType::deserialize( const QVariant& value )
{
    mValue = QByteArray::fromHex(value.toString().toLatin1());// converter_simpletype.cpp:366
}

dm::TT__Dot11SSIDType::TT__Dot11SSIDType()
{
}

dm::TT__Dot11SSIDType::~TT__Dot11SSIDType()
{
}


dm::TT__RelayMode::TT__RelayMode( const Type &type )
{
    mType = type;
}

void dm::TT__RelayMode::setType( Type type )
{
    mType = type;
}

dm::TT__RelayMode::Type dm::TT__RelayMode::type() const
{
    return mType;
}

dm::TT__RelayMode::operator Type() const
{
    return mType;
}

QVariant dm::TT__RelayMode::serialize() const
{
    switch ( mType ) {
        case dm::TT__RelayMode::Monostable:
            return QString::fromLatin1("Monostable");
        case dm::TT__RelayMode::Bistable:
            return QString::fromLatin1("Bistable");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__RelayMode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Monostable", dm::TT__RelayMode::Monostable },
    { "Bistable", dm::TT__RelayMode::Bistable }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__RelayMode'.", qPrintable(str) );
}

dm::TT__RelayMode::TT__RelayMode()
    : mType(Type(0))
{
}

dm::TT__RelayMode::~TT__RelayMode()
{
}


dm::TT__RelayIdleState::TT__RelayIdleState( const Type &type )
{
    mType = type;
}

void dm::TT__RelayIdleState::setType( Type type )
{
    mType = type;
}

dm::TT__RelayIdleState::Type dm::TT__RelayIdleState::type() const
{
    return mType;
}

dm::TT__RelayIdleState::operator Type() const
{
    return mType;
}

QVariant dm::TT__RelayIdleState::serialize() const
{
    switch ( mType ) {
        case dm::TT__RelayIdleState::Closed:
            return QString::fromLatin1("closed");
        case dm::TT__RelayIdleState::Open:
            return QString::fromLatin1("open");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__RelayIdleState::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "closed", dm::TT__RelayIdleState::Closed },
    { "open", dm::TT__RelayIdleState::Open }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__RelayIdleState'.", qPrintable(str) );
}

dm::TT__RelayIdleState::TT__RelayIdleState()
    : mType(Type(0))
{
}

dm::TT__RelayIdleState::~TT__RelayIdleState()
{
}


dm::TT__IPType::TT__IPType( const Type &type )
{
    mType = type;
}

void dm::TT__IPType::setType( Type type )
{
    mType = type;
}

dm::TT__IPType::Type dm::TT__IPType::type() const
{
    return mType;
}

dm::TT__IPType::operator Type() const
{
    return mType;
}

QVariant dm::TT__IPType::serialize() const
{
    switch ( mType ) {
        case dm::TT__IPType::IPv4:
            return QString::fromLatin1("IPv4");
        case dm::TT__IPType::IPv6:
            return QString::fromLatin1("IPv6");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__IPType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "IPv4", dm::TT__IPType::IPv4 },
    { "IPv6", dm::TT__IPType::IPv6 }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__IPType'.", qPrintable(str) );
}

dm::TT__IPType::TT__IPType()
    : mType(Type(0))
{
}

dm::TT__IPType::~TT__IPType()
{
}


dm::TT__ScopeDefinition::TT__ScopeDefinition( const Type &type )
{
    mType = type;
}

void dm::TT__ScopeDefinition::setType( Type type )
{
    mType = type;
}

dm::TT__ScopeDefinition::Type dm::TT__ScopeDefinition::type() const
{
    return mType;
}

dm::TT__ScopeDefinition::operator Type() const
{
    return mType;
}

QVariant dm::TT__ScopeDefinition::serialize() const
{
    switch ( mType ) {
        case dm::TT__ScopeDefinition::Fixed:
            return QString::fromLatin1("Fixed");
        case dm::TT__ScopeDefinition::Configurable:
            return QString::fromLatin1("Configurable");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__ScopeDefinition::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Fixed", dm::TT__ScopeDefinition::Fixed },
    { "Configurable", dm::TT__ScopeDefinition::Configurable }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__ScopeDefinition'.", qPrintable(str) );
}

dm::TT__ScopeDefinition::TT__ScopeDefinition()
    : mType(Type(0))
{
}

dm::TT__ScopeDefinition::~TT__ScopeDefinition()
{
}


dm::TT__Dot11SignalStrength::TT__Dot11SignalStrength( const Type &type )
{
    mType = type;
}

void dm::TT__Dot11SignalStrength::setType( Type type )
{
    mType = type;
}

dm::TT__Dot11SignalStrength::Type dm::TT__Dot11SignalStrength::type() const
{
    return mType;
}

dm::TT__Dot11SignalStrength::operator Type() const
{
    return mType;
}

QVariant dm::TT__Dot11SignalStrength::serialize() const
{
    switch ( mType ) {
        case dm::TT__Dot11SignalStrength::None:
            return QString::fromLatin1("None");
        case dm::TT__Dot11SignalStrength::Very_Bad:
            return QString::fromLatin1("Very Bad");
        case dm::TT__Dot11SignalStrength::Bad:
            return QString::fromLatin1("Bad");
        case dm::TT__Dot11SignalStrength::Good:
            return QString::fromLatin1("Good");
        case dm::TT__Dot11SignalStrength::Very_Good:
            return QString::fromLatin1("Very Good");
        case dm::TT__Dot11SignalStrength::Extended:
            return QString::fromLatin1("Extended");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__Dot11SignalStrength::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[6] = {
    { "None", dm::TT__Dot11SignalStrength::None },
    { "Very Bad", dm::TT__Dot11SignalStrength::Very_Bad },
    { "Bad", dm::TT__Dot11SignalStrength::Bad },
    { "Good", dm::TT__Dot11SignalStrength::Good },
    { "Very Good", dm::TT__Dot11SignalStrength::Very_Good },
    { "Extended", dm::TT__Dot11SignalStrength::Extended }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 6; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__Dot11SignalStrength'.", qPrintable(str) );
}

dm::TT__Dot11SignalStrength::TT__Dot11SignalStrength()
    : mType(Type(0))
{
}

dm::TT__Dot11SignalStrength::~TT__Dot11SignalStrength()
{
}


dm::TT__Dot11AuthAndMangementSuite::TT__Dot11AuthAndMangementSuite( const Type &type )
{
    mType = type;
}

void dm::TT__Dot11AuthAndMangementSuite::setType( Type type )
{
    mType = type;
}

dm::TT__Dot11AuthAndMangementSuite::Type dm::TT__Dot11AuthAndMangementSuite::type() const
{
    return mType;
}

dm::TT__Dot11AuthAndMangementSuite::operator Type() const
{
    return mType;
}

QVariant dm::TT__Dot11AuthAndMangementSuite::serialize() const
{
    switch ( mType ) {
        case dm::TT__Dot11AuthAndMangementSuite::None:
            return QString::fromLatin1("None");
        case dm::TT__Dot11AuthAndMangementSuite::Dot1X:
            return QString::fromLatin1("Dot1X");
        case dm::TT__Dot11AuthAndMangementSuite::PSK:
            return QString::fromLatin1("PSK");
        case dm::TT__Dot11AuthAndMangementSuite::Extended:
            return QString::fromLatin1("Extended");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__Dot11AuthAndMangementSuite::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[4] = {
    { "None", dm::TT__Dot11AuthAndMangementSuite::None },
    { "Dot1X", dm::TT__Dot11AuthAndMangementSuite::Dot1X },
    { "PSK", dm::TT__Dot11AuthAndMangementSuite::PSK },
    { "Extended", dm::TT__Dot11AuthAndMangementSuite::Extended }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 4; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__Dot11AuthAndMangementSuite'.", qPrintable(str) );
}

dm::TT__Dot11AuthAndMangementSuite::TT__Dot11AuthAndMangementSuite()
    : mType(Type(0))
{
}

dm::TT__Dot11AuthAndMangementSuite::~TT__Dot11AuthAndMangementSuite()
{
}


dm::TT__NetworkProtocolType::TT__NetworkProtocolType( const Type &type )
{
    mType = type;
}

void dm::TT__NetworkProtocolType::setType( Type type )
{
    mType = type;
}

dm::TT__NetworkProtocolType::Type dm::TT__NetworkProtocolType::type() const
{
    return mType;
}

dm::TT__NetworkProtocolType::operator Type() const
{
    return mType;
}

QVariant dm::TT__NetworkProtocolType::serialize() const
{
    switch ( mType ) {
        case dm::TT__NetworkProtocolType::HTTP:
            return QString::fromLatin1("HTTP");
        case dm::TT__NetworkProtocolType::HTTPS:
            return QString::fromLatin1("HTTPS");
        case dm::TT__NetworkProtocolType::RTSP:
            return QString::fromLatin1("RTSP");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__NetworkProtocolType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "HTTP", dm::TT__NetworkProtocolType::HTTP },
    { "HTTPS", dm::TT__NetworkProtocolType::HTTPS },
    { "RTSP", dm::TT__NetworkProtocolType::RTSP }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__NetworkProtocolType'.", qPrintable(str) );
}

dm::TT__NetworkProtocolType::TT__NetworkProtocolType()
    : mType(Type(0))
{
}

dm::TT__NetworkProtocolType::~TT__NetworkProtocolType()
{
}


void dm::XMIME__ContentType::setValue( const QString& value )
{
    bool rangeOk = true;

    rangeOk = rangeOk && ((value).length() >= 3);

    if (!rangeOk)
        qDebug( "Invalid range in XMIME__ContentType::setValue()" );

    mValue = value;
}

QString dm::XMIME__ContentType::value() const
{
    return mValue;
}

dm::XMIME__ContentType::XMIME__ContentType( const QString& value )
{
    setValue(value);
}

dm::XMIME__ContentType::operator QString() const
{
    return mValue;
}

QVariant dm::XMIME__ContentType::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void dm::XMIME__ContentType::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// converter_simpletype.cpp:366
}

dm::XMIME__ContentType::XMIME__ContentType()
{
}

dm::XMIME__ContentType::~XMIME__ContentType()
{
}


void dm::TDS__EAPMethodTypes::setEntries( const QList< int >& entries )
{
    mEntries = entries;
}

QList< int > dm::TDS__EAPMethodTypes::entries() const
{
    return mEntries;
}

QVariant dm::TDS__EAPMethodTypes::serialize() const
{
    QString str;
    for ( int i = 0; i < mEntries.count(); ++i ) {
        if (!str.isEmpty())
            str += QLatin1Char(' ');
        str += QVariant(mEntries.at(i)).toString();
    }
    return str;
}

void dm::TDS__EAPMethodTypes::deserialize( const QVariant& value )
{
    const QStringList list = value.toString().split(QLatin1Char(' '));
    for (int i = 0; i < list.count(); ++i) {
        mEntries.append(QVariant(list.at(i)).value<int>());
    }
}

dm::TDS__EAPMethodTypes::TDS__EAPMethodTypes()
{
}

dm::TDS__EAPMethodTypes::~TDS__EAPMethodTypes()
{
}


dm::TT__IPv6DHCPConfiguration::TT__IPv6DHCPConfiguration( const Type &type )
{
    mType = type;
}

void dm::TT__IPv6DHCPConfiguration::setType( Type type )
{
    mType = type;
}

dm::TT__IPv6DHCPConfiguration::Type dm::TT__IPv6DHCPConfiguration::type() const
{
    return mType;
}

dm::TT__IPv6DHCPConfiguration::operator Type() const
{
    return mType;
}

QVariant dm::TT__IPv6DHCPConfiguration::serialize() const
{
    switch ( mType ) {
        case dm::TT__IPv6DHCPConfiguration::Auto:
            return QString::fromLatin1("Auto");
        case dm::TT__IPv6DHCPConfiguration::Stateful:
            return QString::fromLatin1("Stateful");
        case dm::TT__IPv6DHCPConfiguration::Stateless:
            return QString::fromLatin1("Stateless");
        case dm::TT__IPv6DHCPConfiguration::Off:
            return QString::fromLatin1("Off");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__IPv6DHCPConfiguration::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[4] = {
    { "Auto", dm::TT__IPv6DHCPConfiguration::Auto },
    { "Stateful", dm::TT__IPv6DHCPConfiguration::Stateful },
    { "Stateless", dm::TT__IPv6DHCPConfiguration::Stateless },
    { "Off", dm::TT__IPv6DHCPConfiguration::Off }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 4; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__IPv6DHCPConfiguration'.", qPrintable(str) );
}

dm::TT__IPv6DHCPConfiguration::TT__IPv6DHCPConfiguration()
    : mType(Type(0))
{
}

dm::TT__IPv6DHCPConfiguration::~TT__IPv6DHCPConfiguration()
{
}


void dm::TT__StringAttrList::setEntries( const QStringList& entries )
{
    mEntries = entries;
}

QStringList dm::TT__StringAttrList::entries() const
{
    return mEntries;
}

QVariant dm::TT__StringAttrList::serialize() const
{
    QString str;
    for ( int i = 0; i < mEntries.count(); ++i ) {
        if (!str.isEmpty())
            str += QLatin1Char(' ');
        str += mEntries.at(i);
    }
    return str;
}

void dm::TT__StringAttrList::deserialize( const QVariant& value )
{
    const QStringList list = value.toString().split(QLatin1Char(' '));
    for (int i = 0; i < list.count(); ++i) {
        mEntries.append(list.at(i));
    }
}

dm::TT__StringAttrList::TT__StringAttrList()
{
}

dm::TT__StringAttrList::~TT__StringAttrList()
{
}


void dm::TT__IANA_IfTypes::setValue( int value )
{
    mValue = value;
}

int dm::TT__IANA_IfTypes::value() const
{
    return mValue;
}

dm::TT__IANA_IfTypes::TT__IANA_IfTypes( int value )
{
    setValue(value);
}

dm::TT__IANA_IfTypes::operator int() const
{
    return mValue;
}

QVariant dm::TT__IANA_IfTypes::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void dm::TT__IANA_IfTypes::deserialize( const QVariant& value )
{
    mValue = value.value<int>();// converter_simpletype.cpp:366
}

dm::TT__IANA_IfTypes::TT__IANA_IfTypes()
    : mValue(0)
{
}

dm::TT__IANA_IfTypes::~TT__IANA_IfTypes()
{
}


dm::TT__Duplex::TT__Duplex( const Type &type )
{
    mType = type;
}

void dm::TT__Duplex::setType( Type type )
{
    mType = type;
}

dm::TT__Duplex::Type dm::TT__Duplex::type() const
{
    return mType;
}

dm::TT__Duplex::operator Type() const
{
    return mType;
}

QVariant dm::TT__Duplex::serialize() const
{
    switch ( mType ) {
        case dm::TT__Duplex::Full:
            return QString::fromLatin1("Full");
        case dm::TT__Duplex::Half:
            return QString::fromLatin1("Half");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__Duplex::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "Full", dm::TT__Duplex::Full },
    { "Half", dm::TT__Duplex::Half }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__Duplex'.", qPrintable(str) );
}

dm::TT__Duplex::TT__Duplex()
    : mType(Type(0))
{
}

dm::TT__Duplex::~TT__Duplex()
{
}


void dm::TT__HwAddress::setValue( const QString& value )
{
    mValue = value;
}

QString dm::TT__HwAddress::value() const
{
    return mValue;
}

dm::TT__HwAddress::TT__HwAddress( const QString& value )
{
    setValue(value);
}

dm::TT__HwAddress::operator QString() const
{
    return mValue;
}

QVariant dm::TT__HwAddress::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void dm::TT__HwAddress::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// converter_simpletype.cpp:366
}

dm::TT__HwAddress::TT__HwAddress()
{
}

dm::TT__HwAddress::~TT__HwAddress()
{
}


void dm::TT__NetworkInterfaceConfigPriority::setValue( qint64 value )
{
    bool rangeOk = true;

    rangeOk = rangeOk && ((value) >= 0);
    rangeOk = rangeOk && ((value) <= 31);

    if (!rangeOk)
        qDebug( "Invalid range in TT__NetworkInterfaceConfigPriority::setValue()" );

    mValue = value;
}

qint64 dm::TT__NetworkInterfaceConfigPriority::value() const
{
    return mValue;
}

dm::TT__NetworkInterfaceConfigPriority::TT__NetworkInterfaceConfigPriority( qint64 value )
{
    setValue(value);
}

dm::TT__NetworkInterfaceConfigPriority::operator qint64() const
{
    return mValue;
}

QVariant dm::TT__NetworkInterfaceConfigPriority::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void dm::TT__NetworkInterfaceConfigPriority::deserialize( const QVariant& value )
{
    mValue = value.value<qint64>();// converter_simpletype.cpp:366
}

dm::TT__NetworkInterfaceConfigPriority::TT__NetworkInterfaceConfigPriority()
    : mValue(0)
{
}

dm::TT__NetworkInterfaceConfigPriority::~TT__NetworkInterfaceConfigPriority()
{
}


void dm::TT__Name::setValue( const QString& value )
{
    bool rangeOk = true;

    rangeOk = rangeOk && ((value).length() <= 64);

    if (!rangeOk)
        qDebug( "Invalid range in TT__Name::setValue()" );

    mValue = value;
}

QString dm::TT__Name::value() const
{
    return mValue;
}

dm::TT__Name::TT__Name( const QString& value )
{
    setValue(value);
}

dm::TT__Name::operator QString() const
{
    return mValue;
}

QVariant dm::TT__Name::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void dm::TT__Name::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// converter_simpletype.cpp:366
}

dm::TT__Name::TT__Name()
{
}

dm::TT__Name::~TT__Name()
{
}


dm::TT__OSDType::TT__OSDType( const Type &type )
{
    mType = type;
}

void dm::TT__OSDType::setType( Type type )
{
    mType = type;
}

dm::TT__OSDType::Type dm::TT__OSDType::type() const
{
    return mType;
}

dm::TT__OSDType::operator Type() const
{
    return mType;
}

QVariant dm::TT__OSDType::serialize() const
{
    switch ( mType ) {
        case dm::TT__OSDType::Text:
            return QString::fromLatin1("Text");
        case dm::TT__OSDType::Image:
            return QString::fromLatin1("Image");
        case dm::TT__OSDType::Extended:
            return QString::fromLatin1("Extended");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__OSDType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "Text", dm::TT__OSDType::Text },
    { "Image", dm::TT__OSDType::Image },
    { "Extended", dm::TT__OSDType::Extended }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__OSDType'.", qPrintable(str) );
}

dm::TT__OSDType::TT__OSDType()
    : mType(Type(0))
{
}

dm::TT__OSDType::~TT__OSDType()
{
}


dm::TT__Dot11StationMode::TT__Dot11StationMode( const Type &type )
{
    mType = type;
}

void dm::TT__Dot11StationMode::setType( Type type )
{
    mType = type;
}

dm::TT__Dot11StationMode::Type dm::TT__Dot11StationMode::type() const
{
    return mType;
}

dm::TT__Dot11StationMode::operator Type() const
{
    return mType;
}

QVariant dm::TT__Dot11StationMode::serialize() const
{
    switch ( mType ) {
        case dm::TT__Dot11StationMode::Ad_hoc:
            return QString::fromLatin1("Ad-hoc");
        case dm::TT__Dot11StationMode::Infrastructure:
            return QString::fromLatin1("Infrastructure");
        case dm::TT__Dot11StationMode::Extended:
            return QString::fromLatin1("Extended");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__Dot11StationMode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "Ad-hoc", dm::TT__Dot11StationMode::Ad_hoc },
    { "Infrastructure", dm::TT__Dot11StationMode::Infrastructure },
    { "Extended", dm::TT__Dot11StationMode::Extended }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__Dot11StationMode'.", qPrintable(str) );
}

dm::TT__Dot11StationMode::TT__Dot11StationMode()
    : mType(Type(0))
{
}

dm::TT__Dot11StationMode::~TT__Dot11StationMode()
{
}


dm::TT__Dot11SecurityMode::TT__Dot11SecurityMode( const Type &type )
{
    mType = type;
}

void dm::TT__Dot11SecurityMode::setType( Type type )
{
    mType = type;
}

dm::TT__Dot11SecurityMode::Type dm::TT__Dot11SecurityMode::type() const
{
    return mType;
}

dm::TT__Dot11SecurityMode::operator Type() const
{
    return mType;
}

QVariant dm::TT__Dot11SecurityMode::serialize() const
{
    switch ( mType ) {
        case dm::TT__Dot11SecurityMode::None:
            return QString::fromLatin1("None");
        case dm::TT__Dot11SecurityMode::WEP:
            return QString::fromLatin1("WEP");
        case dm::TT__Dot11SecurityMode::PSK:
            return QString::fromLatin1("PSK");
        case dm::TT__Dot11SecurityMode::Dot1X:
            return QString::fromLatin1("Dot1X");
        case dm::TT__Dot11SecurityMode::Extended:
            return QString::fromLatin1("Extended");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__Dot11SecurityMode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "None", dm::TT__Dot11SecurityMode::None },
    { "WEP", dm::TT__Dot11SecurityMode::WEP },
    { "PSK", dm::TT__Dot11SecurityMode::PSK },
    { "Dot1X", dm::TT__Dot11SecurityMode::Dot1X },
    { "Extended", dm::TT__Dot11SecurityMode::Extended }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__Dot11SecurityMode'.", qPrintable(str) );
}

dm::TT__Dot11SecurityMode::TT__Dot11SecurityMode()
    : mType(Type(0))
{
}

dm::TT__Dot11SecurityMode::~TT__Dot11SecurityMode()
{
}


dm::TT__IrCutFilterMode::TT__IrCutFilterMode( const Type &type )
{
    mType = type;
}

void dm::TT__IrCutFilterMode::setType( Type type )
{
    mType = type;
}

dm::TT__IrCutFilterMode::Type dm::TT__IrCutFilterMode::type() const
{
    return mType;
}

dm::TT__IrCutFilterMode::operator Type() const
{
    return mType;
}

QVariant dm::TT__IrCutFilterMode::serialize() const
{
    switch ( mType ) {
        case dm::TT__IrCutFilterMode::ON:
            return QString::fromLatin1("ON");
        case dm::TT__IrCutFilterMode::OFF:
            return QString::fromLatin1("OFF");
        case dm::TT__IrCutFilterMode::AUTO:
            return QString::fromLatin1("AUTO");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__IrCutFilterMode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "ON", dm::TT__IrCutFilterMode::ON },
    { "OFF", dm::TT__IrCutFilterMode::OFF },
    { "AUTO", dm::TT__IrCutFilterMode::AUTO }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__IrCutFilterMode'.", qPrintable(str) );
}

dm::TT__IrCutFilterMode::TT__IrCutFilterMode()
    : mType(Type(0))
{
}

dm::TT__IrCutFilterMode::~TT__IrCutFilterMode()
{
}


dm::TT__WideDynamicMode::TT__WideDynamicMode( const Type &type )
{
    mType = type;
}

void dm::TT__WideDynamicMode::setType( Type type )
{
    mType = type;
}

dm::TT__WideDynamicMode::Type dm::TT__WideDynamicMode::type() const
{
    return mType;
}

dm::TT__WideDynamicMode::operator Type() const
{
    return mType;
}

QVariant dm::TT__WideDynamicMode::serialize() const
{
    switch ( mType ) {
        case dm::TT__WideDynamicMode::OFF:
            return QString::fromLatin1("OFF");
        case dm::TT__WideDynamicMode::ON:
            return QString::fromLatin1("ON");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__WideDynamicMode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "OFF", dm::TT__WideDynamicMode::OFF },
    { "ON", dm::TT__WideDynamicMode::ON }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__WideDynamicMode'.", qPrintable(str) );
}

dm::TT__WideDynamicMode::TT__WideDynamicMode()
    : mType(Type(0))
{
}

dm::TT__WideDynamicMode::~TT__WideDynamicMode()
{
}


dm::TT__PTZPresetTourOperation::TT__PTZPresetTourOperation( const Type &type )
{
    mType = type;
}

void dm::TT__PTZPresetTourOperation::setType( Type type )
{
    mType = type;
}

dm::TT__PTZPresetTourOperation::Type dm::TT__PTZPresetTourOperation::type() const
{
    return mType;
}

dm::TT__PTZPresetTourOperation::operator Type() const
{
    return mType;
}

QVariant dm::TT__PTZPresetTourOperation::serialize() const
{
    switch ( mType ) {
        case dm::TT__PTZPresetTourOperation::Start:
            return QString::fromLatin1("Start");
        case dm::TT__PTZPresetTourOperation::Stop:
            return QString::fromLatin1("Stop");
        case dm::TT__PTZPresetTourOperation::Pause:
            return QString::fromLatin1("Pause");
        case dm::TT__PTZPresetTourOperation::Extended:
            return QString::fromLatin1("Extended");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__PTZPresetTourOperation::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[4] = {
    { "Start", dm::TT__PTZPresetTourOperation::Start },
    { "Stop", dm::TT__PTZPresetTourOperation::Stop },
    { "Pause", dm::TT__PTZPresetTourOperation::Pause },
    { "Extended", dm::TT__PTZPresetTourOperation::Extended }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 4; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__PTZPresetTourOperation'.", qPrintable(str) );
}

dm::TT__PTZPresetTourOperation::TT__PTZPresetTourOperation()
    : mType(Type(0))
{
}

dm::TT__PTZPresetTourOperation::~TT__PTZPresetTourOperation()
{
}


dm::TT__WhiteBalanceMode::TT__WhiteBalanceMode( const Type &type )
{
    mType = type;
}

void dm::TT__WhiteBalanceMode::setType( Type type )
{
    mType = type;
}

dm::TT__WhiteBalanceMode::Type dm::TT__WhiteBalanceMode::type() const
{
    return mType;
}

dm::TT__WhiteBalanceMode::operator Type() const
{
    return mType;
}

QVariant dm::TT__WhiteBalanceMode::serialize() const
{
    switch ( mType ) {
        case dm::TT__WhiteBalanceMode::AUTO:
            return QString::fromLatin1("AUTO");
        case dm::TT__WhiteBalanceMode::MANUAL:
            return QString::fromLatin1("MANUAL");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__WhiteBalanceMode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "AUTO", dm::TT__WhiteBalanceMode::AUTO },
    { "MANUAL", dm::TT__WhiteBalanceMode::MANUAL }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__WhiteBalanceMode'.", qPrintable(str) );
}

dm::TT__WhiteBalanceMode::TT__WhiteBalanceMode()
    : mType(Type(0))
{
}

dm::TT__WhiteBalanceMode::~TT__WhiteBalanceMode()
{
}


dm::TT__ExposureMode::TT__ExposureMode( const Type &type )
{
    mType = type;
}

void dm::TT__ExposureMode::setType( Type type )
{
    mType = type;
}

dm::TT__ExposureMode::Type dm::TT__ExposureMode::type() const
{
    return mType;
}

dm::TT__ExposureMode::operator Type() const
{
    return mType;
}

QVariant dm::TT__ExposureMode::serialize() const
{
    switch ( mType ) {
        case dm::TT__ExposureMode::AUTO:
            return QString::fromLatin1("AUTO");
        case dm::TT__ExposureMode::MANUAL:
            return QString::fromLatin1("MANUAL");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__ExposureMode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "AUTO", dm::TT__ExposureMode::AUTO },
    { "MANUAL", dm::TT__ExposureMode::MANUAL }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__ExposureMode'.", qPrintable(str) );
}

dm::TT__ExposureMode::TT__ExposureMode()
    : mType(Type(0))
{
}

dm::TT__ExposureMode::~TT__ExposureMode()
{
}


dm::TT__AutoFocusMode::TT__AutoFocusMode( const Type &type )
{
    mType = type;
}

void dm::TT__AutoFocusMode::setType( Type type )
{
    mType = type;
}

dm::TT__AutoFocusMode::Type dm::TT__AutoFocusMode::type() const
{
    return mType;
}

dm::TT__AutoFocusMode::operator Type() const
{
    return mType;
}

QVariant dm::TT__AutoFocusMode::serialize() const
{
    switch ( mType ) {
        case dm::TT__AutoFocusMode::AUTO:
            return QString::fromLatin1("AUTO");
        case dm::TT__AutoFocusMode::MANUAL:
            return QString::fromLatin1("MANUAL");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__AutoFocusMode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "AUTO", dm::TT__AutoFocusMode::AUTO },
    { "MANUAL", dm::TT__AutoFocusMode::MANUAL }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__AutoFocusMode'.", qPrintable(str) );
}

dm::TT__AutoFocusMode::TT__AutoFocusMode()
    : mType(Type(0))
{
}

dm::TT__AutoFocusMode::~TT__AutoFocusMode()
{
}


void dm::TT__Dot11PSKPassphrase::setValue( const QString& value )
{
    bool rangeOk = true;

    QRegExp exp( QString::fromLatin1("[ -~]{8,63}") );
    rangeOk = rangeOk && exp.exactMatch( (value) );

    if (!rangeOk)
        qDebug( "Invalid range in TT__Dot11PSKPassphrase::setValue()" );

    mValue = value;
}

QString dm::TT__Dot11PSKPassphrase::value() const
{
    return mValue;
}

dm::TT__Dot11PSKPassphrase::TT__Dot11PSKPassphrase( const QString& value )
{
    setValue(value);
}

dm::TT__Dot11PSKPassphrase::operator QString() const
{
    return mValue;
}

QVariant dm::TT__Dot11PSKPassphrase::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void dm::TT__Dot11PSKPassphrase::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// converter_simpletype.cpp:366
}

dm::TT__Dot11PSKPassphrase::TT__Dot11PSKPassphrase()
{
}

dm::TT__Dot11PSKPassphrase::~TT__Dot11PSKPassphrase()
{
}


dm::TT__BacklightCompensationMode::TT__BacklightCompensationMode( const Type &type )
{
    mType = type;
}

void dm::TT__BacklightCompensationMode::setType( Type type )
{
    mType = type;
}

dm::TT__BacklightCompensationMode::Type dm::TT__BacklightCompensationMode::type() const
{
    return mType;
}

dm::TT__BacklightCompensationMode::operator Type() const
{
    return mType;
}

QVariant dm::TT__BacklightCompensationMode::serialize() const
{
    switch ( mType ) {
        case dm::TT__BacklightCompensationMode::OFF:
            return QString::fromLatin1("OFF");
        case dm::TT__BacklightCompensationMode::ON:
            return QString::fromLatin1("ON");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__BacklightCompensationMode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "OFF", dm::TT__BacklightCompensationMode::OFF },
    { "ON", dm::TT__BacklightCompensationMode::ON }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__BacklightCompensationMode'.", qPrintable(str) );
}

dm::TT__BacklightCompensationMode::TT__BacklightCompensationMode()
    : mType(Type(0))
{
}

dm::TT__BacklightCompensationMode::~TT__BacklightCompensationMode()
{
}


dm::TT__ExposurePriority::TT__ExposurePriority( const Type &type )
{
    mType = type;
}

void dm::TT__ExposurePriority::setType( Type type )
{
    mType = type;
}

dm::TT__ExposurePriority::Type dm::TT__ExposurePriority::type() const
{
    return mType;
}

dm::TT__ExposurePriority::operator Type() const
{
    return mType;
}

QVariant dm::TT__ExposurePriority::serialize() const
{
    switch ( mType ) {
        case dm::TT__ExposurePriority::LowNoise:
            return QString::fromLatin1("LowNoise");
        case dm::TT__ExposurePriority::FrameRate:
            return QString::fromLatin1("FrameRate");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__ExposurePriority::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "LowNoise", dm::TT__ExposurePriority::LowNoise },
    { "FrameRate", dm::TT__ExposurePriority::FrameRate }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__ExposurePriority'.", qPrintable(str) );
}

dm::TT__ExposurePriority::TT__ExposurePriority()
    : mType(Type(0))
{
}

dm::TT__ExposurePriority::~TT__ExposurePriority()
{
}


void dm::TT__Dot11PSK::setValue( const QByteArray& value )
{
    bool rangeOk = true;

    rangeOk = rangeOk && ((value).length() == 32);

    if (!rangeOk)
        qDebug( "Invalid range in TT__Dot11PSK::setValue()" );

    mValue = value;
}

QByteArray dm::TT__Dot11PSK::value() const
{
    return mValue;
}

dm::TT__Dot11PSK::TT__Dot11PSK( const QByteArray& value )
{
    setValue(value);
}

dm::TT__Dot11PSK::operator QByteArray() const
{
    return mValue;
}

QVariant dm::TT__Dot11PSK::serialize() const
{
    return QString::fromLatin1(mValue.toHex().constData());// converter_simpletype.cpp:365
}

void dm::TT__Dot11PSK::deserialize( const QVariant& value )
{
    mValue = QByteArray::fromHex(value.toString().toLatin1());// converter_simpletype.cpp:366
}

dm::TT__Dot11PSK::TT__Dot11PSK()
{
}

dm::TT__Dot11PSK::~TT__Dot11PSK()
{
}


dm::TT__ImageStabilizationMode::TT__ImageStabilizationMode( const Type &type )
{
    mType = type;
}

void dm::TT__ImageStabilizationMode::setType( Type type )
{
    mType = type;
}

dm::TT__ImageStabilizationMode::Type dm::TT__ImageStabilizationMode::type() const
{
    return mType;
}

dm::TT__ImageStabilizationMode::operator Type() const
{
    return mType;
}

QVariant dm::TT__ImageStabilizationMode::serialize() const
{
    switch ( mType ) {
        case dm::TT__ImageStabilizationMode::OFF:
            return QString::fromLatin1("OFF");
        case dm::TT__ImageStabilizationMode::ON:
            return QString::fromLatin1("ON");
        case dm::TT__ImageStabilizationMode::AUTO:
            return QString::fromLatin1("AUTO");
        case dm::TT__ImageStabilizationMode::Extended:
            return QString::fromLatin1("Extended");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void dm::TT__ImageStabilizationMode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[4] = {
    { "OFF", dm::TT__ImageStabilizationMode::OFF },
    { "ON", dm::TT__ImageStabilizationMode::ON },
    { "AUTO", dm::TT__ImageStabilizationMode::AUTO },
    { "Extended", dm::TT__ImageStabilizationMode::Extended }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 4; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TT__ImageStabilizationMode'.", qPrintable(str) );
}

dm::TT__ImageStabilizationMode::TT__ImageStabilizationMode()
    : mType(Type(0))
{
}

dm::TT__ImageStabilizationMode::~TT__ImageStabilizationMode()
{
}


class dm::TT__ImagingSettingsExtension204::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__ImagingSettingsExtension204::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__ImagingSettingsExtension204::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__ImagingSettingsExtension204::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__ImagingSettingsExtension204::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ImagingSettingsExtension204"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__ImagingSettingsExtension204::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__ImagingSettingsExtension204::TT__ImagingSettingsExtension204()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ImagingSettingsExtension204::~TT__ImagingSettingsExtension204()
{
}

dm::TT__ImagingSettingsExtension204::TT__ImagingSettingsExtension204( const dm::TT__ImagingSettingsExtension204& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ImagingSettingsExtension204&  dm::TT__ImagingSettingsExtension204::operator=( const dm::TT__ImagingSettingsExtension204& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Dot11AvailableNetworksExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__Dot11AvailableNetworksExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__Dot11AvailableNetworksExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__Dot11AvailableNetworksExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__Dot11AvailableNetworksExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11AvailableNetworksExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__Dot11AvailableNetworksExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__Dot11AvailableNetworksExtension::TT__Dot11AvailableNetworksExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Dot11AvailableNetworksExtension::~TT__Dot11AvailableNetworksExtension()
{
}

dm::TT__Dot11AvailableNetworksExtension::TT__Dot11AvailableNetworksExtension( const dm::TT__Dot11AvailableNetworksExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Dot11AvailableNetworksExtension&  dm::TT__Dot11AvailableNetworksExtension::operator=( const dm::TT__Dot11AvailableNetworksExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__WhiteBalance20::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__WhiteBalanceMode mMode;
    float mCrGain;
    bool mCrGain_nil;
    float mCbGain;
    bool mCbGain_nil;
    dm::TT__WhiteBalance20Extension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__WhiteBalance20::PrivateDPtr::PrivateDPtr()
    : mCrGain(0), mCrGain_nil(true), mCbGain(0), mCbGain_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__WhiteBalance20::setMode( const dm::TT__WhiteBalanceMode& _mode )
{
    d_ptr->mMode = _mode;
}

dm::TT__WhiteBalanceMode dm::TT__WhiteBalance20::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__WhiteBalance20::setCrGain( float _crGain )
{
    d_ptr->mCrGain_nil = false;// converter_complextype.cpp:277
    d_ptr->mCrGain = _crGain;
}

float dm::TT__WhiteBalance20::crGain() const
{
    return d_ptr->mCrGain;
}

void dm::TT__WhiteBalance20::setCbGain( float _cbGain )
{
    d_ptr->mCbGain_nil = false;// converter_complextype.cpp:277
    d_ptr->mCbGain = _cbGain;
}

float dm::TT__WhiteBalance20::cbGain() const
{
    return d_ptr->mCbGain;
}

void dm::TT__WhiteBalance20::setExtension( const dm::TT__WhiteBalance20Extension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__WhiteBalance20Extension dm::TT__WhiteBalance20::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__WhiteBalance20::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__WhiteBalance20::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__WhiteBalance20::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("WhiteBalance20"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), d_ptr->mMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("WhiteBalanceMode"));// elementargumentserializer.cpp:110
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    if (!d_ptr->mCrGain_nil) {
        KDSoapValue _valueCrGain(QString::fromLatin1("CrGain"), QVariant::fromValue(d_ptr->mCrGain), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueCrGain.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueCrGain.setQualified(true);
        if (!_valueCrGain.isNil())
        args.append(_valueCrGain);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mCbGain_nil) {
        KDSoapValue _valueCbGain(QString::fromLatin1("CbGain"), QVariant::fromValue(d_ptr->mCbGain), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueCbGain.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueCbGain.setQualified(true);
        if (!_valueCbGain.isNil())
        args.append(_valueCbGain);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__WhiteBalance20::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("CrGain")) {// converter_complextype.cpp:354
            d_ptr->mCrGain = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mCrGain_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("CbGain")) {// converter_complextype.cpp:354
            d_ptr->mCbGain = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mCbGain_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__WhiteBalance20::TT__WhiteBalance20()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__WhiteBalance20::~TT__WhiteBalance20()
{
}

dm::TT__WhiteBalance20::TT__WhiteBalance20( const dm::TT__WhiteBalance20& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__WhiteBalance20&  dm::TT__WhiteBalance20::operator=( const dm::TT__WhiteBalance20& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetWsdlUrl::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetWsdlUrl"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetWsdlUrl::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetWsdlUrl::TDS__GetWsdlUrl()
{
}

dm::TDS__GetWsdlUrl::~TDS__GetWsdlUrl()
{
}


class dm::TT__WideDynamicRange::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__WideDynamicMode mMode;
    float mLevel;
};

dm::TT__WideDynamicRange::PrivateDPtr::PrivateDPtr()
    : mLevel(0)
{
}


void dm::TT__WideDynamicRange::setMode( const dm::TT__WideDynamicMode& _mode )
{
    d_ptr->mMode = _mode;
}

dm::TT__WideDynamicMode dm::TT__WideDynamicRange::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__WideDynamicRange::setLevel( float _level )
{
    d_ptr->mLevel = _level;
}

float dm::TT__WideDynamicRange::level() const
{
    return d_ptr->mLevel;
}

KDSoapValue dm::TT__WideDynamicRange::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("WideDynamicRange"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), d_ptr->mMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("WideDynamicMode"));// elementargumentserializer.cpp:110
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    KDSoapValue _valueLevel(QString::fromLatin1("Level"), QVariant::fromValue(d_ptr->mLevel), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueLevel.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueLevel.setQualified(true);
    args.append(_valueLevel);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__WideDynamicRange::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Level")) {// converter_complextype.cpp:354
            d_ptr->mLevel = val.value().value<float>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__WideDynamicRange::TT__WideDynamicRange()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__WideDynamicRange::~TT__WideDynamicRange()
{
}

dm::TT__WideDynamicRange::TT__WideDynamicRange( const dm::TT__WideDynamicRange& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__WideDynamicRange&  dm::TT__WideDynamicRange::operator=( const dm::TT__WideDynamicRange& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkProtocolExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__NetworkProtocolExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__NetworkProtocolExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__NetworkProtocolExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__NetworkProtocolExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkProtocolExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__NetworkProtocolExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__NetworkProtocolExtension::TT__NetworkProtocolExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkProtocolExtension::~TT__NetworkProtocolExtension()
{
}

dm::TT__NetworkProtocolExtension::TT__NetworkProtocolExtension( const dm::TT__NetworkProtocolExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkProtocolExtension&  dm::TT__NetworkProtocolExtension::operator=( const dm::TT__NetworkProtocolExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkInterfaceConnectionSetting::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mAutoNegotiation;
    int mSpeed;
    dm::TT__Duplex mDuplex;
};

dm::TT__NetworkInterfaceConnectionSetting::PrivateDPtr::PrivateDPtr()
    : mAutoNegotiation(false), mSpeed(0)
{
}


void dm::TT__NetworkInterfaceConnectionSetting::setAutoNegotiation( bool _autoNegotiation )
{
    d_ptr->mAutoNegotiation = _autoNegotiation;
}

bool dm::TT__NetworkInterfaceConnectionSetting::autoNegotiation() const
{
    return d_ptr->mAutoNegotiation;
}

void dm::TT__NetworkInterfaceConnectionSetting::setSpeed( int _speed )
{
    d_ptr->mSpeed = _speed;
}

int dm::TT__NetworkInterfaceConnectionSetting::speed() const
{
    return d_ptr->mSpeed;
}

void dm::TT__NetworkInterfaceConnectionSetting::setDuplex( const dm::TT__Duplex& _duplex )
{
    d_ptr->mDuplex = _duplex;
}

dm::TT__Duplex dm::TT__NetworkInterfaceConnectionSetting::duplex() const
{
    return d_ptr->mDuplex;
}

KDSoapValue dm::TT__NetworkInterfaceConnectionSetting::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkInterfaceConnectionSetting"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueAutoNegotiation(QString::fromLatin1("AutoNegotiation"), QVariant::fromValue(d_ptr->mAutoNegotiation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueAutoNegotiation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueAutoNegotiation.setQualified(true);
    args.append(_valueAutoNegotiation);// elementargumentserializer.cpp:122
    KDSoapValue _valueSpeed(QString::fromLatin1("Speed"), QVariant::fromValue(d_ptr->mSpeed), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueSpeed.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueSpeed.setQualified(true);
    args.append(_valueSpeed);// elementargumentserializer.cpp:122
    KDSoapValue _valueDuplex(QString::fromLatin1("Duplex"), d_ptr->mDuplex.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Duplex"));// elementargumentserializer.cpp:110
    _valueDuplex.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDuplex.setQualified(true);
    args.append(_valueDuplex);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__NetworkInterfaceConnectionSetting::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("AutoNegotiation")) {// converter_complextype.cpp:354
            d_ptr->mAutoNegotiation = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Speed")) {// converter_complextype.cpp:354
            d_ptr->mSpeed = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Duplex")) {// converter_complextype.cpp:354
            d_ptr->mDuplex.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TT__NetworkInterfaceConnectionSetting::TT__NetworkInterfaceConnectionSetting()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkInterfaceConnectionSetting::~TT__NetworkInterfaceConnectionSetting()
{
}

dm::TT__NetworkInterfaceConnectionSetting::TT__NetworkInterfaceConnectionSetting( const dm::TT__NetworkInterfaceConnectionSetting& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkInterfaceConnectionSetting&  dm::TT__NetworkInterfaceConnectionSetting::operator=( const dm::TT__NetworkInterfaceConnectionSetting& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetZeroConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetZeroConfiguration"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetZeroConfiguration::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetZeroConfiguration::TDS__GetZeroConfiguration()
{
}

dm::TDS__GetZeroConfiguration::~TDS__GetZeroConfiguration()
{
}


class dm::TT__IPAddressFilter::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__IPAddressFilterType mType;
    QList< dm::TT__PrefixedIPv4Address > mIPv4Address;
    bool mIPv4Address_nil;
    QList< dm::TT__PrefixedIPv6Address > mIPv6Address;
    bool mIPv6Address_nil;
    dm::TT__IPAddressFilterExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__IPAddressFilter::PrivateDPtr::PrivateDPtr()
    : mIPv4Address_nil(true), mIPv6Address_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__IPAddressFilter::setType( const dm::TT__IPAddressFilterType& _type )
{
    d_ptr->mType = _type;
}

dm::TT__IPAddressFilterType dm::TT__IPAddressFilter::type() const
{
    return d_ptr->mType;
}

void dm::TT__IPAddressFilter::setIPv4Address( const QList< dm::TT__PrefixedIPv4Address >& _iPv4Address )
{
    d_ptr->mIPv4Address_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv4Address = _iPv4Address;
}

QList< dm::TT__PrefixedIPv4Address > dm::TT__IPAddressFilter::iPv4Address() const
{
    return d_ptr->mIPv4Address;
}

void dm::TT__IPAddressFilter::setIPv6Address( const QList< dm::TT__PrefixedIPv6Address >& _iPv6Address )
{
    d_ptr->mIPv6Address_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv6Address = _iPv6Address;
}

QList< dm::TT__PrefixedIPv6Address > dm::TT__IPAddressFilter::iPv6Address() const
{
    return d_ptr->mIPv6Address;
}

void dm::TT__IPAddressFilter::setExtension( const dm::TT__IPAddressFilterExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__IPAddressFilterExtension dm::TT__IPAddressFilter::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__IPAddressFilter::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__IPAddressFilter::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__IPAddressFilter::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPAddressFilter"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueType(QString::fromLatin1("Type"), d_ptr->mType.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPAddressFilterType"));// elementargumentserializer.cpp:110
    _valueType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueType.setQualified(true);
    args.append(_valueType);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mIPv4Address.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueIPv4Address(d_ptr->mIPv4Address.at(i).serialize(QString::fromLatin1("IPv4Address")));// elementargumentserializer.cpp:102
        _valueIPv4Address.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPv4Address.setQualified(true);
        args.append(_valueIPv4Address);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mIPv6Address.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueIPv6Address(d_ptr->mIPv6Address.at(i).serialize(QString::fromLatin1("IPv6Address")));// elementargumentserializer.cpp:102
        _valueIPv6Address.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPv6Address.setQualified(true);
        args.append(_valueIPv6Address);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__IPAddressFilter::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Type")) {// converter_complextype.cpp:354
            d_ptr->mType.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("IPv4Address")) {// converter_complextype.cpp:354
            dm::TT__PrefixedIPv4Address mIPv4AddressTemp;// converter_complextype.cpp:412
            mIPv4AddressTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mIPv4Address.append(mIPv4AddressTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("IPv6Address")) {// converter_complextype.cpp:354
            dm::TT__PrefixedIPv6Address mIPv6AddressTemp;// converter_complextype.cpp:412
            mIPv6AddressTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mIPv6Address.append(mIPv6AddressTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__IPAddressFilter::TT__IPAddressFilter()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IPAddressFilter::~TT__IPAddressFilter()
{
}

dm::TT__IPAddressFilter::TT__IPAddressFilter( const dm::TT__IPAddressFilter& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IPAddressFilter&  dm::TT__IPAddressFilter::operator=( const dm::TT__IPAddressFilter& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__RemoveIPAddressFilter::PrivateDPtr : public QSharedData
{
public:
    dm::TT__IPAddressFilter mIPAddressFilter;
};

void dm::TDS__RemoveIPAddressFilter::setIPAddressFilter( const dm::TT__IPAddressFilter& _iPAddressFilter )
{
    d_ptr->mIPAddressFilter = _iPAddressFilter;
}

dm::TT__IPAddressFilter dm::TDS__RemoveIPAddressFilter::iPAddressFilter() const
{
    return d_ptr->mIPAddressFilter;
}

KDSoapValue dm::TDS__RemoveIPAddressFilter::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("RemoveIPAddressFilter"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueIPAddressFilter(d_ptr->mIPAddressFilter.serialize(QString::fromLatin1("IPAddressFilter")));// elementargumentserializer.cpp:102
    _valueIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueIPAddressFilter.setQualified(true);
    args.append(_valueIPAddressFilter);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__RemoveIPAddressFilter::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("IPAddressFilter")) {// converter_complextype.cpp:354
            d_ptr->mIPAddressFilter.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__RemoveIPAddressFilter::TDS__RemoveIPAddressFilter()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__RemoveIPAddressFilter::~TDS__RemoveIPAddressFilter()
{
}

dm::TDS__RemoveIPAddressFilter::TDS__RemoveIPAddressFilter( const dm::TDS__RemoveIPAddressFilter& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__RemoveIPAddressFilter&  dm::TDS__RemoveIPAddressFilter::operator=( const dm::TDS__RemoveIPAddressFilter& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__OSDImgConfigurationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__OSDImgConfigurationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__OSDImgConfigurationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__OSDImgConfigurationExtension::any() const
{
    return d_ptr->mAny;
}

void dm::TT__OSDImgConfigurationExtension::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__OSDImgConfigurationExtension::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__OSDImgConfigurationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("OSDImgConfigurationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__OSDImgConfigurationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__OSDImgConfigurationExtension::TT__OSDImgConfigurationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__OSDImgConfigurationExtension::~TT__OSDImgConfigurationExtension()
{
}

dm::TT__OSDImgConfigurationExtension::TT__OSDImgConfigurationExtension( const dm::TT__OSDImgConfigurationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__OSDImgConfigurationExtension&  dm::TT__OSDImgConfigurationExtension::operator=( const dm::TT__OSDImgConfigurationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkCapabilitiesExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mDot11Configuration;
    bool mDot11Configuration_nil;
    dm::TT__NetworkCapabilitiesExtension2 mExtension;
    bool mExtension_nil;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__NetworkCapabilitiesExtension::PrivateDPtr::PrivateDPtr()
    : mDot11Configuration(false), mDot11Configuration_nil(true), mExtension_nil(true), mAny_nil(true)
{
}


void dm::TT__NetworkCapabilitiesExtension::setDot11Configuration( bool _dot11Configuration )
{
    d_ptr->mDot11Configuration_nil = false;// converter_complextype.cpp:277
    d_ptr->mDot11Configuration = _dot11Configuration;
}

bool dm::TT__NetworkCapabilitiesExtension::dot11Configuration() const
{
    return d_ptr->mDot11Configuration;
}

void dm::TT__NetworkCapabilitiesExtension::setExtension( const dm::TT__NetworkCapabilitiesExtension2& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__NetworkCapabilitiesExtension2 dm::TT__NetworkCapabilitiesExtension::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__NetworkCapabilitiesExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__NetworkCapabilitiesExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__NetworkCapabilitiesExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkCapabilitiesExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mDot11Configuration_nil) {
        KDSoapValue _valueDot11Configuration(QString::fromLatin1("Dot11Configuration"), QVariant::fromValue(d_ptr->mDot11Configuration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueDot11Configuration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDot11Configuration.setQualified(true);
        if (!_valueDot11Configuration.isNil())
        args.append(_valueDot11Configuration);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__NetworkCapabilitiesExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Dot11Configuration")) {// converter_complextype.cpp:354
            d_ptr->mDot11Configuration = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mDot11Configuration_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__NetworkCapabilitiesExtension::TT__NetworkCapabilitiesExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkCapabilitiesExtension::~TT__NetworkCapabilitiesExtension()
{
}

dm::TT__NetworkCapabilitiesExtension::TT__NetworkCapabilitiesExtension( const dm::TT__NetworkCapabilitiesExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkCapabilitiesExtension&  dm::TT__NetworkCapabilitiesExtension::operator=( const dm::TT__NetworkCapabilitiesExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetIPAddressFilterResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__IPAddressFilter mIPAddressFilter;
};

void dm::TDS__GetIPAddressFilterResponse::setIPAddressFilter( const dm::TT__IPAddressFilter& _iPAddressFilter )
{
    d_ptr->mIPAddressFilter = _iPAddressFilter;
}

dm::TT__IPAddressFilter dm::TDS__GetIPAddressFilterResponse::iPAddressFilter() const
{
    return d_ptr->mIPAddressFilter;
}

KDSoapValue dm::TDS__GetIPAddressFilterResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetIPAddressFilterResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueIPAddressFilter(d_ptr->mIPAddressFilter.serialize(QString::fromLatin1("IPAddressFilter")));// elementargumentserializer.cpp:102
    _valueIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueIPAddressFilter.setQualified(true);
    args.append(_valueIPAddressFilter);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetIPAddressFilterResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("IPAddressFilter")) {// converter_complextype.cpp:354
            d_ptr->mIPAddressFilter.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetIPAddressFilterResponse::TDS__GetIPAddressFilterResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetIPAddressFilterResponse::~TDS__GetIPAddressFilterResponse()
{
}

dm::TDS__GetIPAddressFilterResponse::TDS__GetIPAddressFilterResponse( const dm::TDS__GetIPAddressFilterResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetIPAddressFilterResponse&  dm::TDS__GetIPAddressFilterResponse::operator=( const dm::TDS__GetIPAddressFilterResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetSystemSupportInformationResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__SupportInformation mSupportInformation;
};

void dm::TDS__GetSystemSupportInformationResponse::setSupportInformation( const dm::TT__SupportInformation& _supportInformation )
{
    d_ptr->mSupportInformation = _supportInformation;
}

dm::TT__SupportInformation dm::TDS__GetSystemSupportInformationResponse::supportInformation() const
{
    return d_ptr->mSupportInformation;
}

KDSoapValue dm::TDS__GetSystemSupportInformationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetSystemSupportInformationResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueSupportInformation(d_ptr->mSupportInformation.serialize(QString::fromLatin1("SupportInformation")));// elementargumentserializer.cpp:102
    _valueSupportInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSupportInformation.setQualified(true);
    args.append(_valueSupportInformation);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetSystemSupportInformationResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("SupportInformation")) {// converter_complextype.cpp:354
            d_ptr->mSupportInformation.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetSystemSupportInformationResponse::TDS__GetSystemSupportInformationResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetSystemSupportInformationResponse::~TDS__GetSystemSupportInformationResponse()
{
}

dm::TDS__GetSystemSupportInformationResponse::TDS__GetSystemSupportInformationResponse( const dm::TDS__GetSystemSupportInformationResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetSystemSupportInformationResponse&  dm::TDS__GetSystemSupportInformationResponse::operator=( const dm::TDS__GetSystemSupportInformationResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__RestoreSystemResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("RestoreSystemResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__RestoreSystemResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__RestoreSystemResponse::TDS__RestoreSystemResponse()
{
}

dm::TDS__RestoreSystemResponse::~TDS__RestoreSystemResponse()
{
}


class dm::TT__SecurityCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mTLS1_1;
    bool mTLS1_2;
    bool mOnboardKeyGeneration;
    bool mAccessPolicyConfig;
    bool mX_509Token;
    bool mSAMLToken;
    bool mKerberosToken;
    bool mRELToken;
    dm::TT__SecurityCapabilitiesExtension mExtension;
    bool mExtension_nil;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__SecurityCapabilities::PrivateDPtr::PrivateDPtr()
    : mTLS1_1(false), mTLS1_2(false), mOnboardKeyGeneration(false), mAccessPolicyConfig(false), mX_509Token(false), mSAMLToken(false), mKerberosToken(false), mRELToken(false), mExtension_nil(true), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__SecurityCapabilities::setTLS1_1( bool _tLS1_1 )
{
    d_ptr->mTLS1_1 = _tLS1_1;
}

bool dm::TT__SecurityCapabilities::tLS1_1() const
{
    return d_ptr->mTLS1_1;
}

void dm::TT__SecurityCapabilities::setTLS1_2( bool _tLS1_2 )
{
    d_ptr->mTLS1_2 = _tLS1_2;
}

bool dm::TT__SecurityCapabilities::tLS1_2() const
{
    return d_ptr->mTLS1_2;
}

void dm::TT__SecurityCapabilities::setOnboardKeyGeneration( bool _onboardKeyGeneration )
{
    d_ptr->mOnboardKeyGeneration = _onboardKeyGeneration;
}

bool dm::TT__SecurityCapabilities::onboardKeyGeneration() const
{
    return d_ptr->mOnboardKeyGeneration;
}

void dm::TT__SecurityCapabilities::setAccessPolicyConfig( bool _accessPolicyConfig )
{
    d_ptr->mAccessPolicyConfig = _accessPolicyConfig;
}

bool dm::TT__SecurityCapabilities::accessPolicyConfig() const
{
    return d_ptr->mAccessPolicyConfig;
}

void dm::TT__SecurityCapabilities::setX_509Token( bool _x_509Token )
{
    d_ptr->mX_509Token = _x_509Token;
}

bool dm::TT__SecurityCapabilities::x_509Token() const
{
    return d_ptr->mX_509Token;
}

void dm::TT__SecurityCapabilities::setSAMLToken( bool _sAMLToken )
{
    d_ptr->mSAMLToken = _sAMLToken;
}

bool dm::TT__SecurityCapabilities::sAMLToken() const
{
    return d_ptr->mSAMLToken;
}

void dm::TT__SecurityCapabilities::setKerberosToken( bool _kerberosToken )
{
    d_ptr->mKerberosToken = _kerberosToken;
}

bool dm::TT__SecurityCapabilities::kerberosToken() const
{
    return d_ptr->mKerberosToken;
}

void dm::TT__SecurityCapabilities::setRELToken( bool _rELToken )
{
    d_ptr->mRELToken = _rELToken;
}

bool dm::TT__SecurityCapabilities::rELToken() const
{
    return d_ptr->mRELToken;
}

void dm::TT__SecurityCapabilities::setExtension( const dm::TT__SecurityCapabilitiesExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__SecurityCapabilitiesExtension dm::TT__SecurityCapabilities::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__SecurityCapabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__SecurityCapabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__SecurityCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__SecurityCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__SecurityCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SecurityCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueTLS1_1(QString::fromLatin1("TLS1.1"), QVariant::fromValue(d_ptr->mTLS1_1), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueTLS1_1.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueTLS1_1.setQualified(true);
    args.append(_valueTLS1_1);// elementargumentserializer.cpp:122
    KDSoapValue _valueTLS1_2(QString::fromLatin1("TLS1.2"), QVariant::fromValue(d_ptr->mTLS1_2), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueTLS1_2.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueTLS1_2.setQualified(true);
    args.append(_valueTLS1_2);// elementargumentserializer.cpp:122
    KDSoapValue _valueOnboardKeyGeneration(QString::fromLatin1("OnboardKeyGeneration"), QVariant::fromValue(d_ptr->mOnboardKeyGeneration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueOnboardKeyGeneration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueOnboardKeyGeneration.setQualified(true);
    args.append(_valueOnboardKeyGeneration);// elementargumentserializer.cpp:122
    KDSoapValue _valueAccessPolicyConfig(QString::fromLatin1("AccessPolicyConfig"), QVariant::fromValue(d_ptr->mAccessPolicyConfig), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueAccessPolicyConfig.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueAccessPolicyConfig.setQualified(true);
    args.append(_valueAccessPolicyConfig);// elementargumentserializer.cpp:122
    KDSoapValue _valueX_509Token(QString::fromLatin1("X.509Token"), QVariant::fromValue(d_ptr->mX_509Token), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueX_509Token.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueX_509Token.setQualified(true);
    args.append(_valueX_509Token);// elementargumentserializer.cpp:122
    KDSoapValue _valueSAMLToken(QString::fromLatin1("SAMLToken"), QVariant::fromValue(d_ptr->mSAMLToken), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueSAMLToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueSAMLToken.setQualified(true);
    args.append(_valueSAMLToken);// elementargumentserializer.cpp:122
    KDSoapValue _valueKerberosToken(QString::fromLatin1("KerberosToken"), QVariant::fromValue(d_ptr->mKerberosToken), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueKerberosToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueKerberosToken.setQualified(true);
    args.append(_valueKerberosToken);// elementargumentserializer.cpp:122
    KDSoapValue _valueRELToken(QString::fromLatin1("RELToken"), QVariant::fromValue(d_ptr->mRELToken), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueRELToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueRELToken.setQualified(true);
    args.append(_valueRELToken);// elementargumentserializer.cpp:122
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__SecurityCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("TLS1.1")) {// converter_complextype.cpp:354
            d_ptr->mTLS1_1 = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("TLS1.2")) {// converter_complextype.cpp:354
            d_ptr->mTLS1_2 = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("OnboardKeyGeneration")) {// converter_complextype.cpp:354
            d_ptr->mOnboardKeyGeneration = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("AccessPolicyConfig")) {// converter_complextype.cpp:354
            d_ptr->mAccessPolicyConfig = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("X.509Token")) {// converter_complextype.cpp:354
            d_ptr->mX_509Token = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("SAMLToken")) {// converter_complextype.cpp:354
            d_ptr->mSAMLToken = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("KerberosToken")) {// converter_complextype.cpp:354
            d_ptr->mKerberosToken = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("RELToken")) {// converter_complextype.cpp:354
            d_ptr->mRELToken = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__SecurityCapabilities::TT__SecurityCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SecurityCapabilities::~TT__SecurityCapabilities()
{
}

dm::TT__SecurityCapabilities::TT__SecurityCapabilities( const dm::TT__SecurityCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SecurityCapabilities&  dm::TT__SecurityCapabilities::operator=( const dm::TT__SecurityCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__TimeZone::PrivateDPtr : public QSharedData
{
public:
    QString mTZ;
};

void dm::TT__TimeZone::setTZ( const QString& _tZ )
{
    d_ptr->mTZ = _tZ;
}

QString dm::TT__TimeZone::tZ() const
{
    return d_ptr->mTZ;
}

KDSoapValue dm::TT__TimeZone::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("TimeZone"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueTZ(QString::fromLatin1("TZ"), QVariant::fromValue(d_ptr->mTZ), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
    _valueTZ.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueTZ.setQualified(true);
    args.append(_valueTZ);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__TimeZone::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("TZ")) {// converter_complextype.cpp:354
            d_ptr->mTZ = val.value().value<QString>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__TimeZone::TT__TimeZone()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__TimeZone::~TT__TimeZone()
{
}

dm::TT__TimeZone::TT__TimeZone( const dm::TT__TimeZone& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__TimeZone&  dm::TT__TimeZone::operator=( const dm::TT__TimeZone& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__IPAddress::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__IPType mType;
    dm::TT__IPv4Address mIPv4Address;
    bool mIPv4Address_nil;
    dm::TT__IPv6Address mIPv6Address;
    bool mIPv6Address_nil;
};

dm::TT__IPAddress::PrivateDPtr::PrivateDPtr()
    : mIPv4Address_nil(true), mIPv6Address_nil(true)
{
}


void dm::TT__IPAddress::setType( const dm::TT__IPType& _type )
{
    d_ptr->mType = _type;
}

dm::TT__IPType dm::TT__IPAddress::type() const
{
    return d_ptr->mType;
}

void dm::TT__IPAddress::setIPv4Address( const dm::TT__IPv4Address& _iPv4Address )
{
    d_ptr->mIPv4Address_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv4Address = _iPv4Address;
}

dm::TT__IPv4Address dm::TT__IPAddress::iPv4Address() const
{
    return d_ptr->mIPv4Address;
}

void dm::TT__IPAddress::setIPv6Address( const dm::TT__IPv6Address& _iPv6Address )
{
    d_ptr->mIPv6Address_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv6Address = _iPv6Address;
}

dm::TT__IPv6Address dm::TT__IPAddress::iPv6Address() const
{
    return d_ptr->mIPv6Address;
}

KDSoapValue dm::TT__IPAddress::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPAddress"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueType(QString::fromLatin1("Type"), d_ptr->mType.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPType"));// elementargumentserializer.cpp:110
    _valueType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueType.setQualified(true);
    args.append(_valueType);// elementargumentserializer.cpp:122
    if (!d_ptr->mIPv4Address_nil) {
        KDSoapValue _valueIPv4Address(QString::fromLatin1("IPv4Address"), d_ptr->mIPv4Address.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv4Address"));// elementargumentserializer.cpp:110
        _valueIPv4Address.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPv4Address.setQualified(true);
        if (!_valueIPv4Address.isNil())
        args.append(_valueIPv4Address);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mIPv6Address_nil) {
        KDSoapValue _valueIPv6Address(QString::fromLatin1("IPv6Address"), d_ptr->mIPv6Address.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv6Address"));// elementargumentserializer.cpp:110
        _valueIPv6Address.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPv6Address.setQualified(true);
        if (!_valueIPv6Address.isNil())
        args.append(_valueIPv6Address);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__IPAddress::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Type")) {// converter_complextype.cpp:354
            d_ptr->mType.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("IPv4Address")) {// converter_complextype.cpp:354
            d_ptr->mIPv4Address.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mIPv4Address_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("IPv6Address")) {// converter_complextype.cpp:354
            d_ptr->mIPv6Address.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mIPv6Address_nil = false;// converter_complextype.cpp:375
        }
    }
}

dm::TT__IPAddress::TT__IPAddress()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IPAddress::~TT__IPAddress()
{
}

dm::TT__IPAddress::TT__IPAddress( const dm::TT__IPAddress& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IPAddress&  dm::TT__IPAddress::operator=( const dm::TT__IPAddress& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__EapMethodExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__EapMethodExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__EapMethodExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__EapMethodExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__EapMethodExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("EapMethodExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__EapMethodExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__EapMethodExtension::TT__EapMethodExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__EapMethodExtension::~TT__EapMethodExtension()
{
}

dm::TT__EapMethodExtension::TT__EapMethodExtension( const dm::TT__EapMethodExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__EapMethodExtension&  dm::TT__EapMethodExtension::operator=( const dm::TT__EapMethodExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__OSDTextConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mType;
    QString mDateFormat;
    bool mDateFormat_nil;
    QString mTimeFormat;
    bool mTimeFormat_nil;
    int mFontSize;
    bool mFontSize_nil;
    dm::TT__OSDColor mFontColor;
    bool mFontColor_nil;
    dm::TT__OSDColor mBackgroundColor;
    bool mBackgroundColor_nil;
    QString mPlainText;
    bool mPlainText_nil;
    dm::TT__OSDTextConfigurationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__OSDTextConfiguration::PrivateDPtr::PrivateDPtr()
    : mDateFormat_nil(true), mTimeFormat_nil(true), mFontSize(0), mFontSize_nil(true), mFontColor_nil(true), mBackgroundColor_nil(true), mPlainText_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__OSDTextConfiguration::setType( const QString& _type )
{
    d_ptr->mType = _type;
}

QString dm::TT__OSDTextConfiguration::type() const
{
    return d_ptr->mType;
}

void dm::TT__OSDTextConfiguration::setDateFormat( const QString& _dateFormat )
{
    d_ptr->mDateFormat_nil = false;// converter_complextype.cpp:277
    d_ptr->mDateFormat = _dateFormat;
}

QString dm::TT__OSDTextConfiguration::dateFormat() const
{
    return d_ptr->mDateFormat;
}

void dm::TT__OSDTextConfiguration::setTimeFormat( const QString& _timeFormat )
{
    d_ptr->mTimeFormat_nil = false;// converter_complextype.cpp:277
    d_ptr->mTimeFormat = _timeFormat;
}

QString dm::TT__OSDTextConfiguration::timeFormat() const
{
    return d_ptr->mTimeFormat;
}

void dm::TT__OSDTextConfiguration::setFontSize( int _fontSize )
{
    d_ptr->mFontSize_nil = false;// converter_complextype.cpp:277
    d_ptr->mFontSize = _fontSize;
}

int dm::TT__OSDTextConfiguration::fontSize() const
{
    return d_ptr->mFontSize;
}

void dm::TT__OSDTextConfiguration::setFontColor( const dm::TT__OSDColor& _fontColor )
{
    d_ptr->mFontColor_nil = false;// converter_complextype.cpp:277
    d_ptr->mFontColor = _fontColor;
}

dm::TT__OSDColor dm::TT__OSDTextConfiguration::fontColor() const
{
    return d_ptr->mFontColor;
}

void dm::TT__OSDTextConfiguration::setBackgroundColor( const dm::TT__OSDColor& _backgroundColor )
{
    d_ptr->mBackgroundColor_nil = false;// converter_complextype.cpp:277
    d_ptr->mBackgroundColor = _backgroundColor;
}

dm::TT__OSDColor dm::TT__OSDTextConfiguration::backgroundColor() const
{
    return d_ptr->mBackgroundColor;
}

void dm::TT__OSDTextConfiguration::setPlainText( const QString& _plainText )
{
    d_ptr->mPlainText_nil = false;// converter_complextype.cpp:277
    d_ptr->mPlainText = _plainText;
}

QString dm::TT__OSDTextConfiguration::plainText() const
{
    return d_ptr->mPlainText;
}

void dm::TT__OSDTextConfiguration::setExtension( const dm::TT__OSDTextConfigurationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__OSDTextConfigurationExtension dm::TT__OSDTextConfiguration::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__OSDTextConfiguration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__OSDTextConfiguration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__OSDTextConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("OSDTextConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueType(QString::fromLatin1("Type"), QVariant::fromValue(d_ptr->mType), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueType.setQualified(true);
    args.append(_valueType);// elementargumentserializer.cpp:122
    if (!d_ptr->mDateFormat_nil) {
        KDSoapValue _valueDateFormat(QString::fromLatin1("DateFormat"), QVariant::fromValue(d_ptr->mDateFormat), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueDateFormat.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDateFormat.setQualified(true);
        if (!_valueDateFormat.isNil())
        args.append(_valueDateFormat);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mTimeFormat_nil) {
        KDSoapValue _valueTimeFormat(QString::fromLatin1("TimeFormat"), QVariant::fromValue(d_ptr->mTimeFormat), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueTimeFormat.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueTimeFormat.setQualified(true);
        if (!_valueTimeFormat.isNil())
        args.append(_valueTimeFormat);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mFontSize_nil) {
        KDSoapValue _valueFontSize(QString::fromLatin1("FontSize"), QVariant::fromValue(d_ptr->mFontSize), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueFontSize.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueFontSize.setQualified(true);
        if (!_valueFontSize.isNil())
        args.append(_valueFontSize);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mFontColor_nil) {
        KDSoapValue _valueFontColor(d_ptr->mFontColor.serialize(QString::fromLatin1("FontColor")));// elementargumentserializer.cpp:102
        _valueFontColor.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueFontColor.setQualified(true);
        if (!_valueFontColor.isNil())
        args.append(_valueFontColor);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mBackgroundColor_nil) {
        KDSoapValue _valueBackgroundColor(d_ptr->mBackgroundColor.serialize(QString::fromLatin1("BackgroundColor")));// elementargumentserializer.cpp:102
        _valueBackgroundColor.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueBackgroundColor.setQualified(true);
        if (!_valueBackgroundColor.isNil())
        args.append(_valueBackgroundColor);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mPlainText_nil) {
        KDSoapValue _valuePlainText(QString::fromLatin1("PlainText"), QVariant::fromValue(d_ptr->mPlainText), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valuePlainText.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePlainText.setQualified(true);
        if (!_valuePlainText.isNil())
        args.append(_valuePlainText);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__OSDTextConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Type")) {// converter_complextype.cpp:354
            d_ptr->mType = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("DateFormat")) {// converter_complextype.cpp:354
            d_ptr->mDateFormat = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mDateFormat_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("TimeFormat")) {// converter_complextype.cpp:354
            d_ptr->mTimeFormat = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mTimeFormat_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("FontSize")) {// converter_complextype.cpp:354
            d_ptr->mFontSize = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mFontSize_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("FontColor")) {// converter_complextype.cpp:354
            d_ptr->mFontColor.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("BackgroundColor")) {// converter_complextype.cpp:354
            d_ptr->mBackgroundColor.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("PlainText")) {// converter_complextype.cpp:354
            d_ptr->mPlainText = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mPlainText_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__OSDTextConfiguration::TT__OSDTextConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__OSDTextConfiguration::~TT__OSDTextConfiguration()
{
}

dm::TT__OSDTextConfiguration::TT__OSDTextConfiguration( const dm::TT__OSDTextConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__OSDTextConfiguration&  dm::TT__OSDTextConfiguration::operator=( const dm::TT__OSDTextConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__UserExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__UserExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__UserExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__UserExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__UserExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("UserExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__UserExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__UserExtension::TT__UserExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__UserExtension::~TT__UserExtension()
{
}

dm::TT__UserExtension::TT__UserExtension( const dm::TT__UserExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__UserExtension&  dm::TT__UserExtension::operator=( const dm::TT__UserExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Exposure::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__ExposureMode mMode;
    dm::TT__ExposurePriority mPriority;
    dm::TT__Rectangle mWindow;
    float mMinExposureTime;
    float mMaxExposureTime;
    float mMinGain;
    float mMaxGain;
    float mMinIris;
    float mMaxIris;
    float mExposureTime;
    float mGain;
    float mIris;
};

dm::TT__Exposure::PrivateDPtr::PrivateDPtr()
    : mMinExposureTime(0), mMaxExposureTime(0), mMinGain(0), mMaxGain(0), mMinIris(0), mMaxIris(0), mExposureTime(0), mGain(0), mIris(0)
{
}


void dm::TT__Exposure::setMode( const dm::TT__ExposureMode& _mode )
{
    d_ptr->mMode = _mode;
}

dm::TT__ExposureMode dm::TT__Exposure::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__Exposure::setPriority( const dm::TT__ExposurePriority& _priority )
{
    d_ptr->mPriority = _priority;
}

dm::TT__ExposurePriority dm::TT__Exposure::priority() const
{
    return d_ptr->mPriority;
}

void dm::TT__Exposure::setWindow( const dm::TT__Rectangle& _window )
{
    d_ptr->mWindow = _window;
}

dm::TT__Rectangle dm::TT__Exposure::window() const
{
    return d_ptr->mWindow;
}

void dm::TT__Exposure::setMinExposureTime( float _minExposureTime )
{
    d_ptr->mMinExposureTime = _minExposureTime;
}

float dm::TT__Exposure::minExposureTime() const
{
    return d_ptr->mMinExposureTime;
}

void dm::TT__Exposure::setMaxExposureTime( float _maxExposureTime )
{
    d_ptr->mMaxExposureTime = _maxExposureTime;
}

float dm::TT__Exposure::maxExposureTime() const
{
    return d_ptr->mMaxExposureTime;
}

void dm::TT__Exposure::setMinGain( float _minGain )
{
    d_ptr->mMinGain = _minGain;
}

float dm::TT__Exposure::minGain() const
{
    return d_ptr->mMinGain;
}

void dm::TT__Exposure::setMaxGain( float _maxGain )
{
    d_ptr->mMaxGain = _maxGain;
}

float dm::TT__Exposure::maxGain() const
{
    return d_ptr->mMaxGain;
}

void dm::TT__Exposure::setMinIris( float _minIris )
{
    d_ptr->mMinIris = _minIris;
}

float dm::TT__Exposure::minIris() const
{
    return d_ptr->mMinIris;
}

void dm::TT__Exposure::setMaxIris( float _maxIris )
{
    d_ptr->mMaxIris = _maxIris;
}

float dm::TT__Exposure::maxIris() const
{
    return d_ptr->mMaxIris;
}

void dm::TT__Exposure::setExposureTime( float _exposureTime )
{
    d_ptr->mExposureTime = _exposureTime;
}

float dm::TT__Exposure::exposureTime() const
{
    return d_ptr->mExposureTime;
}

void dm::TT__Exposure::setGain( float _gain )
{
    d_ptr->mGain = _gain;
}

float dm::TT__Exposure::gain() const
{
    return d_ptr->mGain;
}

void dm::TT__Exposure::setIris( float _iris )
{
    d_ptr->mIris = _iris;
}

float dm::TT__Exposure::iris() const
{
    return d_ptr->mIris;
}

KDSoapValue dm::TT__Exposure::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Exposure"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), d_ptr->mMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ExposureMode"));// elementargumentserializer.cpp:110
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    KDSoapValue _valuePriority(QString::fromLatin1("Priority"), d_ptr->mPriority.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ExposurePriority"));// elementargumentserializer.cpp:110
    _valuePriority.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valuePriority.setQualified(true);
    args.append(_valuePriority);// elementargumentserializer.cpp:122
    KDSoapValue _valueWindow(d_ptr->mWindow.serialize(QString::fromLatin1("Window")));// elementargumentserializer.cpp:102
    _valueWindow.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueWindow.setQualified(true);
    args.append(_valueWindow);// elementargumentserializer.cpp:122
    KDSoapValue _valueMinExposureTime(QString::fromLatin1("MinExposureTime"), QVariant::fromValue(d_ptr->mMinExposureTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueMinExposureTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMinExposureTime.setQualified(true);
    args.append(_valueMinExposureTime);// elementargumentserializer.cpp:122
    KDSoapValue _valueMaxExposureTime(QString::fromLatin1("MaxExposureTime"), QVariant::fromValue(d_ptr->mMaxExposureTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueMaxExposureTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMaxExposureTime.setQualified(true);
    args.append(_valueMaxExposureTime);// elementargumentserializer.cpp:122
    KDSoapValue _valueMinGain(QString::fromLatin1("MinGain"), QVariant::fromValue(d_ptr->mMinGain), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueMinGain.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMinGain.setQualified(true);
    args.append(_valueMinGain);// elementargumentserializer.cpp:122
    KDSoapValue _valueMaxGain(QString::fromLatin1("MaxGain"), QVariant::fromValue(d_ptr->mMaxGain), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueMaxGain.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMaxGain.setQualified(true);
    args.append(_valueMaxGain);// elementargumentserializer.cpp:122
    KDSoapValue _valueMinIris(QString::fromLatin1("MinIris"), QVariant::fromValue(d_ptr->mMinIris), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueMinIris.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMinIris.setQualified(true);
    args.append(_valueMinIris);// elementargumentserializer.cpp:122
    KDSoapValue _valueMaxIris(QString::fromLatin1("MaxIris"), QVariant::fromValue(d_ptr->mMaxIris), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueMaxIris.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMaxIris.setQualified(true);
    args.append(_valueMaxIris);// elementargumentserializer.cpp:122
    KDSoapValue _valueExposureTime(QString::fromLatin1("ExposureTime"), QVariant::fromValue(d_ptr->mExposureTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueExposureTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueExposureTime.setQualified(true);
    args.append(_valueExposureTime);// elementargumentserializer.cpp:122
    KDSoapValue _valueGain(QString::fromLatin1("Gain"), QVariant::fromValue(d_ptr->mGain), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueGain.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueGain.setQualified(true);
    args.append(_valueGain);// elementargumentserializer.cpp:122
    KDSoapValue _valueIris(QString::fromLatin1("Iris"), QVariant::fromValue(d_ptr->mIris), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueIris.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueIris.setQualified(true);
    args.append(_valueIris);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__Exposure::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Priority")) {// converter_complextype.cpp:354
            d_ptr->mPriority.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Window")) {// converter_complextype.cpp:354
            d_ptr->mWindow.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("MinExposureTime")) {// converter_complextype.cpp:354
            d_ptr->mMinExposureTime = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("MaxExposureTime")) {// converter_complextype.cpp:354
            d_ptr->mMaxExposureTime = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("MinGain")) {// converter_complextype.cpp:354
            d_ptr->mMinGain = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("MaxGain")) {// converter_complextype.cpp:354
            d_ptr->mMaxGain = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("MinIris")) {// converter_complextype.cpp:354
            d_ptr->mMinIris = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("MaxIris")) {// converter_complextype.cpp:354
            d_ptr->mMaxIris = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("ExposureTime")) {// converter_complextype.cpp:354
            d_ptr->mExposureTime = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Gain")) {// converter_complextype.cpp:354
            d_ptr->mGain = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Iris")) {// converter_complextype.cpp:354
            d_ptr->mIris = val.value().value<float>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__Exposure::TT__Exposure()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Exposure::~TT__Exposure()
{
}

dm::TT__Exposure::TT__Exposure( const dm::TT__Exposure& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Exposure&  dm::TT__Exposure::operator=( const dm::TT__Exposure& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetNetworkProtocols::PrivateDPtr : public QSharedData
{
public:
    QList< dm::TT__NetworkProtocol > mNetworkProtocols;
};

void dm::TDS__SetNetworkProtocols::setNetworkProtocols( const QList< dm::TT__NetworkProtocol >& _networkProtocols )
{
    d_ptr->mNetworkProtocols = _networkProtocols;
}

QList< dm::TT__NetworkProtocol > dm::TDS__SetNetworkProtocols::networkProtocols() const
{
    return d_ptr->mNetworkProtocols;
}

KDSoapValue dm::TDS__SetNetworkProtocols::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetNetworkProtocols"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mNetworkProtocols.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueNetworkProtocols(d_ptr->mNetworkProtocols.at(i).serialize(QString::fromLatin1("NetworkProtocols")));// elementargumentserializer.cpp:102
        _valueNetworkProtocols.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueNetworkProtocols.setQualified(true);
        args.append(_valueNetworkProtocols);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__SetNetworkProtocols::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("NetworkProtocols")) {// converter_complextype.cpp:354
            dm::TT__NetworkProtocol mNetworkProtocolsTemp;// converter_complextype.cpp:412
            mNetworkProtocolsTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mNetworkProtocols.append(mNetworkProtocolsTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__SetNetworkProtocols::TDS__SetNetworkProtocols()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetNetworkProtocols::~TDS__SetNetworkProtocols()
{
}

dm::TDS__SetNetworkProtocols::TDS__SetNetworkProtocols( const dm::TDS__SetNetworkProtocols& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetNetworkProtocols&  dm::TDS__SetNetworkProtocols::operator=( const dm::TDS__SetNetworkProtocols& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Capabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__AnalyticsCapabilities mAnalytics;
    bool mAnalytics_nil;
    dm::TT__DeviceCapabilities mDevice;
    bool mDevice_nil;
    dm::TT__EventCapabilities mEvents;
    bool mEvents_nil;
    dm::TT__ImagingCapabilities mImaging;
    bool mImaging_nil;
    dm::TT__MediaCapabilities mMedia;
    bool mMedia_nil;
    dm::TT__PTZCapabilities mPTZ;
    bool mPTZ_nil;
    dm::TT__CapabilitiesExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__Capabilities::PrivateDPtr::PrivateDPtr()
    : mAnalytics_nil(true), mDevice_nil(true), mEvents_nil(true), mImaging_nil(true), mMedia_nil(true), mPTZ_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__Capabilities::setAnalytics( const dm::TT__AnalyticsCapabilities& _analytics )
{
    d_ptr->mAnalytics_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnalytics = _analytics;
}

dm::TT__AnalyticsCapabilities dm::TT__Capabilities::analytics() const
{
    return d_ptr->mAnalytics;
}

void dm::TT__Capabilities::setDevice( const dm::TT__DeviceCapabilities& _device )
{
    d_ptr->mDevice_nil = false;// converter_complextype.cpp:277
    d_ptr->mDevice = _device;
}

dm::TT__DeviceCapabilities dm::TT__Capabilities::device() const
{
    return d_ptr->mDevice;
}

void dm::TT__Capabilities::setEvents( const dm::TT__EventCapabilities& _events )
{
    d_ptr->mEvents_nil = false;// converter_complextype.cpp:277
    d_ptr->mEvents = _events;
}

dm::TT__EventCapabilities dm::TT__Capabilities::events() const
{
    return d_ptr->mEvents;
}

void dm::TT__Capabilities::setImaging( const dm::TT__ImagingCapabilities& _imaging )
{
    d_ptr->mImaging_nil = false;// converter_complextype.cpp:277
    d_ptr->mImaging = _imaging;
}

dm::TT__ImagingCapabilities dm::TT__Capabilities::imaging() const
{
    return d_ptr->mImaging;
}

void dm::TT__Capabilities::setMedia( const dm::TT__MediaCapabilities& _media )
{
    d_ptr->mMedia_nil = false;// converter_complextype.cpp:277
    d_ptr->mMedia = _media;
}

dm::TT__MediaCapabilities dm::TT__Capabilities::media() const
{
    return d_ptr->mMedia;
}

void dm::TT__Capabilities::setPTZ( const dm::TT__PTZCapabilities& _pTZ )
{
    d_ptr->mPTZ_nil = false;// converter_complextype.cpp:277
    d_ptr->mPTZ = _pTZ;
}

dm::TT__PTZCapabilities dm::TT__Capabilities::pTZ() const
{
    return d_ptr->mPTZ;
}

void dm::TT__Capabilities::setExtension( const dm::TT__CapabilitiesExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__CapabilitiesExtension dm::TT__Capabilities::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__Capabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__Capabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__Capabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Capabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mAnalytics_nil) {
        KDSoapValue _valueAnalytics(d_ptr->mAnalytics.serialize(QString::fromLatin1("Analytics")));// elementargumentserializer.cpp:102
        _valueAnalytics.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAnalytics.setQualified(true);
        if (!_valueAnalytics.isNil())
        args.append(_valueAnalytics);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDevice_nil) {
        KDSoapValue _valueDevice(d_ptr->mDevice.serialize(QString::fromLatin1("Device")));// elementargumentserializer.cpp:102
        _valueDevice.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDevice.setQualified(true);
        if (!_valueDevice.isNil())
        args.append(_valueDevice);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mEvents_nil) {
        KDSoapValue _valueEvents(d_ptr->mEvents.serialize(QString::fromLatin1("Events")));// elementargumentserializer.cpp:102
        _valueEvents.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueEvents.setQualified(true);
        if (!_valueEvents.isNil())
        args.append(_valueEvents);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mImaging_nil) {
        KDSoapValue _valueImaging(d_ptr->mImaging.serialize(QString::fromLatin1("Imaging")));// elementargumentserializer.cpp:102
        _valueImaging.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueImaging.setQualified(true);
        if (!_valueImaging.isNil())
        args.append(_valueImaging);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mMedia_nil) {
        KDSoapValue _valueMedia(d_ptr->mMedia.serialize(QString::fromLatin1("Media")));// elementargumentserializer.cpp:102
        _valueMedia.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueMedia.setQualified(true);
        if (!_valueMedia.isNil())
        args.append(_valueMedia);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mPTZ_nil) {
        KDSoapValue _valuePTZ(d_ptr->mPTZ.serialize(QString::fromLatin1("PTZ")));// elementargumentserializer.cpp:102
        _valuePTZ.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePTZ.setQualified(true);
        if (!_valuePTZ.isNil())
        args.append(_valuePTZ);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Capabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Analytics")) {// converter_complextype.cpp:354
            d_ptr->mAnalytics.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Device")) {// converter_complextype.cpp:354
            d_ptr->mDevice.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Events")) {// converter_complextype.cpp:354
            d_ptr->mEvents.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Imaging")) {// converter_complextype.cpp:354
            d_ptr->mImaging.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Media")) {// converter_complextype.cpp:354
            d_ptr->mMedia.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("PTZ")) {// converter_complextype.cpp:354
            d_ptr->mPTZ.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__Capabilities::TT__Capabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Capabilities::~TT__Capabilities()
{
}

dm::TT__Capabilities::TT__Capabilities( const dm::TT__Capabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Capabilities&  dm::TT__Capabilities::operator=( const dm::TT__Capabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetDot1XConfigurationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetDot1XConfigurationResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetDot1XConfigurationResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetDot1XConfigurationResponse::TDS__SetDot1XConfigurationResponse()
{
}

dm::TDS__SetDot1XConfigurationResponse::~TDS__SetDot1XConfigurationResponse()
{
}


KDSoapValue dm::TDS__GetAccessPolicy::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetAccessPolicy"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetAccessPolicy::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetAccessPolicy::TDS__GetAccessPolicy()
{
}

dm::TDS__GetAccessPolicy::~TDS__GetAccessPolicy()
{
}


KDSoapValue dm::TDS__GetSystemSupportInformation::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetSystemSupportInformation"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetSystemSupportInformation::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetSystemSupportInformation::TDS__GetSystemSupportInformation()
{
}

dm::TDS__GetSystemSupportInformation::~TDS__GetSystemSupportInformation()
{
}


class dm::TDS__LoadCACertificates::PrivateDPtr : public QSharedData
{
public:
    QList< dm::TT__Certificate > mCACertificate;
};

void dm::TDS__LoadCACertificates::setCACertificate( const QList< dm::TT__Certificate >& _cACertificate )
{
    d_ptr->mCACertificate = _cACertificate;
}

QList< dm::TT__Certificate > dm::TDS__LoadCACertificates::cACertificate() const
{
    return d_ptr->mCACertificate;
}

KDSoapValue dm::TDS__LoadCACertificates::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("LoadCACertificates"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mCACertificate.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueCACertificate(d_ptr->mCACertificate.at(i).serialize(QString::fromLatin1("CACertificate")));// elementargumentserializer.cpp:102
        _valueCACertificate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueCACertificate.setQualified(true);
        args.append(_valueCACertificate);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__LoadCACertificates::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CACertificate")) {// converter_complextype.cpp:354
            dm::TT__Certificate mCACertificateTemp;// converter_complextype.cpp:412
            mCACertificateTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mCACertificate.append(mCACertificateTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__LoadCACertificates::TDS__LoadCACertificates()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__LoadCACertificates::~TDS__LoadCACertificates()
{
}

dm::TDS__LoadCACertificates::TDS__LoadCACertificates( const dm::TDS__LoadCACertificates& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__LoadCACertificates&  dm::TDS__LoadCACertificates::operator=( const dm::TDS__LoadCACertificates& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__AddScopes::PrivateDPtr : public QSharedData
{
public:
    QStringList mScopeItem;
};

void dm::TDS__AddScopes::setScopeItem( const QStringList& _scopeItem )
{
    d_ptr->mScopeItem = _scopeItem;
}

QStringList dm::TDS__AddScopes::scopeItem() const
{
    return d_ptr->mScopeItem;
}

KDSoapValue dm::TDS__AddScopes::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("AddScopes"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mScopeItem.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueScopeItem(QString::fromLatin1("ScopeItem"), QVariant::fromValue(d_ptr->mScopeItem.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
        _valueScopeItem.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueScopeItem.setQualified(true);
        args.append(_valueScopeItem);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__AddScopes::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ScopeItem")) {// converter_complextype.cpp:354
            QString mScopeItemTemp;// converter_complextype.cpp:412
            mScopeItemTemp = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mScopeItem.append(mScopeItemTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__AddScopes::TDS__AddScopes()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__AddScopes::~TDS__AddScopes()
{
}

dm::TDS__AddScopes::TDS__AddScopes( const dm::TDS__AddScopes& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__AddScopes&  dm::TDS__AddScopes::operator=( const dm::TDS__AddScopes& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__PTZNodeExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__PTZPresetTourSupported mSupportedPresetTour;
    bool mSupportedPresetTour_nil;
    dm::TT__PTZNodeExtension2 mExtension;
    bool mExtension_nil;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__PTZNodeExtension::PrivateDPtr::PrivateDPtr()
    : mSupportedPresetTour_nil(true), mExtension_nil(true), mAny_nil(true)
{
}


void dm::TT__PTZNodeExtension::setSupportedPresetTour( const dm::TT__PTZPresetTourSupported& _supportedPresetTour )
{
    d_ptr->mSupportedPresetTour_nil = false;// converter_complextype.cpp:277
    d_ptr->mSupportedPresetTour = _supportedPresetTour;
}

dm::TT__PTZPresetTourSupported dm::TT__PTZNodeExtension::supportedPresetTour() const
{
    return d_ptr->mSupportedPresetTour;
}

void dm::TT__PTZNodeExtension::setExtension( const dm::TT__PTZNodeExtension2& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__PTZNodeExtension2 dm::TT__PTZNodeExtension::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__PTZNodeExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__PTZNodeExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__PTZNodeExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("PTZNodeExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mSupportedPresetTour_nil) {
        KDSoapValue _valueSupportedPresetTour(d_ptr->mSupportedPresetTour.serialize(QString::fromLatin1("SupportedPresetTour")));// elementargumentserializer.cpp:102
        _valueSupportedPresetTour.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSupportedPresetTour.setQualified(true);
        if (!_valueSupportedPresetTour.isNil())
        args.append(_valueSupportedPresetTour);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__PTZNodeExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("SupportedPresetTour")) {// converter_complextype.cpp:354
            d_ptr->mSupportedPresetTour.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__PTZNodeExtension::TT__PTZNodeExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__PTZNodeExtension::~TT__PTZNodeExtension()
{
}

dm::TT__PTZNodeExtension::TT__PTZNodeExtension( const dm::TT__PTZNodeExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__PTZNodeExtension&  dm::TT__PTZNodeExtension::operator=( const dm::TT__PTZNodeExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetCertificatesStatusResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetCertificatesStatusResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetCertificatesStatusResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetCertificatesStatusResponse::TDS__SetCertificatesStatusResponse()
{
}

dm::TDS__SetCertificatesStatusResponse::~TDS__SetCertificatesStatusResponse()
{
}


class dm::TT__CapabilitiesExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__DeviceIOCapabilities mDeviceIO;
    bool mDeviceIO_nil;
    dm::TT__DisplayCapabilities mDisplay;
    bool mDisplay_nil;
    dm::TT__RecordingCapabilities mRecording;
    bool mRecording_nil;
    dm::TT__SearchCapabilities mSearch;
    bool mSearch_nil;
    dm::TT__ReplayCapabilities mReplay;
    bool mReplay_nil;
    dm::TT__ReceiverCapabilities mReceiver;
    bool mReceiver_nil;
    dm::TT__AnalyticsDeviceCapabilities mAnalyticsDevice;
    bool mAnalyticsDevice_nil;
    dm::TT__CapabilitiesExtension2 mExtensions;
    bool mExtensions_nil;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__CapabilitiesExtension::PrivateDPtr::PrivateDPtr()
    : mDeviceIO_nil(true), mDisplay_nil(true), mRecording_nil(true), mSearch_nil(true), mReplay_nil(true), mReceiver_nil(true), mAnalyticsDevice_nil(true), mExtensions_nil(true), mAny_nil(true)
{
}


void dm::TT__CapabilitiesExtension::setDeviceIO( const dm::TT__DeviceIOCapabilities& _deviceIO )
{
    d_ptr->mDeviceIO_nil = false;// converter_complextype.cpp:277
    d_ptr->mDeviceIO = _deviceIO;
}

dm::TT__DeviceIOCapabilities dm::TT__CapabilitiesExtension::deviceIO() const
{
    return d_ptr->mDeviceIO;
}

void dm::TT__CapabilitiesExtension::setDisplay( const dm::TT__DisplayCapabilities& _display )
{
    d_ptr->mDisplay_nil = false;// converter_complextype.cpp:277
    d_ptr->mDisplay = _display;
}

dm::TT__DisplayCapabilities dm::TT__CapabilitiesExtension::display() const
{
    return d_ptr->mDisplay;
}

void dm::TT__CapabilitiesExtension::setRecording( const dm::TT__RecordingCapabilities& _recording )
{
    d_ptr->mRecording_nil = false;// converter_complextype.cpp:277
    d_ptr->mRecording = _recording;
}

dm::TT__RecordingCapabilities dm::TT__CapabilitiesExtension::recording() const
{
    return d_ptr->mRecording;
}

void dm::TT__CapabilitiesExtension::setSearch( const dm::TT__SearchCapabilities& _search )
{
    d_ptr->mSearch_nil = false;// converter_complextype.cpp:277
    d_ptr->mSearch = _search;
}

dm::TT__SearchCapabilities dm::TT__CapabilitiesExtension::search() const
{
    return d_ptr->mSearch;
}

void dm::TT__CapabilitiesExtension::setReplay( const dm::TT__ReplayCapabilities& _replay )
{
    d_ptr->mReplay_nil = false;// converter_complextype.cpp:277
    d_ptr->mReplay = _replay;
}

dm::TT__ReplayCapabilities dm::TT__CapabilitiesExtension::replay() const
{
    return d_ptr->mReplay;
}

void dm::TT__CapabilitiesExtension::setReceiver( const dm::TT__ReceiverCapabilities& _receiver )
{
    d_ptr->mReceiver_nil = false;// converter_complextype.cpp:277
    d_ptr->mReceiver = _receiver;
}

dm::TT__ReceiverCapabilities dm::TT__CapabilitiesExtension::receiver() const
{
    return d_ptr->mReceiver;
}

void dm::TT__CapabilitiesExtension::setAnalyticsDevice( const dm::TT__AnalyticsDeviceCapabilities& _analyticsDevice )
{
    d_ptr->mAnalyticsDevice_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnalyticsDevice = _analyticsDevice;
}

dm::TT__AnalyticsDeviceCapabilities dm::TT__CapabilitiesExtension::analyticsDevice() const
{
    return d_ptr->mAnalyticsDevice;
}

void dm::TT__CapabilitiesExtension::setExtensions( const dm::TT__CapabilitiesExtension2& _extensions )
{
    d_ptr->mExtensions_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtensions = _extensions;
}

dm::TT__CapabilitiesExtension2 dm::TT__CapabilitiesExtension::extensions() const
{
    return d_ptr->mExtensions;
}

void dm::TT__CapabilitiesExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__CapabilitiesExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__CapabilitiesExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("CapabilitiesExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mDeviceIO_nil) {
        KDSoapValue _valueDeviceIO(d_ptr->mDeviceIO.serialize(QString::fromLatin1("DeviceIO")));// elementargumentserializer.cpp:102
        _valueDeviceIO.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDeviceIO.setQualified(true);
        if (!_valueDeviceIO.isNil())
        args.append(_valueDeviceIO);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDisplay_nil) {
        KDSoapValue _valueDisplay(d_ptr->mDisplay.serialize(QString::fromLatin1("Display")));// elementargumentserializer.cpp:102
        _valueDisplay.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDisplay.setQualified(true);
        if (!_valueDisplay.isNil())
        args.append(_valueDisplay);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mRecording_nil) {
        KDSoapValue _valueRecording(d_ptr->mRecording.serialize(QString::fromLatin1("Recording")));// elementargumentserializer.cpp:102
        _valueRecording.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueRecording.setQualified(true);
        if (!_valueRecording.isNil())
        args.append(_valueRecording);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSearch_nil) {
        KDSoapValue _valueSearch(d_ptr->mSearch.serialize(QString::fromLatin1("Search")));// elementargumentserializer.cpp:102
        _valueSearch.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSearch.setQualified(true);
        if (!_valueSearch.isNil())
        args.append(_valueSearch);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mReplay_nil) {
        KDSoapValue _valueReplay(d_ptr->mReplay.serialize(QString::fromLatin1("Replay")));// elementargumentserializer.cpp:102
        _valueReplay.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueReplay.setQualified(true);
        if (!_valueReplay.isNil())
        args.append(_valueReplay);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mReceiver_nil) {
        KDSoapValue _valueReceiver(d_ptr->mReceiver.serialize(QString::fromLatin1("Receiver")));// elementargumentserializer.cpp:102
        _valueReceiver.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueReceiver.setQualified(true);
        if (!_valueReceiver.isNil())
        args.append(_valueReceiver);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mAnalyticsDevice_nil) {
        KDSoapValue _valueAnalyticsDevice(d_ptr->mAnalyticsDevice.serialize(QString::fromLatin1("AnalyticsDevice")));// elementargumentserializer.cpp:102
        _valueAnalyticsDevice.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAnalyticsDevice.setQualified(true);
        if (!_valueAnalyticsDevice.isNil())
        args.append(_valueAnalyticsDevice);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtensions_nil) {
        KDSoapValue _valueExtensions(d_ptr->mExtensions.serialize(QString::fromLatin1("Extensions")));// elementargumentserializer.cpp:102
        _valueExtensions.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtensions.setQualified(true);
        if (!_valueExtensions.isNil())
        args.append(_valueExtensions);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__CapabilitiesExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DeviceIO")) {// converter_complextype.cpp:354
            d_ptr->mDeviceIO.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Display")) {// converter_complextype.cpp:354
            d_ptr->mDisplay.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Recording")) {// converter_complextype.cpp:354
            d_ptr->mRecording.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Search")) {// converter_complextype.cpp:354
            d_ptr->mSearch.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Replay")) {// converter_complextype.cpp:354
            d_ptr->mReplay.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Receiver")) {// converter_complextype.cpp:354
            d_ptr->mReceiver.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("AnalyticsDevice")) {// converter_complextype.cpp:354
            d_ptr->mAnalyticsDevice.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extensions")) {// converter_complextype.cpp:354
            d_ptr->mExtensions.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__CapabilitiesExtension::TT__CapabilitiesExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__CapabilitiesExtension::~TT__CapabilitiesExtension()
{
}

dm::TT__CapabilitiesExtension::TT__CapabilitiesExtension( const dm::TT__CapabilitiesExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__CapabilitiesExtension&  dm::TT__CapabilitiesExtension::operator=( const dm::TT__CapabilitiesExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NTPInformationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__NTPInformationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__NTPInformationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__NTPInformationExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__NTPInformationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NTPInformationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__NTPInformationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__NTPInformationExtension::TT__NTPInformationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NTPInformationExtension::~TT__NTPInformationExtension()
{
}

dm::TT__NTPInformationExtension::TT__NTPInformationExtension( const dm::TT__NTPInformationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NTPInformationExtension&  dm::TT__NTPInformationExtension::operator=( const dm::TT__NTPInformationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetDot1XConfigurations::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDot1XConfigurations"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetDot1XConfigurations::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetDot1XConfigurations::TDS__GetDot1XConfigurations()
{
}

dm::TDS__GetDot1XConfigurations::~TDS__GetDot1XConfigurations()
{
}


class dm::TT__ImagingSettingsExtension20::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__ImageStabilization mImageStabilization;
    bool mImageStabilization_nil;
    dm::TT__ImagingSettingsExtension202 mExtension;
    bool mExtension_nil;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__ImagingSettingsExtension20::PrivateDPtr::PrivateDPtr()
    : mImageStabilization_nil(true), mExtension_nil(true), mAny_nil(true)
{
}


void dm::TT__ImagingSettingsExtension20::setImageStabilization( const dm::TT__ImageStabilization& _imageStabilization )
{
    d_ptr->mImageStabilization_nil = false;// converter_complextype.cpp:277
    d_ptr->mImageStabilization = _imageStabilization;
}

dm::TT__ImageStabilization dm::TT__ImagingSettingsExtension20::imageStabilization() const
{
    return d_ptr->mImageStabilization;
}

void dm::TT__ImagingSettingsExtension20::setExtension( const dm::TT__ImagingSettingsExtension202& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__ImagingSettingsExtension202 dm::TT__ImagingSettingsExtension20::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__ImagingSettingsExtension20::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__ImagingSettingsExtension20::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__ImagingSettingsExtension20::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ImagingSettingsExtension20"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mImageStabilization_nil) {
        KDSoapValue _valueImageStabilization(d_ptr->mImageStabilization.serialize(QString::fromLatin1("ImageStabilization")));// elementargumentserializer.cpp:102
        _valueImageStabilization.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueImageStabilization.setQualified(true);
        if (!_valueImageStabilization.isNil())
        args.append(_valueImageStabilization);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__ImagingSettingsExtension20::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ImageStabilization")) {// converter_complextype.cpp:354
            d_ptr->mImageStabilization.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__ImagingSettingsExtension20::TT__ImagingSettingsExtension20()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ImagingSettingsExtension20::~TT__ImagingSettingsExtension20()
{
}

dm::TT__ImagingSettingsExtension20::TT__ImagingSettingsExtension20( const dm::TT__ImagingSettingsExtension20& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ImagingSettingsExtension20&  dm::TT__ImagingSettingsExtension20::operator=( const dm::TT__ImagingSettingsExtension20& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__StartFirmwareUpgradeResponse::PrivateDPtr : public QSharedData
{
public:
    QString mUploadUri;
    QString mUploadDelay;
    QString mExpectedDownTime;
};

void dm::TDS__StartFirmwareUpgradeResponse::setUploadUri( const QString& _uploadUri )
{
    d_ptr->mUploadUri = _uploadUri;
}

QString dm::TDS__StartFirmwareUpgradeResponse::uploadUri() const
{
    return d_ptr->mUploadUri;
}

void dm::TDS__StartFirmwareUpgradeResponse::setUploadDelay( const QString& _uploadDelay )
{
    d_ptr->mUploadDelay = _uploadDelay;
}

QString dm::TDS__StartFirmwareUpgradeResponse::uploadDelay() const
{
    return d_ptr->mUploadDelay;
}

void dm::TDS__StartFirmwareUpgradeResponse::setExpectedDownTime( const QString& _expectedDownTime )
{
    d_ptr->mExpectedDownTime = _expectedDownTime;
}

QString dm::TDS__StartFirmwareUpgradeResponse::expectedDownTime() const
{
    return d_ptr->mExpectedDownTime;
}

KDSoapValue dm::TDS__StartFirmwareUpgradeResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("StartFirmwareUpgradeResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueUploadUri(QString::fromLatin1("UploadUri"), QVariant::fromValue(d_ptr->mUploadUri), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueUploadUri.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueUploadUri.setQualified(true);
    args.append(_valueUploadUri);// elementargumentserializer.cpp:122
    KDSoapValue _valueUploadDelay(QString::fromLatin1("UploadDelay"), QVariant::fromValue(d_ptr->mUploadDelay), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// elementargumentserializer.cpp:108
    _valueUploadDelay.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueUploadDelay.setQualified(true);
    args.append(_valueUploadDelay);// elementargumentserializer.cpp:122
    KDSoapValue _valueExpectedDownTime(QString::fromLatin1("ExpectedDownTime"), QVariant::fromValue(d_ptr->mExpectedDownTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// elementargumentserializer.cpp:108
    _valueExpectedDownTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueExpectedDownTime.setQualified(true);
    args.append(_valueExpectedDownTime);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__StartFirmwareUpgradeResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("UploadUri")) {// converter_complextype.cpp:354
            d_ptr->mUploadUri = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("UploadDelay")) {// converter_complextype.cpp:354
            d_ptr->mUploadDelay = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("ExpectedDownTime")) {// converter_complextype.cpp:354
            d_ptr->mExpectedDownTime = val.value().value<QString>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__StartFirmwareUpgradeResponse::TDS__StartFirmwareUpgradeResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__StartFirmwareUpgradeResponse::~TDS__StartFirmwareUpgradeResponse()
{
}

dm::TDS__StartFirmwareUpgradeResponse::TDS__StartFirmwareUpgradeResponse( const dm::TDS__StartFirmwareUpgradeResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__StartFirmwareUpgradeResponse&  dm::TDS__StartFirmwareUpgradeResponse::operator=( const dm::TDS__StartFirmwareUpgradeResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetIPAddressFilter::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetIPAddressFilter"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetIPAddressFilter::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetIPAddressFilter::TDS__GetIPAddressFilter()
{
}

dm::TDS__GetIPAddressFilter::~TDS__GetIPAddressFilter()
{
}


class dm::TT__Dot1XConfigurationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__Dot1XConfigurationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__Dot1XConfigurationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__Dot1XConfigurationExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__Dot1XConfigurationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot1XConfigurationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__Dot1XConfigurationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__Dot1XConfigurationExtension::TT__Dot1XConfigurationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Dot1XConfigurationExtension::~TT__Dot1XConfigurationExtension()
{
}

dm::TT__Dot1XConfigurationExtension::TT__Dot1XConfigurationExtension( const dm::TT__Dot1XConfigurationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Dot1XConfigurationExtension&  dm::TT__Dot1XConfigurationExtension::operator=( const dm::TT__Dot1XConfigurationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetIPAddressFilterResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetIPAddressFilterResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetIPAddressFilterResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetIPAddressFilterResponse::TDS__SetIPAddressFilterResponse()
{
}

dm::TDS__SetIPAddressFilterResponse::~TDS__SetIPAddressFilterResponse()
{
}


KDSoapValue dm::TDS__GetSystemUris::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetSystemUris"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetSystemUris::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetSystemUris::TDS__GetSystemUris()
{
}

dm::TDS__GetSystemUris::~TDS__GetSystemUris()
{
}


class dm::TT__OSDTextConfigurationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__OSDTextConfigurationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__OSDTextConfigurationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__OSDTextConfigurationExtension::any() const
{
    return d_ptr->mAny;
}

void dm::TT__OSDTextConfigurationExtension::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__OSDTextConfigurationExtension::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__OSDTextConfigurationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("OSDTextConfigurationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__OSDTextConfigurationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__OSDTextConfigurationExtension::TT__OSDTextConfigurationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__OSDTextConfigurationExtension::~TT__OSDTextConfigurationExtension()
{
}

dm::TT__OSDTextConfigurationExtension::TT__OSDTextConfigurationExtension( const dm::TT__OSDTextConfigurationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__OSDTextConfigurationExtension&  dm::TT__OSDTextConfigurationExtension::operator=( const dm::TT__OSDTextConfigurationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetDiscoveryMode::PrivateDPtr : public QSharedData
{
public:
    dm::TT__DiscoveryMode mDiscoveryMode;
};

void dm::TDS__SetDiscoveryMode::setDiscoveryMode( const dm::TT__DiscoveryMode& _discoveryMode )
{
    d_ptr->mDiscoveryMode = _discoveryMode;
}

dm::TT__DiscoveryMode dm::TDS__SetDiscoveryMode::discoveryMode() const
{
    return d_ptr->mDiscoveryMode;
}

KDSoapValue dm::TDS__SetDiscoveryMode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetDiscoveryMode"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDiscoveryMode(QString::fromLatin1("DiscoveryMode"), d_ptr->mDiscoveryMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DiscoveryMode"));// elementargumentserializer.cpp:110
    _valueDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDiscoveryMode.setQualified(true);
    args.append(_valueDiscoveryMode);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetDiscoveryMode::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DiscoveryMode")) {// converter_complextype.cpp:354
            d_ptr->mDiscoveryMode.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__SetDiscoveryMode::TDS__SetDiscoveryMode()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetDiscoveryMode::~TDS__SetDiscoveryMode()
{
}

dm::TDS__SetDiscoveryMode::TDS__SetDiscoveryMode( const dm::TDS__SetDiscoveryMode& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetDiscoveryMode&  dm::TDS__SetDiscoveryMode::operator=( const dm::TDS__SetDiscoveryMode& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__BacklightCompensation20::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__BacklightCompensationMode mMode;
    float mLevel;
    bool mLevel_nil;
};

dm::TT__BacklightCompensation20::PrivateDPtr::PrivateDPtr()
    : mLevel(0), mLevel_nil(true)
{
}


void dm::TT__BacklightCompensation20::setMode( const dm::TT__BacklightCompensationMode& _mode )
{
    d_ptr->mMode = _mode;
}

dm::TT__BacklightCompensationMode dm::TT__BacklightCompensation20::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__BacklightCompensation20::setLevel( float _level )
{
    d_ptr->mLevel_nil = false;// converter_complextype.cpp:277
    d_ptr->mLevel = _level;
}

float dm::TT__BacklightCompensation20::level() const
{
    return d_ptr->mLevel;
}

KDSoapValue dm::TT__BacklightCompensation20::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("BacklightCompensation20"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), d_ptr->mMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("BacklightCompensationMode"));// elementargumentserializer.cpp:110
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    if (!d_ptr->mLevel_nil) {
        KDSoapValue _valueLevel(QString::fromLatin1("Level"), QVariant::fromValue(d_ptr->mLevel), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueLevel.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueLevel.setQualified(true);
        if (!_valueLevel.isNil())
        args.append(_valueLevel);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__BacklightCompensation20::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Level")) {// converter_complextype.cpp:354
            d_ptr->mLevel = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mLevel_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TT__BacklightCompensation20::TT__BacklightCompensation20()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__BacklightCompensation20::~TT__BacklightCompensation20()
{
}

dm::TT__BacklightCompensation20::TT__BacklightCompensation20( const dm::TT__BacklightCompensation20& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__BacklightCompensation20&  dm::TT__BacklightCompensation20::operator=( const dm::TT__BacklightCompensation20& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Dot11SecurityConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__Dot11SecurityMode mMode;
    dm::TT__Dot11Cipher mAlgorithm;
    bool mAlgorithm_nil;
    dm::TT__Dot11PSKSet mPSK;
    bool mPSK_nil;
    dm::TT__ReferenceToken mDot1X;
    bool mDot1X_nil;
    dm::TT__Dot11SecurityConfigurationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__Dot11SecurityConfiguration::PrivateDPtr::PrivateDPtr()
    : mAlgorithm_nil(true), mPSK_nil(true), mDot1X_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__Dot11SecurityConfiguration::setMode( const dm::TT__Dot11SecurityMode& _mode )
{
    d_ptr->mMode = _mode;
}

dm::TT__Dot11SecurityMode dm::TT__Dot11SecurityConfiguration::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__Dot11SecurityConfiguration::setAlgorithm( const dm::TT__Dot11Cipher& _algorithm )
{
    d_ptr->mAlgorithm_nil = false;// converter_complextype.cpp:277
    d_ptr->mAlgorithm = _algorithm;
}

dm::TT__Dot11Cipher dm::TT__Dot11SecurityConfiguration::algorithm() const
{
    return d_ptr->mAlgorithm;
}

void dm::TT__Dot11SecurityConfiguration::setPSK( const dm::TT__Dot11PSKSet& _pSK )
{
    d_ptr->mPSK_nil = false;// converter_complextype.cpp:277
    d_ptr->mPSK = _pSK;
}

dm::TT__Dot11PSKSet dm::TT__Dot11SecurityConfiguration::pSK() const
{
    return d_ptr->mPSK;
}

void dm::TT__Dot11SecurityConfiguration::setDot1X( const dm::TT__ReferenceToken& _dot1X )
{
    d_ptr->mDot1X_nil = false;// converter_complextype.cpp:277
    d_ptr->mDot1X = _dot1X;
}

dm::TT__ReferenceToken dm::TT__Dot11SecurityConfiguration::dot1X() const
{
    return d_ptr->mDot1X;
}

void dm::TT__Dot11SecurityConfiguration::setExtension( const dm::TT__Dot11SecurityConfigurationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__Dot11SecurityConfigurationExtension dm::TT__Dot11SecurityConfiguration::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__Dot11SecurityConfiguration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__Dot11SecurityConfiguration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__Dot11SecurityConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11SecurityConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), d_ptr->mMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11SecurityMode"));// elementargumentserializer.cpp:110
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    if (!d_ptr->mAlgorithm_nil) {
        KDSoapValue _valueAlgorithm(QString::fromLatin1("Algorithm"), d_ptr->mAlgorithm.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11Cipher"));// elementargumentserializer.cpp:110
        _valueAlgorithm.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAlgorithm.setQualified(true);
        if (!_valueAlgorithm.isNil())
        args.append(_valueAlgorithm);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mPSK_nil) {
        KDSoapValue _valuePSK(d_ptr->mPSK.serialize(QString::fromLatin1("PSK")));// elementargumentserializer.cpp:102
        _valuePSK.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePSK.setQualified(true);
        if (!_valuePSK.isNil())
        args.append(_valuePSK);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDot1X_nil) {
        KDSoapValue _valueDot1X(QString::fromLatin1("Dot1X"), d_ptr->mDot1X.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
        _valueDot1X.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDot1X.setQualified(true);
        if (!_valueDot1X.isNil())
        args.append(_valueDot1X);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Dot11SecurityConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Algorithm")) {// converter_complextype.cpp:354
            d_ptr->mAlgorithm.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mAlgorithm_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("PSK")) {// converter_complextype.cpp:354
            d_ptr->mPSK.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Dot1X")) {// converter_complextype.cpp:354
            d_ptr->mDot1X.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mDot1X_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__Dot11SecurityConfiguration::TT__Dot11SecurityConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Dot11SecurityConfiguration::~TT__Dot11SecurityConfiguration()
{
}

dm::TT__Dot11SecurityConfiguration::TT__Dot11SecurityConfiguration( const dm::TT__Dot11SecurityConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Dot11SecurityConfiguration&  dm::TT__Dot11SecurityConfiguration::operator=( const dm::TT__Dot11SecurityConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetRemoteDiscoveryModeResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetRemoteDiscoveryModeResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetRemoteDiscoveryModeResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetRemoteDiscoveryModeResponse::TDS__SetRemoteDiscoveryModeResponse()
{
}

dm::TDS__SetRemoteDiscoveryModeResponse::~TDS__SetRemoteDiscoveryModeResponse()
{
}


KDSoapValue dm::TDS__SetScopesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetScopesResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetScopesResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetScopesResponse::TDS__SetScopesResponse()
{
}

dm::TDS__SetScopesResponse::~TDS__SetScopesResponse()
{
}


class dm::TT__AnalyticsCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    bool mRuleSupport;
    bool mAnalyticsModuleSupport;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__AnalyticsCapabilities::PrivateDPtr::PrivateDPtr()
    : mRuleSupport(false), mAnalyticsModuleSupport(false), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__AnalyticsCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__AnalyticsCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__AnalyticsCapabilities::setRuleSupport( bool _ruleSupport )
{
    d_ptr->mRuleSupport = _ruleSupport;
}

bool dm::TT__AnalyticsCapabilities::ruleSupport() const
{
    return d_ptr->mRuleSupport;
}

void dm::TT__AnalyticsCapabilities::setAnalyticsModuleSupport( bool _analyticsModuleSupport )
{
    d_ptr->mAnalyticsModuleSupport = _analyticsModuleSupport;
}

bool dm::TT__AnalyticsCapabilities::analyticsModuleSupport() const
{
    return d_ptr->mAnalyticsModuleSupport;
}

void dm::TT__AnalyticsCapabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__AnalyticsCapabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__AnalyticsCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__AnalyticsCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__AnalyticsCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("AnalyticsCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    KDSoapValue _valueRuleSupport(QString::fromLatin1("RuleSupport"), QVariant::fromValue(d_ptr->mRuleSupport), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueRuleSupport.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueRuleSupport.setQualified(true);
    args.append(_valueRuleSupport);// elementargumentserializer.cpp:122
    KDSoapValue _valueAnalyticsModuleSupport(QString::fromLatin1("AnalyticsModuleSupport"), QVariant::fromValue(d_ptr->mAnalyticsModuleSupport), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueAnalyticsModuleSupport.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueAnalyticsModuleSupport.setQualified(true);
    args.append(_valueAnalyticsModuleSupport);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__AnalyticsCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("RuleSupport")) {// converter_complextype.cpp:354
            d_ptr->mRuleSupport = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("AnalyticsModuleSupport")) {// converter_complextype.cpp:354
            d_ptr->mAnalyticsModuleSupport = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__AnalyticsCapabilities::TT__AnalyticsCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__AnalyticsCapabilities::~TT__AnalyticsCapabilities()
{
}

dm::TT__AnalyticsCapabilities::TT__AnalyticsCapabilities( const dm::TT__AnalyticsCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__AnalyticsCapabilities&  dm::TT__AnalyticsCapabilities::operator=( const dm::TT__AnalyticsCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Dot11AvailableNetworks::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__Dot11SSIDType mSSID;
    QString mBSSID;
    bool mBSSID_nil;
    QList< dm::TT__Dot11AuthAndMangementSuite > mAuthAndMangementSuite;
    bool mAuthAndMangementSuite_nil;
    QList< dm::TT__Dot11Cipher > mPairCipher;
    bool mPairCipher_nil;
    QList< dm::TT__Dot11Cipher > mGroupCipher;
    bool mGroupCipher_nil;
    dm::TT__Dot11SignalStrength mSignalStrength;
    bool mSignalStrength_nil;
    dm::TT__Dot11AvailableNetworksExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__Dot11AvailableNetworks::PrivateDPtr::PrivateDPtr()
    : mBSSID_nil(true), mAuthAndMangementSuite_nil(true), mPairCipher_nil(true), mGroupCipher_nil(true), mSignalStrength_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__Dot11AvailableNetworks::setSSID( const dm::TT__Dot11SSIDType& _sSID )
{
    d_ptr->mSSID = _sSID;
}

dm::TT__Dot11SSIDType dm::TT__Dot11AvailableNetworks::sSID() const
{
    return d_ptr->mSSID;
}

void dm::TT__Dot11AvailableNetworks::setBSSID( const QString& _bSSID )
{
    d_ptr->mBSSID_nil = false;// converter_complextype.cpp:277
    d_ptr->mBSSID = _bSSID;
}

QString dm::TT__Dot11AvailableNetworks::bSSID() const
{
    return d_ptr->mBSSID;
}

void dm::TT__Dot11AvailableNetworks::setAuthAndMangementSuite( const QList< dm::TT__Dot11AuthAndMangementSuite >& _authAndMangementSuite )
{
    d_ptr->mAuthAndMangementSuite_nil = false;// converter_complextype.cpp:277
    d_ptr->mAuthAndMangementSuite = _authAndMangementSuite;
}

QList< dm::TT__Dot11AuthAndMangementSuite > dm::TT__Dot11AvailableNetworks::authAndMangementSuite() const
{
    return d_ptr->mAuthAndMangementSuite;
}

void dm::TT__Dot11AvailableNetworks::setPairCipher( const QList< dm::TT__Dot11Cipher >& _pairCipher )
{
    d_ptr->mPairCipher_nil = false;// converter_complextype.cpp:277
    d_ptr->mPairCipher = _pairCipher;
}

QList< dm::TT__Dot11Cipher > dm::TT__Dot11AvailableNetworks::pairCipher() const
{
    return d_ptr->mPairCipher;
}

void dm::TT__Dot11AvailableNetworks::setGroupCipher( const QList< dm::TT__Dot11Cipher >& _groupCipher )
{
    d_ptr->mGroupCipher_nil = false;// converter_complextype.cpp:277
    d_ptr->mGroupCipher = _groupCipher;
}

QList< dm::TT__Dot11Cipher > dm::TT__Dot11AvailableNetworks::groupCipher() const
{
    return d_ptr->mGroupCipher;
}

void dm::TT__Dot11AvailableNetworks::setSignalStrength( const dm::TT__Dot11SignalStrength& _signalStrength )
{
    d_ptr->mSignalStrength_nil = false;// converter_complextype.cpp:277
    d_ptr->mSignalStrength = _signalStrength;
}

dm::TT__Dot11SignalStrength dm::TT__Dot11AvailableNetworks::signalStrength() const
{
    return d_ptr->mSignalStrength;
}

void dm::TT__Dot11AvailableNetworks::setExtension( const dm::TT__Dot11AvailableNetworksExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__Dot11AvailableNetworksExtension dm::TT__Dot11AvailableNetworks::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__Dot11AvailableNetworks::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__Dot11AvailableNetworks::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__Dot11AvailableNetworks::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11AvailableNetworks"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueSSID(QString::fromLatin1("SSID"), d_ptr->mSSID.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11SSIDType"));// elementargumentserializer.cpp:110
    _valueSSID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueSSID.setQualified(true);
    args.append(_valueSSID);// elementargumentserializer.cpp:122
    if (!d_ptr->mBSSID_nil) {
        KDSoapValue _valueBSSID(QString::fromLatin1("BSSID"), QVariant::fromValue(d_ptr->mBSSID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueBSSID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueBSSID.setQualified(true);
        if (!_valueBSSID.isNil())
        args.append(_valueBSSID);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAuthAndMangementSuite.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueAuthAndMangementSuite(QString::fromLatin1("AuthAndMangementSuite"), d_ptr->mAuthAndMangementSuite.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11AuthAndMangementSuite"));// elementargumentserializer.cpp:110
        _valueAuthAndMangementSuite.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAuthAndMangementSuite.setQualified(true);
        args.append(_valueAuthAndMangementSuite);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mPairCipher.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valuePairCipher(QString::fromLatin1("PairCipher"), d_ptr->mPairCipher.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11Cipher"));// elementargumentserializer.cpp:110
        _valuePairCipher.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePairCipher.setQualified(true);
        args.append(_valuePairCipher);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mGroupCipher.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueGroupCipher(QString::fromLatin1("GroupCipher"), d_ptr->mGroupCipher.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11Cipher"));// elementargumentserializer.cpp:110
        _valueGroupCipher.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueGroupCipher.setQualified(true);
        args.append(_valueGroupCipher);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSignalStrength_nil) {
        KDSoapValue _valueSignalStrength(QString::fromLatin1("SignalStrength"), d_ptr->mSignalStrength.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11SignalStrength"));// elementargumentserializer.cpp:110
        _valueSignalStrength.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSignalStrength.setQualified(true);
        if (!_valueSignalStrength.isNil())
        args.append(_valueSignalStrength);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Dot11AvailableNetworks::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("SSID")) {// converter_complextype.cpp:354
            d_ptr->mSSID.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("BSSID")) {// converter_complextype.cpp:354
            d_ptr->mBSSID = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mBSSID_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("AuthAndMangementSuite")) {// converter_complextype.cpp:354
            dm::TT__Dot11AuthAndMangementSuite mAuthAndMangementSuiteTemp;// converter_complextype.cpp:412
            mAuthAndMangementSuiteTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mAuthAndMangementSuite.append(mAuthAndMangementSuiteTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("PairCipher")) {// converter_complextype.cpp:354
            dm::TT__Dot11Cipher mPairCipherTemp;// converter_complextype.cpp:412
            mPairCipherTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mPairCipher.append(mPairCipherTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("GroupCipher")) {// converter_complextype.cpp:354
            dm::TT__Dot11Cipher mGroupCipherTemp;// converter_complextype.cpp:412
            mGroupCipherTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mGroupCipher.append(mGroupCipherTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("SignalStrength")) {// converter_complextype.cpp:354
            d_ptr->mSignalStrength.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mSignalStrength_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__Dot11AvailableNetworks::TT__Dot11AvailableNetworks()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Dot11AvailableNetworks::~TT__Dot11AvailableNetworks()
{
}

dm::TT__Dot11AvailableNetworks::TT__Dot11AvailableNetworks( const dm::TT__Dot11AvailableNetworks& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Dot11AvailableNetworks&  dm::TT__Dot11AvailableNetworks::operator=( const dm::TT__Dot11AvailableNetworks& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetRelayOutputSettingsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetRelayOutputSettingsResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetRelayOutputSettingsResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetRelayOutputSettingsResponse::TDS__SetRelayOutputSettingsResponse()
{
}

dm::TDS__SetRelayOutputSettingsResponse::~TDS__SetRelayOutputSettingsResponse()
{
}


class dm::TT__DefoggingExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__DefoggingExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__DefoggingExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__DefoggingExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__DefoggingExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DefoggingExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__DefoggingExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__DefoggingExtension::TT__DefoggingExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DefoggingExtension::~TT__DefoggingExtension()
{
}

dm::TT__DefoggingExtension::TT__DefoggingExtension( const dm::TT__DefoggingExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__DefoggingExtension&  dm::TT__DefoggingExtension::operator=( const dm::TT__DefoggingExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__IPv6NetworkInterface::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mEnabled;
    dm::TT__IPv6Configuration mConfig;
    bool mConfig_nil;
};

dm::TT__IPv6NetworkInterface::PrivateDPtr::PrivateDPtr()
    : mEnabled(false), mConfig_nil(true)
{
}


void dm::TT__IPv6NetworkInterface::setEnabled( bool _enabled )
{
    d_ptr->mEnabled = _enabled;
}

bool dm::TT__IPv6NetworkInterface::enabled() const
{
    return d_ptr->mEnabled;
}

void dm::TT__IPv6NetworkInterface::setConfig( const dm::TT__IPv6Configuration& _config )
{
    d_ptr->mConfig_nil = false;// converter_complextype.cpp:277
    d_ptr->mConfig = _config;
}

dm::TT__IPv6Configuration dm::TT__IPv6NetworkInterface::config() const
{
    return d_ptr->mConfig;
}

KDSoapValue dm::TT__IPv6NetworkInterface::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv6NetworkInterface"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueEnabled(QString::fromLatin1("Enabled"), QVariant::fromValue(d_ptr->mEnabled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueEnabled.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueEnabled.setQualified(true);
    args.append(_valueEnabled);// elementargumentserializer.cpp:122
    if (!d_ptr->mConfig_nil) {
        KDSoapValue _valueConfig(d_ptr->mConfig.serialize(QString::fromLatin1("Config")));// elementargumentserializer.cpp:102
        _valueConfig.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueConfig.setQualified(true);
        if (!_valueConfig.isNil())
        args.append(_valueConfig);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__IPv6NetworkInterface::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Enabled")) {// converter_complextype.cpp:354
            d_ptr->mEnabled = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Config")) {// converter_complextype.cpp:354
            d_ptr->mConfig.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TT__IPv6NetworkInterface::TT__IPv6NetworkInterface()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IPv6NetworkInterface::~TT__IPv6NetworkInterface()
{
}

dm::TT__IPv6NetworkInterface::TT__IPv6NetworkInterface( const dm::TT__IPv6NetworkInterface& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IPv6NetworkInterface&  dm::TT__IPv6NetworkInterface::operator=( const dm::TT__IPv6NetworkInterface& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__LoadCertificateWithPrivateKeyResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("LoadCertificateWithPrivateKeyResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__LoadCertificateWithPrivateKeyResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__LoadCertificateWithPrivateKeyResponse::TDS__LoadCertificateWithPrivateKeyResponse()
{
}

dm::TDS__LoadCertificateWithPrivateKeyResponse::~TDS__LoadCertificateWithPrivateKeyResponse()
{
}


class dm::TT__Date::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mYear;
    int mMonth;
    int mDay;
};

dm::TT__Date::PrivateDPtr::PrivateDPtr()
    : mYear(0), mMonth(0), mDay(0)
{
}


void dm::TT__Date::setYear( int _year )
{
    d_ptr->mYear = _year;
}

int dm::TT__Date::year() const
{
    return d_ptr->mYear;
}

void dm::TT__Date::setMonth( int _month )
{
    d_ptr->mMonth = _month;
}

int dm::TT__Date::month() const
{
    return d_ptr->mMonth;
}

void dm::TT__Date::setDay( int _day )
{
    d_ptr->mDay = _day;
}

int dm::TT__Date::day() const
{
    return d_ptr->mDay;
}

KDSoapValue dm::TT__Date::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Date"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueYear(QString::fromLatin1("Year"), QVariant::fromValue(d_ptr->mYear), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueYear.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueYear.setQualified(true);
    args.append(_valueYear);// elementargumentserializer.cpp:122
    KDSoapValue _valueMonth(QString::fromLatin1("Month"), QVariant::fromValue(d_ptr->mMonth), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueMonth.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMonth.setQualified(true);
    args.append(_valueMonth);// elementargumentserializer.cpp:122
    KDSoapValue _valueDay(QString::fromLatin1("Day"), QVariant::fromValue(d_ptr->mDay), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueDay.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDay.setQualified(true);
    args.append(_valueDay);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__Date::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Year")) {// converter_complextype.cpp:354
            d_ptr->mYear = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Month")) {// converter_complextype.cpp:354
            d_ptr->mMonth = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Day")) {// converter_complextype.cpp:354
            d_ptr->mDay = val.value().value<int>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__Date::TT__Date()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Date::~TT__Date()
{
}

dm::TT__Date::TT__Date( const dm::TT__Date& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Date&  dm::TT__Date::operator=( const dm::TT__Date& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__LayoutExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__LayoutExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__LayoutExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__LayoutExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__LayoutExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("LayoutExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__LayoutExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__LayoutExtension::TT__LayoutExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__LayoutExtension::~TT__LayoutExtension()
{
}

dm::TT__LayoutExtension::TT__LayoutExtension( const dm::TT__LayoutExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__LayoutExtension&  dm::TT__LayoutExtension::operator=( const dm::TT__LayoutExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetNTPResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetNTPResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetNTPResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetNTPResponse::TDS__SetNTPResponse()
{
}

dm::TDS__SetNTPResponse::~TDS__SetNTPResponse()
{
}


KDSoapValue dm::TDS__LoadCertificatesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("LoadCertificatesResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__LoadCertificatesResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__LoadCertificatesResponse::TDS__LoadCertificatesResponse()
{
}

dm::TDS__LoadCertificatesResponse::~TDS__LoadCertificatesResponse()
{
}


class dm::TT__SearchCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    bool mMetadataSearch;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__SearchCapabilities::PrivateDPtr::PrivateDPtr()
    : mMetadataSearch(false), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__SearchCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__SearchCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__SearchCapabilities::setMetadataSearch( bool _metadataSearch )
{
    d_ptr->mMetadataSearch = _metadataSearch;
}

bool dm::TT__SearchCapabilities::metadataSearch() const
{
    return d_ptr->mMetadataSearch;
}

void dm::TT__SearchCapabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__SearchCapabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__SearchCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__SearchCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__SearchCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SearchCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    KDSoapValue _valueMetadataSearch(QString::fromLatin1("MetadataSearch"), QVariant::fromValue(d_ptr->mMetadataSearch), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueMetadataSearch.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMetadataSearch.setQualified(true);
    args.append(_valueMetadataSearch);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__SearchCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("MetadataSearch")) {// converter_complextype.cpp:354
            d_ptr->mMetadataSearch = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__SearchCapabilities::TT__SearchCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SearchCapabilities::~TT__SearchCapabilities()
{
}

dm::TT__SearchCapabilities::TT__SearchCapabilities( const dm::TT__SearchCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SearchCapabilities&  dm::TT__SearchCapabilities::operator=( const dm::TT__SearchCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__DeleteStorageConfiguration::PrivateDPtr : public QSharedData
{
public:
    dm::TT__ReferenceToken mToken;
};

void dm::TDS__DeleteStorageConfiguration::setToken( const dm::TT__ReferenceToken& _token )
{
    d_ptr->mToken = _token;
}

dm::TT__ReferenceToken dm::TDS__DeleteStorageConfiguration::token() const
{
    return d_ptr->mToken;
}

KDSoapValue dm::TDS__DeleteStorageConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("DeleteStorageConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueToken(QString::fromLatin1("Token"), d_ptr->mToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueToken.setQualified(true);
    args.append(_valueToken);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__DeleteStorageConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Token")) {// converter_complextype.cpp:354
            d_ptr->mToken.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__DeleteStorageConfiguration::TDS__DeleteStorageConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__DeleteStorageConfiguration::~TDS__DeleteStorageConfiguration()
{
}

dm::TDS__DeleteStorageConfiguration::TDS__DeleteStorageConfiguration( const dm::TDS__DeleteStorageConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__DeleteStorageConfiguration&  dm::TDS__DeleteStorageConfiguration::operator=( const dm::TDS__DeleteStorageConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__RemoveScopesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QStringList mScopeItem;
    bool mScopeItem_nil;
};

dm::TDS__RemoveScopesResponse::PrivateDPtr::PrivateDPtr()
    : mScopeItem_nil(true)
{
}


void dm::TDS__RemoveScopesResponse::setScopeItem( const QStringList& _scopeItem )
{
    d_ptr->mScopeItem_nil = false;// converter_complextype.cpp:277
    d_ptr->mScopeItem = _scopeItem;
}

QStringList dm::TDS__RemoveScopesResponse::scopeItem() const
{
    return d_ptr->mScopeItem;
}

KDSoapValue dm::TDS__RemoveScopesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("RemoveScopesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mScopeItem.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueScopeItem(QString::fromLatin1("ScopeItem"), QVariant::fromValue(d_ptr->mScopeItem.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
        _valueScopeItem.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueScopeItem.setQualified(true);
        args.append(_valueScopeItem);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__RemoveScopesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ScopeItem")) {// converter_complextype.cpp:354
            QString mScopeItemTemp;// converter_complextype.cpp:412
            mScopeItemTemp = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mScopeItem.append(mScopeItemTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__RemoveScopesResponse::TDS__RemoveScopesResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__RemoveScopesResponse::~TDS__RemoveScopesResponse()
{
}

dm::TDS__RemoveScopesResponse::TDS__RemoveScopesResponse( const dm::TDS__RemoveScopesResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__RemoveScopesResponse&  dm::TDS__RemoveScopesResponse::operator=( const dm::TDS__RemoveScopesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetDot11CapabilitiesResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__Dot11Capabilities mCapabilities;
};

void dm::TDS__GetDot11CapabilitiesResponse::setCapabilities( const dm::TT__Dot11Capabilities& _capabilities )
{
    d_ptr->mCapabilities = _capabilities;
}

dm::TT__Dot11Capabilities dm::TDS__GetDot11CapabilitiesResponse::capabilities() const
{
    return d_ptr->mCapabilities;
}

KDSoapValue dm::TDS__GetDot11CapabilitiesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDot11CapabilitiesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueCapabilities(d_ptr->mCapabilities.serialize(QString::fromLatin1("Capabilities")));// elementargumentserializer.cpp:102
    _valueCapabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCapabilities.setQualified(true);
    args.append(_valueCapabilities);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetDot11CapabilitiesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Capabilities")) {// converter_complextype.cpp:354
            d_ptr->mCapabilities.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetDot11CapabilitiesResponse::TDS__GetDot11CapabilitiesResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetDot11CapabilitiesResponse::~TDS__GetDot11CapabilitiesResponse()
{
}

dm::TDS__GetDot11CapabilitiesResponse::TDS__GetDot11CapabilitiesResponse( const dm::TDS__GetDot11CapabilitiesResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetDot11CapabilitiesResponse&  dm::TDS__GetDot11CapabilitiesResponse::operator=( const dm::TDS__GetDot11CapabilitiesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetRelayOutputState::PrivateDPtr : public QSharedData
{
public:
    dm::TT__ReferenceToken mRelayOutputToken;
    dm::TT__RelayLogicalState mLogicalState;
};

void dm::TDS__SetRelayOutputState::setRelayOutputToken( const dm::TT__ReferenceToken& _relayOutputToken )
{
    d_ptr->mRelayOutputToken = _relayOutputToken;
}

dm::TT__ReferenceToken dm::TDS__SetRelayOutputState::relayOutputToken() const
{
    return d_ptr->mRelayOutputToken;
}

void dm::TDS__SetRelayOutputState::setLogicalState( const dm::TT__RelayLogicalState& _logicalState )
{
    d_ptr->mLogicalState = _logicalState;
}

dm::TT__RelayLogicalState dm::TDS__SetRelayOutputState::logicalState() const
{
    return d_ptr->mLogicalState;
}

KDSoapValue dm::TDS__SetRelayOutputState::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetRelayOutputState"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueRelayOutputToken(QString::fromLatin1("RelayOutputToken"), d_ptr->mRelayOutputToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueRelayOutputToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRelayOutputToken.setQualified(true);
    args.append(_valueRelayOutputToken);// elementargumentserializer.cpp:122
    KDSoapValue _valueLogicalState(QString::fromLatin1("LogicalState"), d_ptr->mLogicalState.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("RelayLogicalState"));// elementargumentserializer.cpp:110
    _valueLogicalState.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueLogicalState.setQualified(true);
    args.append(_valueLogicalState);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetRelayOutputState::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("RelayOutputToken")) {// converter_complextype.cpp:354
            d_ptr->mRelayOutputToken.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("LogicalState")) {// converter_complextype.cpp:354
            d_ptr->mLogicalState.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__SetRelayOutputState::TDS__SetRelayOutputState()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetRelayOutputState::~TDS__SetRelayOutputState()
{
}

dm::TDS__SetRelayOutputState::TDS__SetRelayOutputState( const dm::TDS__SetRelayOutputState& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetRelayOutputState&  dm::TDS__SetRelayOutputState::operator=( const dm::TDS__SetRelayOutputState& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Color::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mX;
    float mY;
    float mZ;
    QString mColorspace;
    bool mColorspace_nil;
};

dm::TT__Color::PrivateDPtr::PrivateDPtr()
    : mX(0), mY(0), mZ(0), mColorspace_nil(true)
{
}


void dm::TT__Color::setX( float _x )
{
    d_ptr->mX = _x;
}

float dm::TT__Color::x() const
{
    return d_ptr->mX;
}

void dm::TT__Color::setY( float _y )
{
    d_ptr->mY = _y;
}

float dm::TT__Color::y() const
{
    return d_ptr->mY;
}

void dm::TT__Color::setZ( float _z )
{
    d_ptr->mZ = _z;
}

float dm::TT__Color::z() const
{
    return d_ptr->mZ;
}

void dm::TT__Color::setColorspace( const QString& _colorspace )
{
    d_ptr->mColorspace_nil = false;// converter_complextype.cpp:277
    d_ptr->mColorspace = _colorspace;
}

QString dm::TT__Color::colorspace() const
{
    return d_ptr->mColorspace;
}

KDSoapValue dm::TT__Color::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Color"));// converter_complextype.cpp:471
    KDSoapValueList attribs;
    KDSoapValue _valueX(QString::fromLatin1("X"), QVariant::fromValue(d_ptr->mX), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueX.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    attribs.append(_valueX);// elementargumentserializer.cpp:122
    KDSoapValue _valueY(QString::fromLatin1("Y"), QVariant::fromValue(d_ptr->mY), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueY.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    attribs.append(_valueY);// elementargumentserializer.cpp:122
    KDSoapValue _valueZ(QString::fromLatin1("Z"), QVariant::fromValue(d_ptr->mZ), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueZ.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    attribs.append(_valueZ);// elementargumentserializer.cpp:122
    if (!d_ptr->mColorspace_nil) {
        KDSoapValue _valueColorspace(QString::fromLatin1("Colorspace"), QVariant::fromValue(d_ptr->mColorspace), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
        _valueColorspace.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        if (!_valueColorspace.isNil())
        attribs.append(_valueColorspace);// elementargumentserializer.cpp:122
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Color::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("X")) {// converter_complextype.cpp:354
            d_ptr->mX = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Y")) {// converter_complextype.cpp:354
            d_ptr->mY = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Z")) {// converter_complextype.cpp:354
            d_ptr->mZ = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Colorspace")) {// converter_complextype.cpp:354
            d_ptr->mColorspace = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mColorspace_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TT__Color::TT__Color()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Color::~TT__Color()
{
}

dm::TT__Color::TT__Color( const dm::TT__Color& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Color&  dm::TT__Color::operator=( const dm::TT__Color& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__AddScopesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("AddScopesResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__AddScopesResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__AddScopesResponse::TDS__AddScopesResponse()
{
}

dm::TDS__AddScopesResponse::~TDS__AddScopesResponse()
{
}


class dm::TDS__DeleteDot1XConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__ReferenceToken > mDot1XConfigurationToken;
    bool mDot1XConfigurationToken_nil;
};

dm::TDS__DeleteDot1XConfiguration::PrivateDPtr::PrivateDPtr()
    : mDot1XConfigurationToken_nil(true)
{
}


void dm::TDS__DeleteDot1XConfiguration::setDot1XConfigurationToken( const QList< dm::TT__ReferenceToken >& _dot1XConfigurationToken )
{
    d_ptr->mDot1XConfigurationToken_nil = false;// converter_complextype.cpp:277
    d_ptr->mDot1XConfigurationToken = _dot1XConfigurationToken;
}

QList< dm::TT__ReferenceToken > dm::TDS__DeleteDot1XConfiguration::dot1XConfigurationToken() const
{
    return d_ptr->mDot1XConfigurationToken;
}

KDSoapValue dm::TDS__DeleteDot1XConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("DeleteDot1XConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mDot1XConfigurationToken.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueDot1XConfigurationToken(QString::fromLatin1("Dot1XConfigurationToken"), d_ptr->mDot1XConfigurationToken.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
        _valueDot1XConfigurationToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueDot1XConfigurationToken.setQualified(true);
        args.append(_valueDot1XConfigurationToken);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__DeleteDot1XConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Dot1XConfigurationToken")) {// converter_complextype.cpp:354
            dm::TT__ReferenceToken mDot1XConfigurationTokenTemp;// converter_complextype.cpp:412
            mDot1XConfigurationTokenTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mDot1XConfigurationToken.append(mDot1XConfigurationTokenTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__DeleteDot1XConfiguration::TDS__DeleteDot1XConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__DeleteDot1XConfiguration::~TDS__DeleteDot1XConfiguration()
{
}

dm::TDS__DeleteDot1XConfiguration::TDS__DeleteDot1XConfiguration( const dm::TDS__DeleteDot1XConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__DeleteDot1XConfiguration&  dm::TDS__DeleteDot1XConfiguration::operator=( const dm::TDS__DeleteDot1XConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__PrefixedIPv4Address::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__IPv4Address mAddress;
    int mPrefixLength;
};

dm::TT__PrefixedIPv4Address::PrivateDPtr::PrivateDPtr()
    : mPrefixLength(0)
{
}


void dm::TT__PrefixedIPv4Address::setAddress( const dm::TT__IPv4Address& _address )
{
    d_ptr->mAddress = _address;
}

dm::TT__IPv4Address dm::TT__PrefixedIPv4Address::address() const
{
    return d_ptr->mAddress;
}

void dm::TT__PrefixedIPv4Address::setPrefixLength( int _prefixLength )
{
    d_ptr->mPrefixLength = _prefixLength;
}

int dm::TT__PrefixedIPv4Address::prefixLength() const
{
    return d_ptr->mPrefixLength;
}

KDSoapValue dm::TT__PrefixedIPv4Address::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("PrefixedIPv4Address"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueAddress(QString::fromLatin1("Address"), d_ptr->mAddress.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv4Address"));// elementargumentserializer.cpp:110
    _valueAddress.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueAddress.setQualified(true);
    args.append(_valueAddress);// elementargumentserializer.cpp:122
    KDSoapValue _valuePrefixLength(QString::fromLatin1("PrefixLength"), QVariant::fromValue(d_ptr->mPrefixLength), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valuePrefixLength.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valuePrefixLength.setQualified(true);
    args.append(_valuePrefixLength);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__PrefixedIPv4Address::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Address")) {// converter_complextype.cpp:354
            d_ptr->mAddress.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("PrefixLength")) {// converter_complextype.cpp:354
            d_ptr->mPrefixLength = val.value().value<int>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__PrefixedIPv4Address::TT__PrefixedIPv4Address()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__PrefixedIPv4Address::~TT__PrefixedIPv4Address()
{
}

dm::TT__PrefixedIPv4Address::TT__PrefixedIPv4Address( const dm::TT__PrefixedIPv4Address& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__PrefixedIPv4Address&  dm::TT__PrefixedIPv4Address::operator=( const dm::TT__PrefixedIPv4Address& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetCertificateInformation::PrivateDPtr : public QSharedData
{
public:
    QString mCertificateID;
};

void dm::TDS__GetCertificateInformation::setCertificateID( const QString& _certificateID )
{
    d_ptr->mCertificateID = _certificateID;
}

QString dm::TDS__GetCertificateInformation::certificateID() const
{
    return d_ptr->mCertificateID;
}

KDSoapValue dm::TDS__GetCertificateInformation::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetCertificateInformation"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueCertificateID(QString::fromLatin1("CertificateID"), QVariant::fromValue(d_ptr->mCertificateID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
    _valueCertificateID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCertificateID.setQualified(true);
    args.append(_valueCertificateID);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetCertificateInformation::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateID")) {// converter_complextype.cpp:354
            d_ptr->mCertificateID = val.value().value<QString>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__GetCertificateInformation::TDS__GetCertificateInformation()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetCertificateInformation::~TDS__GetCertificateInformation()
{
}

dm::TDS__GetCertificateInformation::TDS__GetCertificateInformation( const dm::TDS__GetCertificateInformation& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetCertificateInformation&  dm::TDS__GetCertificateInformation::operator=( const dm::TDS__GetCertificateInformation& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetDot1XConfigurationResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__Dot1XConfiguration mDot1XConfiguration;
};

void dm::TDS__GetDot1XConfigurationResponse::setDot1XConfiguration( const dm::TT__Dot1XConfiguration& _dot1XConfiguration )
{
    d_ptr->mDot1XConfiguration = _dot1XConfiguration;
}

dm::TT__Dot1XConfiguration dm::TDS__GetDot1XConfigurationResponse::dot1XConfiguration() const
{
    return d_ptr->mDot1XConfiguration;
}

KDSoapValue dm::TDS__GetDot1XConfigurationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDot1XConfigurationResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDot1XConfiguration(d_ptr->mDot1XConfiguration.serialize(QString::fromLatin1("Dot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDot1XConfiguration.setQualified(true);
    args.append(_valueDot1XConfiguration);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetDot1XConfigurationResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Dot1XConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mDot1XConfiguration.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetDot1XConfigurationResponse::TDS__GetDot1XConfigurationResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetDot1XConfigurationResponse::~TDS__GetDot1XConfigurationResponse()
{
}

dm::TDS__GetDot1XConfigurationResponse::TDS__GetDot1XConfigurationResponse( const dm::TDS__GetDot1XConfigurationResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetDot1XConfigurationResponse&  dm::TDS__GetDot1XConfigurationResponse::operator=( const dm::TDS__GetDot1XConfigurationResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__ImagingSettings20::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__BacklightCompensation20 mBacklightCompensation;
    bool mBacklightCompensation_nil;
    float mBrightness;
    bool mBrightness_nil;
    float mColorSaturation;
    bool mColorSaturation_nil;
    float mContrast;
    bool mContrast_nil;
    dm::TT__Exposure20 mExposure;
    bool mExposure_nil;
    dm::TT__FocusConfiguration20 mFocus;
    bool mFocus_nil;
    dm::TT__IrCutFilterMode mIrCutFilter;
    bool mIrCutFilter_nil;
    float mSharpness;
    bool mSharpness_nil;
    dm::TT__WideDynamicRange20 mWideDynamicRange;
    bool mWideDynamicRange_nil;
    dm::TT__WhiteBalance20 mWhiteBalance;
    bool mWhiteBalance_nil;
    dm::TT__ImagingSettingsExtension20 mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__ImagingSettings20::PrivateDPtr::PrivateDPtr()
    : mBacklightCompensation_nil(true), mBrightness(0), mBrightness_nil(true), mColorSaturation(0), mColorSaturation_nil(true), mContrast(0), mContrast_nil(true), mExposure_nil(true), mFocus_nil(true), mIrCutFilter_nil(true), mSharpness(0), mSharpness_nil(true), mWideDynamicRange_nil(true), mWhiteBalance_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__ImagingSettings20::setBacklightCompensation( const dm::TT__BacklightCompensation20& _backlightCompensation )
{
    d_ptr->mBacklightCompensation_nil = false;// converter_complextype.cpp:277
    d_ptr->mBacklightCompensation = _backlightCompensation;
}

dm::TT__BacklightCompensation20 dm::TT__ImagingSettings20::backlightCompensation() const
{
    return d_ptr->mBacklightCompensation;
}

void dm::TT__ImagingSettings20::setBrightness( float _brightness )
{
    d_ptr->mBrightness_nil = false;// converter_complextype.cpp:277
    d_ptr->mBrightness = _brightness;
}

float dm::TT__ImagingSettings20::brightness() const
{
    return d_ptr->mBrightness;
}

void dm::TT__ImagingSettings20::setColorSaturation( float _colorSaturation )
{
    d_ptr->mColorSaturation_nil = false;// converter_complextype.cpp:277
    d_ptr->mColorSaturation = _colorSaturation;
}

float dm::TT__ImagingSettings20::colorSaturation() const
{
    return d_ptr->mColorSaturation;
}

void dm::TT__ImagingSettings20::setContrast( float _contrast )
{
    d_ptr->mContrast_nil = false;// converter_complextype.cpp:277
    d_ptr->mContrast = _contrast;
}

float dm::TT__ImagingSettings20::contrast() const
{
    return d_ptr->mContrast;
}

void dm::TT__ImagingSettings20::setExposure( const dm::TT__Exposure20& _exposure )
{
    d_ptr->mExposure_nil = false;// converter_complextype.cpp:277
    d_ptr->mExposure = _exposure;
}

dm::TT__Exposure20 dm::TT__ImagingSettings20::exposure() const
{
    return d_ptr->mExposure;
}

void dm::TT__ImagingSettings20::setFocus( const dm::TT__FocusConfiguration20& _focus )
{
    d_ptr->mFocus_nil = false;// converter_complextype.cpp:277
    d_ptr->mFocus = _focus;
}

dm::TT__FocusConfiguration20 dm::TT__ImagingSettings20::focus() const
{
    return d_ptr->mFocus;
}

void dm::TT__ImagingSettings20::setIrCutFilter( const dm::TT__IrCutFilterMode& _irCutFilter )
{
    d_ptr->mIrCutFilter_nil = false;// converter_complextype.cpp:277
    d_ptr->mIrCutFilter = _irCutFilter;
}

dm::TT__IrCutFilterMode dm::TT__ImagingSettings20::irCutFilter() const
{
    return d_ptr->mIrCutFilter;
}

void dm::TT__ImagingSettings20::setSharpness( float _sharpness )
{
    d_ptr->mSharpness_nil = false;// converter_complextype.cpp:277
    d_ptr->mSharpness = _sharpness;
}

float dm::TT__ImagingSettings20::sharpness() const
{
    return d_ptr->mSharpness;
}

void dm::TT__ImagingSettings20::setWideDynamicRange( const dm::TT__WideDynamicRange20& _wideDynamicRange )
{
    d_ptr->mWideDynamicRange_nil = false;// converter_complextype.cpp:277
    d_ptr->mWideDynamicRange = _wideDynamicRange;
}

dm::TT__WideDynamicRange20 dm::TT__ImagingSettings20::wideDynamicRange() const
{
    return d_ptr->mWideDynamicRange;
}

void dm::TT__ImagingSettings20::setWhiteBalance( const dm::TT__WhiteBalance20& _whiteBalance )
{
    d_ptr->mWhiteBalance_nil = false;// converter_complextype.cpp:277
    d_ptr->mWhiteBalance = _whiteBalance;
}

dm::TT__WhiteBalance20 dm::TT__ImagingSettings20::whiteBalance() const
{
    return d_ptr->mWhiteBalance;
}

void dm::TT__ImagingSettings20::setExtension( const dm::TT__ImagingSettingsExtension20& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__ImagingSettingsExtension20 dm::TT__ImagingSettings20::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__ImagingSettings20::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__ImagingSettings20::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__ImagingSettings20::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ImagingSettings20"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mBacklightCompensation_nil) {
        KDSoapValue _valueBacklightCompensation(d_ptr->mBacklightCompensation.serialize(QString::fromLatin1("BacklightCompensation")));// elementargumentserializer.cpp:102
        _valueBacklightCompensation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueBacklightCompensation.setQualified(true);
        if (!_valueBacklightCompensation.isNil())
        args.append(_valueBacklightCompensation);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mBrightness_nil) {
        KDSoapValue _valueBrightness(QString::fromLatin1("Brightness"), QVariant::fromValue(d_ptr->mBrightness), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueBrightness.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueBrightness.setQualified(true);
        if (!_valueBrightness.isNil())
        args.append(_valueBrightness);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mColorSaturation_nil) {
        KDSoapValue _valueColorSaturation(QString::fromLatin1("ColorSaturation"), QVariant::fromValue(d_ptr->mColorSaturation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueColorSaturation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueColorSaturation.setQualified(true);
        if (!_valueColorSaturation.isNil())
        args.append(_valueColorSaturation);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mContrast_nil) {
        KDSoapValue _valueContrast(QString::fromLatin1("Contrast"), QVariant::fromValue(d_ptr->mContrast), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueContrast.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueContrast.setQualified(true);
        if (!_valueContrast.isNil())
        args.append(_valueContrast);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExposure_nil) {
        KDSoapValue _valueExposure(d_ptr->mExposure.serialize(QString::fromLatin1("Exposure")));// elementargumentserializer.cpp:102
        _valueExposure.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExposure.setQualified(true);
        if (!_valueExposure.isNil())
        args.append(_valueExposure);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mFocus_nil) {
        KDSoapValue _valueFocus(d_ptr->mFocus.serialize(QString::fromLatin1("Focus")));// elementargumentserializer.cpp:102
        _valueFocus.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueFocus.setQualified(true);
        if (!_valueFocus.isNil())
        args.append(_valueFocus);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mIrCutFilter_nil) {
        KDSoapValue _valueIrCutFilter(QString::fromLatin1("IrCutFilter"), d_ptr->mIrCutFilter.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IrCutFilterMode"));// elementargumentserializer.cpp:110
        _valueIrCutFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIrCutFilter.setQualified(true);
        if (!_valueIrCutFilter.isNil())
        args.append(_valueIrCutFilter);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSharpness_nil) {
        KDSoapValue _valueSharpness(QString::fromLatin1("Sharpness"), QVariant::fromValue(d_ptr->mSharpness), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueSharpness.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSharpness.setQualified(true);
        if (!_valueSharpness.isNil())
        args.append(_valueSharpness);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mWideDynamicRange_nil) {
        KDSoapValue _valueWideDynamicRange(d_ptr->mWideDynamicRange.serialize(QString::fromLatin1("WideDynamicRange")));// elementargumentserializer.cpp:102
        _valueWideDynamicRange.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueWideDynamicRange.setQualified(true);
        if (!_valueWideDynamicRange.isNil())
        args.append(_valueWideDynamicRange);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mWhiteBalance_nil) {
        KDSoapValue _valueWhiteBalance(d_ptr->mWhiteBalance.serialize(QString::fromLatin1("WhiteBalance")));// elementargumentserializer.cpp:102
        _valueWhiteBalance.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueWhiteBalance.setQualified(true);
        if (!_valueWhiteBalance.isNil())
        args.append(_valueWhiteBalance);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__ImagingSettings20::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("BacklightCompensation")) {// converter_complextype.cpp:354
            d_ptr->mBacklightCompensation.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Brightness")) {// converter_complextype.cpp:354
            d_ptr->mBrightness = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mBrightness_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("ColorSaturation")) {// converter_complextype.cpp:354
            d_ptr->mColorSaturation = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mColorSaturation_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Contrast")) {// converter_complextype.cpp:354
            d_ptr->mContrast = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mContrast_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Exposure")) {// converter_complextype.cpp:354
            d_ptr->mExposure.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Focus")) {// converter_complextype.cpp:354
            d_ptr->mFocus.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("IrCutFilter")) {// converter_complextype.cpp:354
            d_ptr->mIrCutFilter.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mIrCutFilter_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("Sharpness")) {// converter_complextype.cpp:354
            d_ptr->mSharpness = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mSharpness_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("WideDynamicRange")) {// converter_complextype.cpp:354
            d_ptr->mWideDynamicRange.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("WhiteBalance")) {// converter_complextype.cpp:354
            d_ptr->mWhiteBalance.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__ImagingSettings20::TT__ImagingSettings20()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ImagingSettings20::~TT__ImagingSettings20()
{
}

dm::TT__ImagingSettings20::TT__ImagingSettings20( const dm::TT__ImagingSettings20& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ImagingSettings20&  dm::TT__ImagingSettings20::operator=( const dm::TT__ImagingSettings20& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__OSDColor::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__Color mColor;
    int mTransparent;
    bool mTransparent_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__OSDColor::PrivateDPtr::PrivateDPtr()
    : mTransparent(0), mTransparent_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__OSDColor::setColor( const dm::TT__Color& _color )
{
    d_ptr->mColor = _color;
}

dm::TT__Color dm::TT__OSDColor::color() const
{
    return d_ptr->mColor;
}

void dm::TT__OSDColor::setTransparent( int _transparent )
{
    d_ptr->mTransparent_nil = false;// converter_complextype.cpp:277
    d_ptr->mTransparent = _transparent;
}

int dm::TT__OSDColor::transparent() const
{
    return d_ptr->mTransparent;
}

void dm::TT__OSDColor::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__OSDColor::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__OSDColor::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("OSDColor"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueColor(d_ptr->mColor.serialize(QString::fromLatin1("Color")));// elementargumentserializer.cpp:102
    _valueColor.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueColor.setQualified(true);
    args.append(_valueColor);// elementargumentserializer.cpp:122
    KDSoapValueList attribs;
    if (!d_ptr->mTransparent_nil) {
        KDSoapValue _valueTransparent(QString::fromLatin1("Transparent"), QVariant::fromValue(d_ptr->mTransparent), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueTransparent.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        if (!_valueTransparent.isNil())
        attribs.append(_valueTransparent);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__OSDColor::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Color")) {// converter_complextype.cpp:354
            d_ptr->mColor.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Transparent")) {// converter_complextype.cpp:354
            d_ptr->mTransparent = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mTransparent_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__OSDColor::TT__OSDColor()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__OSDColor::~TT__OSDColor()
{
}

dm::TT__OSDColor::TT__OSDColor( const dm::TT__OSDColor& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__OSDColor&  dm::TT__OSDColor::operator=( const dm::TT__OSDColor& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetClientCertificateMode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetClientCertificateMode"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetClientCertificateMode::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetClientCertificateMode::TDS__GetClientCertificateMode()
{
}

dm::TDS__GetClientCertificateMode::~TDS__GetClientCertificateMode()
{
}


class dm::TT__SystemCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mDiscoveryResolve;
    bool mDiscoveryBye;
    bool mRemoteDiscovery;
    bool mSystemBackup;
    bool mSystemLogging;
    bool mFirmwareUpgrade;
    QList< dm::TT__OnvifVersion > mSupportedVersions;
    dm::TT__SystemCapabilitiesExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__SystemCapabilities::PrivateDPtr::PrivateDPtr()
    : mDiscoveryResolve(false), mDiscoveryBye(false), mRemoteDiscovery(false), mSystemBackup(false), mSystemLogging(false), mFirmwareUpgrade(false), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__SystemCapabilities::setDiscoveryResolve( bool _discoveryResolve )
{
    d_ptr->mDiscoveryResolve = _discoveryResolve;
}

bool dm::TT__SystemCapabilities::discoveryResolve() const
{
    return d_ptr->mDiscoveryResolve;
}

void dm::TT__SystemCapabilities::setDiscoveryBye( bool _discoveryBye )
{
    d_ptr->mDiscoveryBye = _discoveryBye;
}

bool dm::TT__SystemCapabilities::discoveryBye() const
{
    return d_ptr->mDiscoveryBye;
}

void dm::TT__SystemCapabilities::setRemoteDiscovery( bool _remoteDiscovery )
{
    d_ptr->mRemoteDiscovery = _remoteDiscovery;
}

bool dm::TT__SystemCapabilities::remoteDiscovery() const
{
    return d_ptr->mRemoteDiscovery;
}

void dm::TT__SystemCapabilities::setSystemBackup( bool _systemBackup )
{
    d_ptr->mSystemBackup = _systemBackup;
}

bool dm::TT__SystemCapabilities::systemBackup() const
{
    return d_ptr->mSystemBackup;
}

void dm::TT__SystemCapabilities::setSystemLogging( bool _systemLogging )
{
    d_ptr->mSystemLogging = _systemLogging;
}

bool dm::TT__SystemCapabilities::systemLogging() const
{
    return d_ptr->mSystemLogging;
}

void dm::TT__SystemCapabilities::setFirmwareUpgrade( bool _firmwareUpgrade )
{
    d_ptr->mFirmwareUpgrade = _firmwareUpgrade;
}

bool dm::TT__SystemCapabilities::firmwareUpgrade() const
{
    return d_ptr->mFirmwareUpgrade;
}

void dm::TT__SystemCapabilities::setSupportedVersions( const QList< dm::TT__OnvifVersion >& _supportedVersions )
{
    d_ptr->mSupportedVersions = _supportedVersions;
}

QList< dm::TT__OnvifVersion > dm::TT__SystemCapabilities::supportedVersions() const
{
    return d_ptr->mSupportedVersions;
}

void dm::TT__SystemCapabilities::setExtension( const dm::TT__SystemCapabilitiesExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__SystemCapabilitiesExtension dm::TT__SystemCapabilities::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__SystemCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__SystemCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__SystemCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SystemCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDiscoveryResolve(QString::fromLatin1("DiscoveryResolve"), QVariant::fromValue(d_ptr->mDiscoveryResolve), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueDiscoveryResolve.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDiscoveryResolve.setQualified(true);
    args.append(_valueDiscoveryResolve);// elementargumentserializer.cpp:122
    KDSoapValue _valueDiscoveryBye(QString::fromLatin1("DiscoveryBye"), QVariant::fromValue(d_ptr->mDiscoveryBye), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueDiscoveryBye.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDiscoveryBye.setQualified(true);
    args.append(_valueDiscoveryBye);// elementargumentserializer.cpp:122
    KDSoapValue _valueRemoteDiscovery(QString::fromLatin1("RemoteDiscovery"), QVariant::fromValue(d_ptr->mRemoteDiscovery), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueRemoteDiscovery.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueRemoteDiscovery.setQualified(true);
    args.append(_valueRemoteDiscovery);// elementargumentserializer.cpp:122
    KDSoapValue _valueSystemBackup(QString::fromLatin1("SystemBackup"), QVariant::fromValue(d_ptr->mSystemBackup), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueSystemBackup.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueSystemBackup.setQualified(true);
    args.append(_valueSystemBackup);// elementargumentserializer.cpp:122
    KDSoapValue _valueSystemLogging(QString::fromLatin1("SystemLogging"), QVariant::fromValue(d_ptr->mSystemLogging), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueSystemLogging.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueSystemLogging.setQualified(true);
    args.append(_valueSystemLogging);// elementargumentserializer.cpp:122
    KDSoapValue _valueFirmwareUpgrade(QString::fromLatin1("FirmwareUpgrade"), QVariant::fromValue(d_ptr->mFirmwareUpgrade), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueFirmwareUpgrade.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueFirmwareUpgrade.setQualified(true);
    args.append(_valueFirmwareUpgrade);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mSupportedVersions.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueSupportedVersions(d_ptr->mSupportedVersions.at(i).serialize(QString::fromLatin1("SupportedVersions")));// elementargumentserializer.cpp:102
        _valueSupportedVersions.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSupportedVersions.setQualified(true);
        args.append(_valueSupportedVersions);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__SystemCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DiscoveryResolve")) {// converter_complextype.cpp:354
            d_ptr->mDiscoveryResolve = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("DiscoveryBye")) {// converter_complextype.cpp:354
            d_ptr->mDiscoveryBye = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("RemoteDiscovery")) {// converter_complextype.cpp:354
            d_ptr->mRemoteDiscovery = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("SystemBackup")) {// converter_complextype.cpp:354
            d_ptr->mSystemBackup = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("SystemLogging")) {// converter_complextype.cpp:354
            d_ptr->mSystemLogging = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("FirmwareUpgrade")) {// converter_complextype.cpp:354
            d_ptr->mFirmwareUpgrade = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("SupportedVersions")) {// converter_complextype.cpp:354
            dm::TT__OnvifVersion mSupportedVersionsTemp;// converter_complextype.cpp:412
            mSupportedVersionsTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mSupportedVersions.append(mSupportedVersionsTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__SystemCapabilities::TT__SystemCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SystemCapabilities::~TT__SystemCapabilities()
{
}

dm::TT__SystemCapabilities::TT__SystemCapabilities( const dm::TT__SystemCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SystemCapabilities&  dm::TT__SystemCapabilities::operator=( const dm::TT__SystemCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetDot1XConfigurationsResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__Dot1XConfiguration > mDot1XConfiguration;
    bool mDot1XConfiguration_nil;
};

dm::TDS__GetDot1XConfigurationsResponse::PrivateDPtr::PrivateDPtr()
    : mDot1XConfiguration_nil(true)
{
}


void dm::TDS__GetDot1XConfigurationsResponse::setDot1XConfiguration( const QList< dm::TT__Dot1XConfiguration >& _dot1XConfiguration )
{
    d_ptr->mDot1XConfiguration_nil = false;// converter_complextype.cpp:277
    d_ptr->mDot1XConfiguration = _dot1XConfiguration;
}

QList< dm::TT__Dot1XConfiguration > dm::TDS__GetDot1XConfigurationsResponse::dot1XConfiguration() const
{
    return d_ptr->mDot1XConfiguration;
}

KDSoapValue dm::TDS__GetDot1XConfigurationsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDot1XConfigurationsResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mDot1XConfiguration.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueDot1XConfiguration(d_ptr->mDot1XConfiguration.at(i).serialize(QString::fromLatin1("Dot1XConfiguration")));// elementargumentserializer.cpp:102
        _valueDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueDot1XConfiguration.setQualified(true);
        args.append(_valueDot1XConfiguration);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetDot1XConfigurationsResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Dot1XConfiguration")) {// converter_complextype.cpp:354
            dm::TT__Dot1XConfiguration mDot1XConfigurationTemp;// converter_complextype.cpp:412
            mDot1XConfigurationTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mDot1XConfiguration.append(mDot1XConfigurationTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetDot1XConfigurationsResponse::TDS__GetDot1XConfigurationsResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetDot1XConfigurationsResponse::~TDS__GetDot1XConfigurationsResponse()
{
}

dm::TDS__GetDot1XConfigurationsResponse::TDS__GetDot1XConfigurationsResponse( const dm::TDS__GetDot1XConfigurationsResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetDot1XConfigurationsResponse&  dm::TDS__GetDot1XConfigurationsResponse::operator=( const dm::TDS__GetDot1XConfigurationsResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__ImagingSettingsExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__ImagingSettingsExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__ImagingSettingsExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__ImagingSettingsExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__ImagingSettingsExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ImagingSettingsExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__ImagingSettingsExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__ImagingSettingsExtension::TT__ImagingSettingsExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ImagingSettingsExtension::~TT__ImagingSettingsExtension()
{
}

dm::TT__ImagingSettingsExtension::TT__ImagingSettingsExtension( const dm::TT__ImagingSettingsExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ImagingSettingsExtension&  dm::TT__ImagingSettingsExtension::operator=( const dm::TT__ImagingSettingsExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Vector::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mX;
    bool mX_nil;
    float mY;
    bool mY_nil;
};

dm::TT__Vector::PrivateDPtr::PrivateDPtr()
    : mX(0), mX_nil(true), mY(0), mY_nil(true)
{
}


void dm::TT__Vector::setX( float _x )
{
    d_ptr->mX_nil = false;// converter_complextype.cpp:277
    d_ptr->mX = _x;
}

float dm::TT__Vector::x() const
{
    return d_ptr->mX;
}

void dm::TT__Vector::setY( float _y )
{
    d_ptr->mY_nil = false;// converter_complextype.cpp:277
    d_ptr->mY = _y;
}

float dm::TT__Vector::y() const
{
    return d_ptr->mY;
}

KDSoapValue dm::TT__Vector::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Vector"));// converter_complextype.cpp:471
    KDSoapValueList attribs;
    if (!d_ptr->mX_nil) {
        KDSoapValue _valueX(QString::fromLatin1("x"), QVariant::fromValue(d_ptr->mX), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueX.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        if (!_valueX.isNil())
        attribs.append(_valueX);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mY_nil) {
        KDSoapValue _valueY(QString::fromLatin1("y"), QVariant::fromValue(d_ptr->mY), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueY.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        if (!_valueY.isNil())
        attribs.append(_valueY);// elementargumentserializer.cpp:122
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Vector::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("x")) {// converter_complextype.cpp:354
            d_ptr->mX = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mX_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("y")) {// converter_complextype.cpp:354
            d_ptr->mY = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mY_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TT__Vector::TT__Vector()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Vector::~TT__Vector()
{
}

dm::TT__Vector::TT__Vector( const dm::TT__Vector& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Vector&  dm::TT__Vector::operator=( const dm::TT__Vector& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__ImageStabilizationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__ImageStabilizationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__ImageStabilizationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__ImageStabilizationExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__ImageStabilizationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ImageStabilizationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__ImageStabilizationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__ImageStabilizationExtension::TT__ImageStabilizationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ImageStabilizationExtension::~TT__ImageStabilizationExtension()
{
}

dm::TT__ImageStabilizationExtension::TT__ImageStabilizationExtension( const dm::TT__ImageStabilizationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ImageStabilizationExtension&  dm::TT__ImageStabilizationExtension::operator=( const dm::TT__ImageStabilizationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__UserCredential::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mUserName;
    QString mPassword;
    bool mPassword_nil;
    dm::TDS__Extension mExtension;
    bool mExtension_nil;
};

dm::TDS__UserCredential::PrivateDPtr::PrivateDPtr()
    : mPassword_nil(true), mExtension_nil(true)
{
}


void dm::TDS__UserCredential::setUserName( const QString& _userName )
{
    d_ptr->mUserName = _userName;
}

QString dm::TDS__UserCredential::userName() const
{
    return d_ptr->mUserName;
}

void dm::TDS__UserCredential::setPassword( const QString& _password )
{
    d_ptr->mPassword_nil = false;// converter_complextype.cpp:277
    d_ptr->mPassword = _password;
}

QString dm::TDS__UserCredential::password() const
{
    return d_ptr->mPassword;
}

void dm::TDS__UserCredential::setExtension( const dm::TDS__Extension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TDS__Extension dm::TDS__UserCredential::extension() const
{
    return d_ptr->mExtension;
}

KDSoapValue dm::TDS__UserCredential::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("UserCredential"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueUserName(QString::fromLatin1("UserName"), QVariant::fromValue(d_ptr->mUserName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueUserName.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueUserName.setQualified(true);
    args.append(_valueUserName);// elementargumentserializer.cpp:122
    if (!d_ptr->mPassword_nil) {
        KDSoapValue _valuePassword(QString::fromLatin1("Password"), QVariant::fromValue(d_ptr->mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valuePassword.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valuePassword.setQualified(true);
        if (!_valuePassword.isNil())
        args.append(_valuePassword);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__UserCredential::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("UserName")) {// converter_complextype.cpp:354
            d_ptr->mUserName = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Password")) {// converter_complextype.cpp:354
            d_ptr->mPassword = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mPassword_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__UserCredential::TDS__UserCredential()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__UserCredential::~TDS__UserCredential()
{
}

dm::TDS__UserCredential::TDS__UserCredential( const dm::TDS__UserCredential& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__UserCredential&  dm::TDS__UserCredential::operator=( const dm::TDS__UserCredential& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetAccessPolicyResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__BinaryData mPolicyFile;
};

void dm::TDS__GetAccessPolicyResponse::setPolicyFile( const dm::TT__BinaryData& _policyFile )
{
    d_ptr->mPolicyFile = _policyFile;
}

dm::TT__BinaryData dm::TDS__GetAccessPolicyResponse::policyFile() const
{
    return d_ptr->mPolicyFile;
}

KDSoapValue dm::TDS__GetAccessPolicyResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetAccessPolicyResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valuePolicyFile(d_ptr->mPolicyFile.serialize(QString::fromLatin1("PolicyFile")));// elementargumentserializer.cpp:102
    _valuePolicyFile.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valuePolicyFile.setQualified(true);
    args.append(_valuePolicyFile);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetAccessPolicyResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("PolicyFile")) {// converter_complextype.cpp:354
            d_ptr->mPolicyFile.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetAccessPolicyResponse::TDS__GetAccessPolicyResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetAccessPolicyResponse::~TDS__GetAccessPolicyResponse()
{
}

dm::TDS__GetAccessPolicyResponse::TDS__GetAccessPolicyResponse( const dm::TDS__GetAccessPolicyResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetAccessPolicyResponse&  dm::TDS__GetAccessPolicyResponse::operator=( const dm::TDS__GetAccessPolicyResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__CertificateUsage::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mValue;
    bool mCritical;
};

dm::TT__CertificateUsage::PrivateDPtr::PrivateDPtr()
    : mCritical(false)
{
}


void dm::TT__CertificateUsage::setValue( const QString& _value )
{
    d_ptr->mValue = _value;
}

QString dm::TT__CertificateUsage::value() const
{
    return d_ptr->mValue;
}

dm::TT__CertificateUsage::TT__CertificateUsage( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

dm::TT__CertificateUsage::operator QString() const
{
    return d_ptr->mValue;
}

void dm::TT__CertificateUsage::setCritical( bool _critical )
{
    d_ptr->mCritical = _critical;
}

bool dm::TT__CertificateUsage::critical() const
{
    return d_ptr->mCritical;
}

KDSoapValue dm::TT__CertificateUsage::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("CertificateUsage"));// converter_complextype.cpp:466
    KDSoapValueList attribs;
    KDSoapValue _valueCritical(QString::fromLatin1("Critical"), QVariant::fromValue(d_ptr->mCritical), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueCritical.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    attribs.append(_valueCritical);// elementargumentserializer.cpp:122
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__CertificateUsage::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// converter_complextype.cpp:367
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Critical")) {// converter_complextype.cpp:354
            d_ptr->mCritical = val.value().value<bool>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__CertificateUsage::TT__CertificateUsage()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__CertificateUsage::~TT__CertificateUsage()
{
}

dm::TT__CertificateUsage::TT__CertificateUsage( const dm::TT__CertificateUsage& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__CertificateUsage&  dm::TT__CertificateUsage::operator=( const dm::TT__CertificateUsage& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__IPv6Configuration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mAcceptRouterAdvert;
    bool mAcceptRouterAdvert_nil;
    dm::TT__IPv6DHCPConfiguration mDHCP;
    QList< dm::TT__PrefixedIPv6Address > mManual;
    bool mManual_nil;
    QList< dm::TT__PrefixedIPv6Address > mLinkLocal;
    bool mLinkLocal_nil;
    QList< dm::TT__PrefixedIPv6Address > mFromDHCP;
    bool mFromDHCP_nil;
    QList< dm::TT__PrefixedIPv6Address > mFromRA;
    bool mFromRA_nil;
    dm::TT__IPv6ConfigurationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__IPv6Configuration::PrivateDPtr::PrivateDPtr()
    : mAcceptRouterAdvert(false), mAcceptRouterAdvert_nil(true), mManual_nil(true), mLinkLocal_nil(true), mFromDHCP_nil(true), mFromRA_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__IPv6Configuration::setAcceptRouterAdvert( bool _acceptRouterAdvert )
{
    d_ptr->mAcceptRouterAdvert_nil = false;// converter_complextype.cpp:277
    d_ptr->mAcceptRouterAdvert = _acceptRouterAdvert;
}

bool dm::TT__IPv6Configuration::acceptRouterAdvert() const
{
    return d_ptr->mAcceptRouterAdvert;
}

void dm::TT__IPv6Configuration::setDHCP( const dm::TT__IPv6DHCPConfiguration& _dHCP )
{
    d_ptr->mDHCP = _dHCP;
}

dm::TT__IPv6DHCPConfiguration dm::TT__IPv6Configuration::dHCP() const
{
    return d_ptr->mDHCP;
}

void dm::TT__IPv6Configuration::setManual( const QList< dm::TT__PrefixedIPv6Address >& _manual )
{
    d_ptr->mManual_nil = false;// converter_complextype.cpp:277
    d_ptr->mManual = _manual;
}

QList< dm::TT__PrefixedIPv6Address > dm::TT__IPv6Configuration::manual() const
{
    return d_ptr->mManual;
}

void dm::TT__IPv6Configuration::setLinkLocal( const QList< dm::TT__PrefixedIPv6Address >& _linkLocal )
{
    d_ptr->mLinkLocal_nil = false;// converter_complextype.cpp:277
    d_ptr->mLinkLocal = _linkLocal;
}

QList< dm::TT__PrefixedIPv6Address > dm::TT__IPv6Configuration::linkLocal() const
{
    return d_ptr->mLinkLocal;
}

void dm::TT__IPv6Configuration::setFromDHCP( const QList< dm::TT__PrefixedIPv6Address >& _fromDHCP )
{
    d_ptr->mFromDHCP_nil = false;// converter_complextype.cpp:277
    d_ptr->mFromDHCP = _fromDHCP;
}

QList< dm::TT__PrefixedIPv6Address > dm::TT__IPv6Configuration::fromDHCP() const
{
    return d_ptr->mFromDHCP;
}

void dm::TT__IPv6Configuration::setFromRA( const QList< dm::TT__PrefixedIPv6Address >& _fromRA )
{
    d_ptr->mFromRA_nil = false;// converter_complextype.cpp:277
    d_ptr->mFromRA = _fromRA;
}

QList< dm::TT__PrefixedIPv6Address > dm::TT__IPv6Configuration::fromRA() const
{
    return d_ptr->mFromRA;
}

void dm::TT__IPv6Configuration::setExtension( const dm::TT__IPv6ConfigurationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__IPv6ConfigurationExtension dm::TT__IPv6Configuration::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__IPv6Configuration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__IPv6Configuration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__IPv6Configuration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv6Configuration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mAcceptRouterAdvert_nil) {
        KDSoapValue _valueAcceptRouterAdvert(QString::fromLatin1("AcceptRouterAdvert"), QVariant::fromValue(d_ptr->mAcceptRouterAdvert), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueAcceptRouterAdvert.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAcceptRouterAdvert.setQualified(true);
        if (!_valueAcceptRouterAdvert.isNil())
        args.append(_valueAcceptRouterAdvert);// elementargumentserializer.cpp:122
    }
    KDSoapValue _valueDHCP(QString::fromLatin1("DHCP"), d_ptr->mDHCP.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv6DHCPConfiguration"));// elementargumentserializer.cpp:110
    _valueDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDHCP.setQualified(true);
    args.append(_valueDHCP);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mManual.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueManual(d_ptr->mManual.at(i).serialize(QString::fromLatin1("Manual")));// elementargumentserializer.cpp:102
        _valueManual.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueManual.setQualified(true);
        args.append(_valueManual);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mLinkLocal.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueLinkLocal(d_ptr->mLinkLocal.at(i).serialize(QString::fromLatin1("LinkLocal")));// elementargumentserializer.cpp:102
        _valueLinkLocal.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueLinkLocal.setQualified(true);
        args.append(_valueLinkLocal);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mFromDHCP.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueFromDHCP(d_ptr->mFromDHCP.at(i).serialize(QString::fromLatin1("FromDHCP")));// elementargumentserializer.cpp:102
        _valueFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueFromDHCP.setQualified(true);
        args.append(_valueFromDHCP);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mFromRA.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueFromRA(d_ptr->mFromRA.at(i).serialize(QString::fromLatin1("FromRA")));// elementargumentserializer.cpp:102
        _valueFromRA.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueFromRA.setQualified(true);
        args.append(_valueFromRA);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__IPv6Configuration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("AcceptRouterAdvert")) {// converter_complextype.cpp:354
            d_ptr->mAcceptRouterAdvert = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mAcceptRouterAdvert_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("DHCP")) {// converter_complextype.cpp:354
            d_ptr->mDHCP.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Manual")) {// converter_complextype.cpp:354
            dm::TT__PrefixedIPv6Address mManualTemp;// converter_complextype.cpp:412
            mManualTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mManual.append(mManualTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("LinkLocal")) {// converter_complextype.cpp:354
            dm::TT__PrefixedIPv6Address mLinkLocalTemp;// converter_complextype.cpp:412
            mLinkLocalTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mLinkLocal.append(mLinkLocalTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("FromDHCP")) {// converter_complextype.cpp:354
            dm::TT__PrefixedIPv6Address mFromDHCPTemp;// converter_complextype.cpp:412
            mFromDHCPTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mFromDHCP.append(mFromDHCPTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("FromRA")) {// converter_complextype.cpp:354
            dm::TT__PrefixedIPv6Address mFromRATemp;// converter_complextype.cpp:412
            mFromRATemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mFromRA.append(mFromRATemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__IPv6Configuration::TT__IPv6Configuration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IPv6Configuration::~TT__IPv6Configuration()
{
}

dm::TT__IPv6Configuration::TT__IPv6Configuration( const dm::TT__IPv6Configuration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IPv6Configuration&  dm::TT__IPv6Configuration::operator=( const dm::TT__IPv6Configuration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetCertificatesStatusResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__CertificateStatus > mCertificateStatus;
    bool mCertificateStatus_nil;
};

dm::TDS__GetCertificatesStatusResponse::PrivateDPtr::PrivateDPtr()
    : mCertificateStatus_nil(true)
{
}


void dm::TDS__GetCertificatesStatusResponse::setCertificateStatus( const QList< dm::TT__CertificateStatus >& _certificateStatus )
{
    d_ptr->mCertificateStatus_nil = false;// converter_complextype.cpp:277
    d_ptr->mCertificateStatus = _certificateStatus;
}

QList< dm::TT__CertificateStatus > dm::TDS__GetCertificatesStatusResponse::certificateStatus() const
{
    return d_ptr->mCertificateStatus;
}

KDSoapValue dm::TDS__GetCertificatesStatusResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetCertificatesStatusResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mCertificateStatus.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueCertificateStatus(d_ptr->mCertificateStatus.at(i).serialize(QString::fromLatin1("CertificateStatus")));// elementargumentserializer.cpp:102
        _valueCertificateStatus.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueCertificateStatus.setQualified(true);
        args.append(_valueCertificateStatus);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetCertificatesStatusResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateStatus")) {// converter_complextype.cpp:354
            dm::TT__CertificateStatus mCertificateStatusTemp;// converter_complextype.cpp:412
            mCertificateStatusTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mCertificateStatus.append(mCertificateStatusTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetCertificatesStatusResponse::TDS__GetCertificatesStatusResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetCertificatesStatusResponse::~TDS__GetCertificatesStatusResponse()
{
}

dm::TDS__GetCertificatesStatusResponse::TDS__GetCertificatesStatusResponse( const dm::TDS__GetCertificatesStatusResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetCertificatesStatusResponse&  dm::TDS__GetCertificatesStatusResponse::operator=( const dm::TDS__GetCertificatesStatusResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__OSDImgConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mImgPath;
    dm::TT__OSDImgConfigurationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__OSDImgConfiguration::PrivateDPtr::PrivateDPtr()
    : mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__OSDImgConfiguration::setImgPath( const QString& _imgPath )
{
    d_ptr->mImgPath = _imgPath;
}

QString dm::TT__OSDImgConfiguration::imgPath() const
{
    return d_ptr->mImgPath;
}

void dm::TT__OSDImgConfiguration::setExtension( const dm::TT__OSDImgConfigurationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__OSDImgConfigurationExtension dm::TT__OSDImgConfiguration::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__OSDImgConfiguration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__OSDImgConfiguration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__OSDImgConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("OSDImgConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueImgPath(QString::fromLatin1("ImgPath"), QVariant::fromValue(d_ptr->mImgPath), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueImgPath.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueImgPath.setQualified(true);
    args.append(_valueImgPath);// elementargumentserializer.cpp:122
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__OSDImgConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ImgPath")) {// converter_complextype.cpp:354
            d_ptr->mImgPath = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__OSDImgConfiguration::TT__OSDImgConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__OSDImgConfiguration::~TT__OSDImgConfiguration()
{
}

dm::TT__OSDImgConfiguration::TT__OSDImgConfiguration( const dm::TT__OSDImgConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__OSDImgConfiguration&  dm::TT__OSDImgConfiguration::operator=( const dm::TT__OSDImgConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetNetworkInterfacesResponse::PrivateDPtr : public QSharedData
{
public:
    QList< dm::TT__NetworkInterface > mNetworkInterfaces;
};

void dm::TDS__GetNetworkInterfacesResponse::setNetworkInterfaces( const QList< dm::TT__NetworkInterface >& _networkInterfaces )
{
    d_ptr->mNetworkInterfaces = _networkInterfaces;
}

QList< dm::TT__NetworkInterface > dm::TDS__GetNetworkInterfacesResponse::networkInterfaces() const
{
    return d_ptr->mNetworkInterfaces;
}

KDSoapValue dm::TDS__GetNetworkInterfacesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetNetworkInterfacesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mNetworkInterfaces.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueNetworkInterfaces(d_ptr->mNetworkInterfaces.at(i).serialize(QString::fromLatin1("NetworkInterfaces")));// elementargumentserializer.cpp:102
        _valueNetworkInterfaces.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueNetworkInterfaces.setQualified(true);
        args.append(_valueNetworkInterfaces);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetNetworkInterfacesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("NetworkInterfaces")) {// converter_complextype.cpp:354
            dm::TT__NetworkInterface mNetworkInterfacesTemp;// converter_complextype.cpp:412
            mNetworkInterfacesTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mNetworkInterfaces.append(mNetworkInterfacesTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetNetworkInterfacesResponse::TDS__GetNetworkInterfacesResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetNetworkInterfacesResponse::~TDS__GetNetworkInterfacesResponse()
{
}

dm::TDS__GetNetworkInterfacesResponse::TDS__GetNetworkInterfacesResponse( const dm::TDS__GetNetworkInterfacesResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetNetworkInterfacesResponse&  dm::TDS__GetNetworkInterfacesResponse::operator=( const dm::TDS__GetNetworkInterfacesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetClientCertificateMode::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mEnabled;
};

dm::TDS__SetClientCertificateMode::PrivateDPtr::PrivateDPtr()
    : mEnabled(false)
{
}


void dm::TDS__SetClientCertificateMode::setEnabled( bool _enabled )
{
    d_ptr->mEnabled = _enabled;
}

bool dm::TDS__SetClientCertificateMode::enabled() const
{
    return d_ptr->mEnabled;
}

KDSoapValue dm::TDS__SetClientCertificateMode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetClientCertificateMode"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueEnabled(QString::fromLatin1("Enabled"), QVariant::fromValue(d_ptr->mEnabled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueEnabled.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueEnabled.setQualified(true);
    args.append(_valueEnabled);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetClientCertificateMode::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Enabled")) {// converter_complextype.cpp:354
            d_ptr->mEnabled = val.value().value<bool>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__SetClientCertificateMode::TDS__SetClientCertificateMode()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetClientCertificateMode::~TDS__SetClientCertificateMode()
{
}

dm::TDS__SetClientCertificateMode::TDS__SetClientCertificateMode( const dm::TDS__SetClientCertificateMode& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetClientCertificateMode&  dm::TDS__SetClientCertificateMode::operator=( const dm::TDS__SetClientCertificateMode& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__ImageStabilization::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__ImageStabilizationMode mMode;
    float mLevel;
    bool mLevel_nil;
    dm::TT__ImageStabilizationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__ImageStabilization::PrivateDPtr::PrivateDPtr()
    : mLevel(0), mLevel_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__ImageStabilization::setMode( const dm::TT__ImageStabilizationMode& _mode )
{
    d_ptr->mMode = _mode;
}

dm::TT__ImageStabilizationMode dm::TT__ImageStabilization::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__ImageStabilization::setLevel( float _level )
{
    d_ptr->mLevel_nil = false;// converter_complextype.cpp:277
    d_ptr->mLevel = _level;
}

float dm::TT__ImageStabilization::level() const
{
    return d_ptr->mLevel;
}

void dm::TT__ImageStabilization::setExtension( const dm::TT__ImageStabilizationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__ImageStabilizationExtension dm::TT__ImageStabilization::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__ImageStabilization::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__ImageStabilization::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__ImageStabilization::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ImageStabilization"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), d_ptr->mMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ImageStabilizationMode"));// elementargumentserializer.cpp:110
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    if (!d_ptr->mLevel_nil) {
        KDSoapValue _valueLevel(QString::fromLatin1("Level"), QVariant::fromValue(d_ptr->mLevel), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueLevel.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueLevel.setQualified(true);
        if (!_valueLevel.isNil())
        args.append(_valueLevel);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__ImageStabilization::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Level")) {// converter_complextype.cpp:354
            d_ptr->mLevel = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mLevel_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__ImageStabilization::TT__ImageStabilization()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ImageStabilization::~TT__ImageStabilization()
{
}

dm::TT__ImageStabilization::TT__ImageStabilization( const dm::TT__ImageStabilization& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ImageStabilization&  dm::TT__ImageStabilization::operator=( const dm::TT__ImageStabilization& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__UpgradeSystemFirmware::PrivateDPtr : public QSharedData
{
public:
    dm::TT__AttachmentData mFirmware;
};

void dm::TDS__UpgradeSystemFirmware::setFirmware( const dm::TT__AttachmentData& _firmware )
{
    d_ptr->mFirmware = _firmware;
}

dm::TT__AttachmentData dm::TDS__UpgradeSystemFirmware::firmware() const
{
    return d_ptr->mFirmware;
}

KDSoapValue dm::TDS__UpgradeSystemFirmware::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("UpgradeSystemFirmware"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueFirmware(d_ptr->mFirmware.serialize(QString::fromLatin1("Firmware")));// elementargumentserializer.cpp:102
    _valueFirmware.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueFirmware.setQualified(true);
    args.append(_valueFirmware);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__UpgradeSystemFirmware::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Firmware")) {// converter_complextype.cpp:354
            d_ptr->mFirmware.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__UpgradeSystemFirmware::TDS__UpgradeSystemFirmware()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__UpgradeSystemFirmware::~TDS__UpgradeSystemFirmware()
{
}

dm::TDS__UpgradeSystemFirmware::TDS__UpgradeSystemFirmware( const dm::TDS__UpgradeSystemFirmware& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__UpgradeSystemFirmware&  dm::TDS__UpgradeSystemFirmware::operator=( const dm::TDS__UpgradeSystemFirmware& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__OnvifVersion::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mMajor;
    int mMinor;
};

dm::TT__OnvifVersion::PrivateDPtr::PrivateDPtr()
    : mMajor(0), mMinor(0)
{
}


void dm::TT__OnvifVersion::setMajor( int _major )
{
    d_ptr->mMajor = _major;
}

int dm::TT__OnvifVersion::major() const
{
    return d_ptr->mMajor;
}

void dm::TT__OnvifVersion::setMinor( int _minor )
{
    d_ptr->mMinor = _minor;
}

int dm::TT__OnvifVersion::minor() const
{
    return d_ptr->mMinor;
}

KDSoapValue dm::TT__OnvifVersion::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("OnvifVersion"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMajor(QString::fromLatin1("Major"), QVariant::fromValue(d_ptr->mMajor), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueMajor.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMajor.setQualified(true);
    args.append(_valueMajor);// elementargumentserializer.cpp:122
    KDSoapValue _valueMinor(QString::fromLatin1("Minor"), QVariant::fromValue(d_ptr->mMinor), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueMinor.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMinor.setQualified(true);
    args.append(_valueMinor);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__OnvifVersion::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Major")) {// converter_complextype.cpp:354
            d_ptr->mMajor = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Minor")) {// converter_complextype.cpp:354
            d_ptr->mMinor = val.value().value<int>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__OnvifVersion::TT__OnvifVersion()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__OnvifVersion::~TT__OnvifVersion()
{
}

dm::TT__OnvifVersion::TT__OnvifVersion( const dm::TT__OnvifVersion& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__OnvifVersion&  dm::TT__OnvifVersion::operator=( const dm::TT__OnvifVersion& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__MiscCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__StringAttrList mAuxiliaryCommands;
    bool mAuxiliaryCommands_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TDS__MiscCapabilities::PrivateDPtr::PrivateDPtr()
    : mAuxiliaryCommands_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TDS__MiscCapabilities::setAuxiliaryCommands( const dm::TT__StringAttrList& _auxiliaryCommands )
{
    d_ptr->mAuxiliaryCommands_nil = false;// converter_complextype.cpp:277
    d_ptr->mAuxiliaryCommands = _auxiliaryCommands;
}

dm::TT__StringAttrList dm::TDS__MiscCapabilities::auxiliaryCommands() const
{
    return d_ptr->mAuxiliaryCommands;
}

void dm::TDS__MiscCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TDS__MiscCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TDS__MiscCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("MiscCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList attribs;
    if (!d_ptr->mAuxiliaryCommands_nil) {
        KDSoapValue _valueAuxiliaryCommands(QString::fromLatin1("AuxiliaryCommands"), d_ptr->mAuxiliaryCommands.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("StringAttrList"));// elementargumentserializer.cpp:110
        _valueAuxiliaryCommands.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueAuxiliaryCommands.isNil())
        attribs.append(_valueAuxiliaryCommands);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TDS__MiscCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("AuxiliaryCommands")) {// converter_complextype.cpp:354
            d_ptr->mAuxiliaryCommands.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mAuxiliaryCommands_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TDS__MiscCapabilities::TDS__MiscCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__MiscCapabilities::~TDS__MiscCapabilities()
{
}

dm::TDS__MiscCapabilities::TDS__MiscCapabilities( const dm::TDS__MiscCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__MiscCapabilities&  dm::TDS__MiscCapabilities::operator=( const dm::TDS__MiscCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__PTZNodeExtension2::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__PTZNodeExtension2::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__PTZNodeExtension2::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__PTZNodeExtension2::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__PTZNodeExtension2::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("PTZNodeExtension2"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__PTZNodeExtension2::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__PTZNodeExtension2::TT__PTZNodeExtension2()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__PTZNodeExtension2::~TT__PTZNodeExtension2()
{
}

dm::TT__PTZNodeExtension2::TT__PTZNodeExtension2( const dm::TT__PTZNodeExtension2& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__PTZNodeExtension2&  dm::TT__PTZNodeExtension2::operator=( const dm::TT__PTZNodeExtension2& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetSystemDateAndTime::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__SetDateTimeType mDateTimeType;
    bool mDaylightSavings;
    dm::TT__TimeZone mTimeZone;
    bool mTimeZone_nil;
    dm::TT__DateTime mUTCDateTime;
    bool mUTCDateTime_nil;
};

dm::TDS__SetSystemDateAndTime::PrivateDPtr::PrivateDPtr()
    : mDaylightSavings(false), mTimeZone_nil(true), mUTCDateTime_nil(true)
{
}


void dm::TDS__SetSystemDateAndTime::setDateTimeType( const dm::TT__SetDateTimeType& _dateTimeType )
{
    d_ptr->mDateTimeType = _dateTimeType;
}

dm::TT__SetDateTimeType dm::TDS__SetSystemDateAndTime::dateTimeType() const
{
    return d_ptr->mDateTimeType;
}

void dm::TDS__SetSystemDateAndTime::setDaylightSavings( bool _daylightSavings )
{
    d_ptr->mDaylightSavings = _daylightSavings;
}

bool dm::TDS__SetSystemDateAndTime::daylightSavings() const
{
    return d_ptr->mDaylightSavings;
}

void dm::TDS__SetSystemDateAndTime::setTimeZone( const dm::TT__TimeZone& _timeZone )
{
    d_ptr->mTimeZone_nil = false;// converter_complextype.cpp:277
    d_ptr->mTimeZone = _timeZone;
}

dm::TT__TimeZone dm::TDS__SetSystemDateAndTime::timeZone() const
{
    return d_ptr->mTimeZone;
}

void dm::TDS__SetSystemDateAndTime::setUTCDateTime( const dm::TT__DateTime& _uTCDateTime )
{
    d_ptr->mUTCDateTime_nil = false;// converter_complextype.cpp:277
    d_ptr->mUTCDateTime = _uTCDateTime;
}

dm::TT__DateTime dm::TDS__SetSystemDateAndTime::uTCDateTime() const
{
    return d_ptr->mUTCDateTime;
}

KDSoapValue dm::TDS__SetSystemDateAndTime::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetSystemDateAndTime"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDateTimeType(QString::fromLatin1("DateTimeType"), d_ptr->mDateTimeType.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SetDateTimeType"));// elementargumentserializer.cpp:110
    _valueDateTimeType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDateTimeType.setQualified(true);
    args.append(_valueDateTimeType);// elementargumentserializer.cpp:122
    KDSoapValue _valueDaylightSavings(QString::fromLatin1("DaylightSavings"), QVariant::fromValue(d_ptr->mDaylightSavings), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueDaylightSavings.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDaylightSavings.setQualified(true);
    args.append(_valueDaylightSavings);// elementargumentserializer.cpp:122
    if (!d_ptr->mTimeZone_nil) {
        KDSoapValue _valueTimeZone(d_ptr->mTimeZone.serialize(QString::fromLatin1("TimeZone")));// elementargumentserializer.cpp:102
        _valueTimeZone.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueTimeZone.setQualified(true);
        if (!_valueTimeZone.isNil())
        args.append(_valueTimeZone);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mUTCDateTime_nil) {
        KDSoapValue _valueUTCDateTime(d_ptr->mUTCDateTime.serialize(QString::fromLatin1("UTCDateTime")));// elementargumentserializer.cpp:102
        _valueUTCDateTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueUTCDateTime.setQualified(true);
        if (!_valueUTCDateTime.isNil())
        args.append(_valueUTCDateTime);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__SetSystemDateAndTime::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DateTimeType")) {// converter_complextype.cpp:354
            d_ptr->mDateTimeType.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("DaylightSavings")) {// converter_complextype.cpp:354
            d_ptr->mDaylightSavings = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("TimeZone")) {// converter_complextype.cpp:354
            d_ptr->mTimeZone.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("UTCDateTime")) {// converter_complextype.cpp:354
            d_ptr->mUTCDateTime.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__SetSystemDateAndTime::TDS__SetSystemDateAndTime()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetSystemDateAndTime::~TDS__SetSystemDateAndTime()
{
}

dm::TDS__SetSystemDateAndTime::TDS__SetSystemDateAndTime( const dm::TDS__SetSystemDateAndTime& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetSystemDateAndTime&  dm::TDS__SetSystemDateAndTime::operator=( const dm::TDS__SetSystemDateAndTime& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__CreateCertificate::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCertificateID;
    bool mCertificateID_nil;
    QString mSubject;
    bool mSubject_nil;
    KDDateTime mValidNotBefore;
    bool mValidNotBefore_nil;
    KDDateTime mValidNotAfter;
    bool mValidNotAfter_nil;
};

dm::TDS__CreateCertificate::PrivateDPtr::PrivateDPtr()
    : mCertificateID_nil(true), mSubject_nil(true), mValidNotBefore_nil(true), mValidNotAfter_nil(true)
{
}


void dm::TDS__CreateCertificate::setCertificateID( const QString& _certificateID )
{
    d_ptr->mCertificateID_nil = false;// converter_complextype.cpp:277
    d_ptr->mCertificateID = _certificateID;
}

QString dm::TDS__CreateCertificate::certificateID() const
{
    return d_ptr->mCertificateID;
}

void dm::TDS__CreateCertificate::setSubject( const QString& _subject )
{
    d_ptr->mSubject_nil = false;// converter_complextype.cpp:277
    d_ptr->mSubject = _subject;
}

QString dm::TDS__CreateCertificate::subject() const
{
    return d_ptr->mSubject;
}

void dm::TDS__CreateCertificate::setValidNotBefore( const KDDateTime& _validNotBefore )
{
    d_ptr->mValidNotBefore_nil = false;// converter_complextype.cpp:277
    d_ptr->mValidNotBefore = _validNotBefore;
}

KDDateTime dm::TDS__CreateCertificate::validNotBefore() const
{
    return d_ptr->mValidNotBefore;
}

void dm::TDS__CreateCertificate::setValidNotAfter( const KDDateTime& _validNotAfter )
{
    d_ptr->mValidNotAfter_nil = false;// converter_complextype.cpp:277
    d_ptr->mValidNotAfter = _validNotAfter;
}

KDDateTime dm::TDS__CreateCertificate::validNotAfter() const
{
    return d_ptr->mValidNotAfter;
}

KDSoapValue dm::TDS__CreateCertificate::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("CreateCertificate"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mCertificateID_nil) {
        KDSoapValue _valueCertificateID(QString::fromLatin1("CertificateID"), QVariant::fromValue(d_ptr->mCertificateID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
        _valueCertificateID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueCertificateID.setQualified(true);
        if (!_valueCertificateID.isNil())
        args.append(_valueCertificateID);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSubject_nil) {
        KDSoapValue _valueSubject(QString::fromLatin1("Subject"), QVariant::fromValue(d_ptr->mSubject), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueSubject.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueSubject.setQualified(true);
        if (!_valueSubject.isNil())
        args.append(_valueSubject);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mValidNotBefore_nil) {
        KDSoapValue _valueValidNotBefore(QString::fromLatin1("ValidNotBefore"), d_ptr->mValidNotBefore.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:108
        _valueValidNotBefore.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueValidNotBefore.setQualified(true);
        if (!_valueValidNotBefore.isNil())
        args.append(_valueValidNotBefore);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mValidNotAfter_nil) {
        KDSoapValue _valueValidNotAfter(QString::fromLatin1("ValidNotAfter"), d_ptr->mValidNotAfter.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:108
        _valueValidNotAfter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueValidNotAfter.setQualified(true);
        if (!_valueValidNotAfter.isNil())
        args.append(_valueValidNotAfter);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__CreateCertificate::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateID")) {// converter_complextype.cpp:354
            d_ptr->mCertificateID = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mCertificateID_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Subject")) {// converter_complextype.cpp:354
            d_ptr->mSubject = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mSubject_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("ValidNotBefore")) {// converter_complextype.cpp:354
            d_ptr->mValidNotBefore = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:367
            d_ptr->mValidNotBefore_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("ValidNotAfter")) {// converter_complextype.cpp:354
            d_ptr->mValidNotAfter = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:367
            d_ptr->mValidNotAfter_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TDS__CreateCertificate::TDS__CreateCertificate()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__CreateCertificate::~TDS__CreateCertificate()
{
}

dm::TDS__CreateCertificate::TDS__CreateCertificate( const dm::TDS__CreateCertificate& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__CreateCertificate&  dm::TDS__CreateCertificate::operator=( const dm::TDS__CreateCertificate& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__EventCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    bool mWSSubscriptionPolicySupport;
    bool mWSPullPointSupport;
    bool mWSPausableSubscriptionManagerInterfaceSupport;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__EventCapabilities::PrivateDPtr::PrivateDPtr()
    : mWSSubscriptionPolicySupport(false), mWSPullPointSupport(false), mWSPausableSubscriptionManagerInterfaceSupport(false), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__EventCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__EventCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__EventCapabilities::setWSSubscriptionPolicySupport( bool _wSSubscriptionPolicySupport )
{
    d_ptr->mWSSubscriptionPolicySupport = _wSSubscriptionPolicySupport;
}

bool dm::TT__EventCapabilities::wSSubscriptionPolicySupport() const
{
    return d_ptr->mWSSubscriptionPolicySupport;
}

void dm::TT__EventCapabilities::setWSPullPointSupport( bool _wSPullPointSupport )
{
    d_ptr->mWSPullPointSupport = _wSPullPointSupport;
}

bool dm::TT__EventCapabilities::wSPullPointSupport() const
{
    return d_ptr->mWSPullPointSupport;
}

void dm::TT__EventCapabilities::setWSPausableSubscriptionManagerInterfaceSupport( bool _wSPausableSubscriptionManagerInterfaceSupport )
{
    d_ptr->mWSPausableSubscriptionManagerInterfaceSupport = _wSPausableSubscriptionManagerInterfaceSupport;
}

bool dm::TT__EventCapabilities::wSPausableSubscriptionManagerInterfaceSupport() const
{
    return d_ptr->mWSPausableSubscriptionManagerInterfaceSupport;
}

void dm::TT__EventCapabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__EventCapabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__EventCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__EventCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__EventCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("EventCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    KDSoapValue _valueWSSubscriptionPolicySupport(QString::fromLatin1("WSSubscriptionPolicySupport"), QVariant::fromValue(d_ptr->mWSSubscriptionPolicySupport), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueWSSubscriptionPolicySupport.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueWSSubscriptionPolicySupport.setQualified(true);
    args.append(_valueWSSubscriptionPolicySupport);// elementargumentserializer.cpp:122
    KDSoapValue _valueWSPullPointSupport(QString::fromLatin1("WSPullPointSupport"), QVariant::fromValue(d_ptr->mWSPullPointSupport), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueWSPullPointSupport.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueWSPullPointSupport.setQualified(true);
    args.append(_valueWSPullPointSupport);// elementargumentserializer.cpp:122
    KDSoapValue _valueWSPausableSubscriptionManagerInterfaceSupport(QString::fromLatin1("WSPausableSubscriptionManagerInterfaceSupport"), QVariant::fromValue(d_ptr->mWSPausableSubscriptionManagerInterfaceSupport), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueWSPausableSubscriptionManagerInterfaceSupport.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueWSPausableSubscriptionManagerInterfaceSupport.setQualified(true);
    args.append(_valueWSPausableSubscriptionManagerInterfaceSupport);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__EventCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("WSSubscriptionPolicySupport")) {// converter_complextype.cpp:354
            d_ptr->mWSSubscriptionPolicySupport = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("WSPullPointSupport")) {// converter_complextype.cpp:354
            d_ptr->mWSPullPointSupport = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("WSPausableSubscriptionManagerInterfaceSupport")) {// converter_complextype.cpp:354
            d_ptr->mWSPausableSubscriptionManagerInterfaceSupport = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__EventCapabilities::TT__EventCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__EventCapabilities::~TT__EventCapabilities()
{
}

dm::TT__EventCapabilities::TT__EventCapabilities( const dm::TT__EventCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__EventCapabilities&  dm::TT__EventCapabilities::operator=( const dm::TT__EventCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__ScanAvailableDot11Networks::PrivateDPtr : public QSharedData
{
public:
    dm::TT__ReferenceToken mInterfaceToken;
};

void dm::TDS__ScanAvailableDot11Networks::setInterfaceToken( const dm::TT__ReferenceToken& _interfaceToken )
{
    d_ptr->mInterfaceToken = _interfaceToken;
}

dm::TT__ReferenceToken dm::TDS__ScanAvailableDot11Networks::interfaceToken() const
{
    return d_ptr->mInterfaceToken;
}

KDSoapValue dm::TDS__ScanAvailableDot11Networks::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("ScanAvailableDot11Networks"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueInterfaceToken(QString::fromLatin1("InterfaceToken"), d_ptr->mInterfaceToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueInterfaceToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueInterfaceToken.setQualified(true);
    args.append(_valueInterfaceToken);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__ScanAvailableDot11Networks::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("InterfaceToken")) {// converter_complextype.cpp:354
            d_ptr->mInterfaceToken.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__ScanAvailableDot11Networks::TDS__ScanAvailableDot11Networks()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__ScanAvailableDot11Networks::~TDS__ScanAvailableDot11Networks()
{
}

dm::TDS__ScanAvailableDot11Networks::TDS__ScanAvailableDot11Networks( const dm::TDS__ScanAvailableDot11Networks& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__ScanAvailableDot11Networks&  dm::TDS__ScanAvailableDot11Networks::operator=( const dm::TDS__ScanAvailableDot11Networks& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__AddIPAddressFilter::PrivateDPtr : public QSharedData
{
public:
    dm::TT__IPAddressFilter mIPAddressFilter;
};

void dm::TDS__AddIPAddressFilter::setIPAddressFilter( const dm::TT__IPAddressFilter& _iPAddressFilter )
{
    d_ptr->mIPAddressFilter = _iPAddressFilter;
}

dm::TT__IPAddressFilter dm::TDS__AddIPAddressFilter::iPAddressFilter() const
{
    return d_ptr->mIPAddressFilter;
}

KDSoapValue dm::TDS__AddIPAddressFilter::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("AddIPAddressFilter"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueIPAddressFilter(d_ptr->mIPAddressFilter.serialize(QString::fromLatin1("IPAddressFilter")));// elementargumentserializer.cpp:102
    _valueIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueIPAddressFilter.setQualified(true);
    args.append(_valueIPAddressFilter);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__AddIPAddressFilter::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("IPAddressFilter")) {// converter_complextype.cpp:354
            d_ptr->mIPAddressFilter.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__AddIPAddressFilter::TDS__AddIPAddressFilter()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__AddIPAddressFilter::~TDS__AddIPAddressFilter()
{
}

dm::TDS__AddIPAddressFilter::TDS__AddIPAddressFilter( const dm::TDS__AddIPAddressFilter& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__AddIPAddressFilter&  dm::TDS__AddIPAddressFilter::operator=( const dm::TDS__AddIPAddressFilter& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__DeviceCapabilitiesExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__DeviceCapabilitiesExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__DeviceCapabilitiesExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__DeviceCapabilitiesExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__DeviceCapabilitiesExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DeviceCapabilitiesExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__DeviceCapabilitiesExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__DeviceCapabilitiesExtension::TT__DeviceCapabilitiesExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DeviceCapabilitiesExtension::~TT__DeviceCapabilitiesExtension()
{
}

dm::TT__DeviceCapabilitiesExtension::TT__DeviceCapabilitiesExtension( const dm::TT__DeviceCapabilitiesExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__DeviceCapabilitiesExtension&  dm::TT__DeviceCapabilitiesExtension::operator=( const dm::TT__DeviceCapabilitiesExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetUsersResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__User > mUser;
    bool mUser_nil;
};

dm::TDS__GetUsersResponse::PrivateDPtr::PrivateDPtr()
    : mUser_nil(true)
{
}


void dm::TDS__GetUsersResponse::setUser( const QList< dm::TT__User >& _user )
{
    d_ptr->mUser_nil = false;// converter_complextype.cpp:277
    d_ptr->mUser = _user;
}

QList< dm::TT__User > dm::TDS__GetUsersResponse::user() const
{
    return d_ptr->mUser;
}

KDSoapValue dm::TDS__GetUsersResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetUsersResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mUser.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueUser(d_ptr->mUser.at(i).serialize(QString::fromLatin1("User")));// elementargumentserializer.cpp:102
        _valueUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueUser.setQualified(true);
        args.append(_valueUser);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetUsersResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("User")) {// converter_complextype.cpp:354
            dm::TT__User mUserTemp;// converter_complextype.cpp:412
            mUserTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mUser.append(mUserTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetUsersResponse::TDS__GetUsersResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetUsersResponse::~TDS__GetUsersResponse()
{
}

dm::TDS__GetUsersResponse::TDS__GetUsersResponse( const dm::TDS__GetUsersResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetUsersResponse&  dm::TDS__GetUsersResponse::operator=( const dm::TDS__GetUsersResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetHostnameFromDHCP::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mFromDHCP;
};

dm::TDS__SetHostnameFromDHCP::PrivateDPtr::PrivateDPtr()
    : mFromDHCP(false)
{
}


void dm::TDS__SetHostnameFromDHCP::setFromDHCP( bool _fromDHCP )
{
    d_ptr->mFromDHCP = _fromDHCP;
}

bool dm::TDS__SetHostnameFromDHCP::fromDHCP() const
{
    return d_ptr->mFromDHCP;
}

KDSoapValue dm::TDS__SetHostnameFromDHCP::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetHostnameFromDHCP"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueFromDHCP(QString::fromLatin1("FromDHCP"), QVariant::fromValue(d_ptr->mFromDHCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueFromDHCP.setQualified(true);
    args.append(_valueFromDHCP);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetHostnameFromDHCP::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("FromDHCP")) {// converter_complextype.cpp:354
            d_ptr->mFromDHCP = val.value().value<bool>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__SetHostnameFromDHCP::TDS__SetHostnameFromDHCP()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetHostnameFromDHCP::~TDS__SetHostnameFromDHCP()
{
}

dm::TDS__SetHostnameFromDHCP::TDS__SetHostnameFromDHCP( const dm::TDS__SetHostnameFromDHCP& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetHostnameFromDHCP&  dm::TDS__SetHostnameFromDHCP::operator=( const dm::TDS__SetHostnameFromDHCP& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__LoadCertificates::PrivateDPtr : public QSharedData
{
public:
    QList< dm::TT__Certificate > mNVTCertificate;
};

void dm::TDS__LoadCertificates::setNVTCertificate( const QList< dm::TT__Certificate >& _nVTCertificate )
{
    d_ptr->mNVTCertificate = _nVTCertificate;
}

QList< dm::TT__Certificate > dm::TDS__LoadCertificates::nVTCertificate() const
{
    return d_ptr->mNVTCertificate;
}

KDSoapValue dm::TDS__LoadCertificates::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("LoadCertificates"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mNVTCertificate.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueNVTCertificate(d_ptr->mNVTCertificate.at(i).serialize(QString::fromLatin1("NVTCertificate")));// elementargumentserializer.cpp:102
        _valueNVTCertificate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueNVTCertificate.setQualified(true);
        args.append(_valueNVTCertificate);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__LoadCertificates::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("NVTCertificate")) {// converter_complextype.cpp:354
            dm::TT__Certificate mNVTCertificateTemp;// converter_complextype.cpp:412
            mNVTCertificateTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mNVTCertificate.append(mNVTCertificateTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__LoadCertificates::TDS__LoadCertificates()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__LoadCertificates::~TDS__LoadCertificates()
{
}

dm::TDS__LoadCertificates::TDS__LoadCertificates( const dm::TDS__LoadCertificates& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__LoadCertificates&  dm::TDS__LoadCertificates::operator=( const dm::TDS__LoadCertificates& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetScopes::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetScopes"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetScopes::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetScopes::TDS__GetScopes()
{
}

dm::TDS__GetScopes::~TDS__GetScopes()
{
}


KDSoapValue dm::TDS__SetRemoteUserResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetRemoteUserResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetRemoteUserResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetRemoteUserResponse::TDS__SetRemoteUserResponse()
{
}

dm::TDS__SetRemoteUserResponse::~TDS__SetRemoteUserResponse()
{
}


class dm::TT__ImagingSettings::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__BacklightCompensation mBacklightCompensation;
    bool mBacklightCompensation_nil;
    float mBrightness;
    bool mBrightness_nil;
    float mColorSaturation;
    bool mColorSaturation_nil;
    float mContrast;
    bool mContrast_nil;
    dm::TT__Exposure mExposure;
    bool mExposure_nil;
    dm::TT__FocusConfiguration mFocus;
    bool mFocus_nil;
    dm::TT__IrCutFilterMode mIrCutFilter;
    bool mIrCutFilter_nil;
    float mSharpness;
    bool mSharpness_nil;
    dm::TT__WideDynamicRange mWideDynamicRange;
    bool mWideDynamicRange_nil;
    dm::TT__WhiteBalance mWhiteBalance;
    bool mWhiteBalance_nil;
    dm::TT__ImagingSettingsExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__ImagingSettings::PrivateDPtr::PrivateDPtr()
    : mBacklightCompensation_nil(true), mBrightness(0), mBrightness_nil(true), mColorSaturation(0), mColorSaturation_nil(true), mContrast(0), mContrast_nil(true), mExposure_nil(true), mFocus_nil(true), mIrCutFilter_nil(true), mSharpness(0), mSharpness_nil(true), mWideDynamicRange_nil(true), mWhiteBalance_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__ImagingSettings::setBacklightCompensation( const dm::TT__BacklightCompensation& _backlightCompensation )
{
    d_ptr->mBacklightCompensation_nil = false;// converter_complextype.cpp:277
    d_ptr->mBacklightCompensation = _backlightCompensation;
}

dm::TT__BacklightCompensation dm::TT__ImagingSettings::backlightCompensation() const
{
    return d_ptr->mBacklightCompensation;
}

void dm::TT__ImagingSettings::setBrightness( float _brightness )
{
    d_ptr->mBrightness_nil = false;// converter_complextype.cpp:277
    d_ptr->mBrightness = _brightness;
}

float dm::TT__ImagingSettings::brightness() const
{
    return d_ptr->mBrightness;
}

void dm::TT__ImagingSettings::setColorSaturation( float _colorSaturation )
{
    d_ptr->mColorSaturation_nil = false;// converter_complextype.cpp:277
    d_ptr->mColorSaturation = _colorSaturation;
}

float dm::TT__ImagingSettings::colorSaturation() const
{
    return d_ptr->mColorSaturation;
}

void dm::TT__ImagingSettings::setContrast( float _contrast )
{
    d_ptr->mContrast_nil = false;// converter_complextype.cpp:277
    d_ptr->mContrast = _contrast;
}

float dm::TT__ImagingSettings::contrast() const
{
    return d_ptr->mContrast;
}

void dm::TT__ImagingSettings::setExposure( const dm::TT__Exposure& _exposure )
{
    d_ptr->mExposure_nil = false;// converter_complextype.cpp:277
    d_ptr->mExposure = _exposure;
}

dm::TT__Exposure dm::TT__ImagingSettings::exposure() const
{
    return d_ptr->mExposure;
}

void dm::TT__ImagingSettings::setFocus( const dm::TT__FocusConfiguration& _focus )
{
    d_ptr->mFocus_nil = false;// converter_complextype.cpp:277
    d_ptr->mFocus = _focus;
}

dm::TT__FocusConfiguration dm::TT__ImagingSettings::focus() const
{
    return d_ptr->mFocus;
}

void dm::TT__ImagingSettings::setIrCutFilter( const dm::TT__IrCutFilterMode& _irCutFilter )
{
    d_ptr->mIrCutFilter_nil = false;// converter_complextype.cpp:277
    d_ptr->mIrCutFilter = _irCutFilter;
}

dm::TT__IrCutFilterMode dm::TT__ImagingSettings::irCutFilter() const
{
    return d_ptr->mIrCutFilter;
}

void dm::TT__ImagingSettings::setSharpness( float _sharpness )
{
    d_ptr->mSharpness_nil = false;// converter_complextype.cpp:277
    d_ptr->mSharpness = _sharpness;
}

float dm::TT__ImagingSettings::sharpness() const
{
    return d_ptr->mSharpness;
}

void dm::TT__ImagingSettings::setWideDynamicRange( const dm::TT__WideDynamicRange& _wideDynamicRange )
{
    d_ptr->mWideDynamicRange_nil = false;// converter_complextype.cpp:277
    d_ptr->mWideDynamicRange = _wideDynamicRange;
}

dm::TT__WideDynamicRange dm::TT__ImagingSettings::wideDynamicRange() const
{
    return d_ptr->mWideDynamicRange;
}

void dm::TT__ImagingSettings::setWhiteBalance( const dm::TT__WhiteBalance& _whiteBalance )
{
    d_ptr->mWhiteBalance_nil = false;// converter_complextype.cpp:277
    d_ptr->mWhiteBalance = _whiteBalance;
}

dm::TT__WhiteBalance dm::TT__ImagingSettings::whiteBalance() const
{
    return d_ptr->mWhiteBalance;
}

void dm::TT__ImagingSettings::setExtension( const dm::TT__ImagingSettingsExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__ImagingSettingsExtension dm::TT__ImagingSettings::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__ImagingSettings::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__ImagingSettings::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__ImagingSettings::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ImagingSettings"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mBacklightCompensation_nil) {
        KDSoapValue _valueBacklightCompensation(d_ptr->mBacklightCompensation.serialize(QString::fromLatin1("BacklightCompensation")));// elementargumentserializer.cpp:102
        _valueBacklightCompensation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueBacklightCompensation.setQualified(true);
        if (!_valueBacklightCompensation.isNil())
        args.append(_valueBacklightCompensation);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mBrightness_nil) {
        KDSoapValue _valueBrightness(QString::fromLatin1("Brightness"), QVariant::fromValue(d_ptr->mBrightness), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueBrightness.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueBrightness.setQualified(true);
        if (!_valueBrightness.isNil())
        args.append(_valueBrightness);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mColorSaturation_nil) {
        KDSoapValue _valueColorSaturation(QString::fromLatin1("ColorSaturation"), QVariant::fromValue(d_ptr->mColorSaturation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueColorSaturation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueColorSaturation.setQualified(true);
        if (!_valueColorSaturation.isNil())
        args.append(_valueColorSaturation);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mContrast_nil) {
        KDSoapValue _valueContrast(QString::fromLatin1("Contrast"), QVariant::fromValue(d_ptr->mContrast), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueContrast.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueContrast.setQualified(true);
        if (!_valueContrast.isNil())
        args.append(_valueContrast);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExposure_nil) {
        KDSoapValue _valueExposure(d_ptr->mExposure.serialize(QString::fromLatin1("Exposure")));// elementargumentserializer.cpp:102
        _valueExposure.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExposure.setQualified(true);
        if (!_valueExposure.isNil())
        args.append(_valueExposure);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mFocus_nil) {
        KDSoapValue _valueFocus(d_ptr->mFocus.serialize(QString::fromLatin1("Focus")));// elementargumentserializer.cpp:102
        _valueFocus.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueFocus.setQualified(true);
        if (!_valueFocus.isNil())
        args.append(_valueFocus);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mIrCutFilter_nil) {
        KDSoapValue _valueIrCutFilter(QString::fromLatin1("IrCutFilter"), d_ptr->mIrCutFilter.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IrCutFilterMode"));// elementargumentserializer.cpp:110
        _valueIrCutFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIrCutFilter.setQualified(true);
        if (!_valueIrCutFilter.isNil())
        args.append(_valueIrCutFilter);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSharpness_nil) {
        KDSoapValue _valueSharpness(QString::fromLatin1("Sharpness"), QVariant::fromValue(d_ptr->mSharpness), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueSharpness.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSharpness.setQualified(true);
        if (!_valueSharpness.isNil())
        args.append(_valueSharpness);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mWideDynamicRange_nil) {
        KDSoapValue _valueWideDynamicRange(d_ptr->mWideDynamicRange.serialize(QString::fromLatin1("WideDynamicRange")));// elementargumentserializer.cpp:102
        _valueWideDynamicRange.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueWideDynamicRange.setQualified(true);
        if (!_valueWideDynamicRange.isNil())
        args.append(_valueWideDynamicRange);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mWhiteBalance_nil) {
        KDSoapValue _valueWhiteBalance(d_ptr->mWhiteBalance.serialize(QString::fromLatin1("WhiteBalance")));// elementargumentserializer.cpp:102
        _valueWhiteBalance.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueWhiteBalance.setQualified(true);
        if (!_valueWhiteBalance.isNil())
        args.append(_valueWhiteBalance);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__ImagingSettings::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("BacklightCompensation")) {// converter_complextype.cpp:354
            d_ptr->mBacklightCompensation.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Brightness")) {// converter_complextype.cpp:354
            d_ptr->mBrightness = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mBrightness_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("ColorSaturation")) {// converter_complextype.cpp:354
            d_ptr->mColorSaturation = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mColorSaturation_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Contrast")) {// converter_complextype.cpp:354
            d_ptr->mContrast = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mContrast_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Exposure")) {// converter_complextype.cpp:354
            d_ptr->mExposure.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Focus")) {// converter_complextype.cpp:354
            d_ptr->mFocus.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("IrCutFilter")) {// converter_complextype.cpp:354
            d_ptr->mIrCutFilter.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mIrCutFilter_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("Sharpness")) {// converter_complextype.cpp:354
            d_ptr->mSharpness = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mSharpness_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("WideDynamicRange")) {// converter_complextype.cpp:354
            d_ptr->mWideDynamicRange.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("WhiteBalance")) {// converter_complextype.cpp:354
            d_ptr->mWhiteBalance.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__ImagingSettings::TT__ImagingSettings()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ImagingSettings::~TT__ImagingSettings()
{
}

dm::TT__ImagingSettings::TT__ImagingSettings( const dm::TT__ImagingSettings& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ImagingSettings&  dm::TT__ImagingSettings::operator=( const dm::TT__ImagingSettings& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__StartSystemRestore::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("StartSystemRestore"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__StartSystemRestore::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__StartSystemRestore::TDS__StartSystemRestore()
{
}

dm::TDS__StartSystemRestore::~TDS__StartSystemRestore()
{
}


class dm::TT__BacklightCompensation::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__BacklightCompensationMode mMode;
    float mLevel;
};

dm::TT__BacklightCompensation::PrivateDPtr::PrivateDPtr()
    : mLevel(0)
{
}


void dm::TT__BacklightCompensation::setMode( const dm::TT__BacklightCompensationMode& _mode )
{
    d_ptr->mMode = _mode;
}

dm::TT__BacklightCompensationMode dm::TT__BacklightCompensation::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__BacklightCompensation::setLevel( float _level )
{
    d_ptr->mLevel = _level;
}

float dm::TT__BacklightCompensation::level() const
{
    return d_ptr->mLevel;
}

KDSoapValue dm::TT__BacklightCompensation::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("BacklightCompensation"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), d_ptr->mMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("BacklightCompensationMode"));// elementargumentserializer.cpp:110
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    KDSoapValue _valueLevel(QString::fromLatin1("Level"), QVariant::fromValue(d_ptr->mLevel), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueLevel.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueLevel.setQualified(true);
    args.append(_valueLevel);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__BacklightCompensation::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Level")) {// converter_complextype.cpp:354
            d_ptr->mLevel = val.value().value<float>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__BacklightCompensation::TT__BacklightCompensation()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__BacklightCompensation::~TT__BacklightCompensation()
{
}

dm::TT__BacklightCompensation::TT__BacklightCompensation( const dm::TT__BacklightCompensation& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__BacklightCompensation&  dm::TT__BacklightCompensation::operator=( const dm::TT__BacklightCompensation& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__IrCutFilterAutoAdjustmentExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__IrCutFilterAutoAdjustmentExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__IrCutFilterAutoAdjustmentExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__IrCutFilterAutoAdjustmentExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__IrCutFilterAutoAdjustmentExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IrCutFilterAutoAdjustmentExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__IrCutFilterAutoAdjustmentExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__IrCutFilterAutoAdjustmentExtension::TT__IrCutFilterAutoAdjustmentExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IrCutFilterAutoAdjustmentExtension::~TT__IrCutFilterAutoAdjustmentExtension()
{
}

dm::TT__IrCutFilterAutoAdjustmentExtension::TT__IrCutFilterAutoAdjustmentExtension( const dm::TT__IrCutFilterAutoAdjustmentExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IrCutFilterAutoAdjustmentExtension&  dm::TT__IrCutFilterAutoAdjustmentExtension::operator=( const dm::TT__IrCutFilterAutoAdjustmentExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Dot11Configuration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__Dot11SSIDType mSSID;
    dm::TT__Dot11StationMode mMode;
    dm::TT__Name mAlias;
    dm::TT__NetworkInterfaceConfigPriority mPriority;
    dm::TT__Dot11SecurityConfiguration mSecurity;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__Dot11Configuration::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__Dot11Configuration::setSSID( const dm::TT__Dot11SSIDType& _sSID )
{
    d_ptr->mSSID = _sSID;
}

dm::TT__Dot11SSIDType dm::TT__Dot11Configuration::sSID() const
{
    return d_ptr->mSSID;
}

void dm::TT__Dot11Configuration::setMode( const dm::TT__Dot11StationMode& _mode )
{
    d_ptr->mMode = _mode;
}

dm::TT__Dot11StationMode dm::TT__Dot11Configuration::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__Dot11Configuration::setAlias( const dm::TT__Name& _alias )
{
    d_ptr->mAlias = _alias;
}

dm::TT__Name dm::TT__Dot11Configuration::alias() const
{
    return d_ptr->mAlias;
}

void dm::TT__Dot11Configuration::setPriority( const dm::TT__NetworkInterfaceConfigPriority& _priority )
{
    d_ptr->mPriority = _priority;
}

dm::TT__NetworkInterfaceConfigPriority dm::TT__Dot11Configuration::priority() const
{
    return d_ptr->mPriority;
}

void dm::TT__Dot11Configuration::setSecurity( const dm::TT__Dot11SecurityConfiguration& _security )
{
    d_ptr->mSecurity = _security;
}

dm::TT__Dot11SecurityConfiguration dm::TT__Dot11Configuration::security() const
{
    return d_ptr->mSecurity;
}

void dm::TT__Dot11Configuration::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__Dot11Configuration::any() const
{
    return d_ptr->mAny;
}

void dm::TT__Dot11Configuration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__Dot11Configuration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__Dot11Configuration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11Configuration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueSSID(QString::fromLatin1("SSID"), d_ptr->mSSID.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11SSIDType"));// elementargumentserializer.cpp:110
    _valueSSID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueSSID.setQualified(true);
    args.append(_valueSSID);// elementargumentserializer.cpp:122
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), d_ptr->mMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11StationMode"));// elementargumentserializer.cpp:110
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    KDSoapValue _valueAlias(QString::fromLatin1("Alias"), d_ptr->mAlias.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Name"));// elementargumentserializer.cpp:110
    _valueAlias.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueAlias.setQualified(true);
    args.append(_valueAlias);// elementargumentserializer.cpp:122
    KDSoapValue _valuePriority(QString::fromLatin1("Priority"), d_ptr->mPriority.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkInterfaceConfigPriority"));// elementargumentserializer.cpp:110
    _valuePriority.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valuePriority.setQualified(true);
    args.append(_valuePriority);// elementargumentserializer.cpp:122
    KDSoapValue _valueSecurity(d_ptr->mSecurity.serialize(QString::fromLatin1("Security")));// elementargumentserializer.cpp:102
    _valueSecurity.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueSecurity.setQualified(true);
    args.append(_valueSecurity);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Dot11Configuration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("SSID")) {// converter_complextype.cpp:354
            d_ptr->mSSID.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Alias")) {// converter_complextype.cpp:354
            d_ptr->mAlias.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Priority")) {// converter_complextype.cpp:354
            d_ptr->mPriority.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Security")) {// converter_complextype.cpp:354
            d_ptr->mSecurity.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__Dot11Configuration::TT__Dot11Configuration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Dot11Configuration::~TT__Dot11Configuration()
{
}

dm::TT__Dot11Configuration::TT__Dot11Configuration( const dm::TT__Dot11Configuration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Dot11Configuration&  dm::TT__Dot11Configuration::operator=( const dm::TT__Dot11Configuration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__CertificateStatus::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCertificateID;
    bool mStatus;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__CertificateStatus::PrivateDPtr::PrivateDPtr()
    : mStatus(false), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__CertificateStatus::setCertificateID( const QString& _certificateID )
{
    d_ptr->mCertificateID = _certificateID;
}

QString dm::TT__CertificateStatus::certificateID() const
{
    return d_ptr->mCertificateID;
}

void dm::TT__CertificateStatus::setStatus( bool _status )
{
    d_ptr->mStatus = _status;
}

bool dm::TT__CertificateStatus::status() const
{
    return d_ptr->mStatus;
}

void dm::TT__CertificateStatus::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__CertificateStatus::any() const
{
    return d_ptr->mAny;
}

void dm::TT__CertificateStatus::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__CertificateStatus::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__CertificateStatus::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("CertificateStatus"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueCertificateID(QString::fromLatin1("CertificateID"), QVariant::fromValue(d_ptr->mCertificateID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
    _valueCertificateID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueCertificateID.setQualified(true);
    args.append(_valueCertificateID);// elementargumentserializer.cpp:122
    KDSoapValue _valueStatus(QString::fromLatin1("Status"), QVariant::fromValue(d_ptr->mStatus), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueStatus.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueStatus.setQualified(true);
    args.append(_valueStatus);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__CertificateStatus::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateID")) {// converter_complextype.cpp:354
            d_ptr->mCertificateID = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Status")) {// converter_complextype.cpp:354
            d_ptr->mStatus = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__CertificateStatus::TT__CertificateStatus()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__CertificateStatus::~TT__CertificateStatus()
{
}

dm::TT__CertificateStatus::TT__CertificateStatus( const dm::TT__CertificateStatus& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__CertificateStatus&  dm::TT__CertificateStatus::operator=( const dm::TT__CertificateStatus& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetDiscoveryMode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDiscoveryMode"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetDiscoveryMode::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetDiscoveryMode::TDS__GetDiscoveryMode()
{
}

dm::TDS__GetDiscoveryMode::~TDS__GetDiscoveryMode()
{
}


class dm::TDS__GetZeroConfigurationResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__NetworkZeroConfiguration mZeroConfiguration;
};

void dm::TDS__GetZeroConfigurationResponse::setZeroConfiguration( const dm::TT__NetworkZeroConfiguration& _zeroConfiguration )
{
    d_ptr->mZeroConfiguration = _zeroConfiguration;
}

dm::TT__NetworkZeroConfiguration dm::TDS__GetZeroConfigurationResponse::zeroConfiguration() const
{
    return d_ptr->mZeroConfiguration;
}

KDSoapValue dm::TDS__GetZeroConfigurationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetZeroConfigurationResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueZeroConfiguration(d_ptr->mZeroConfiguration.serialize(QString::fromLatin1("ZeroConfiguration")));// elementargumentserializer.cpp:102
    _valueZeroConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueZeroConfiguration.setQualified(true);
    args.append(_valueZeroConfiguration);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetZeroConfigurationResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ZeroConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mZeroConfiguration.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetZeroConfigurationResponse::TDS__GetZeroConfigurationResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetZeroConfigurationResponse::~TDS__GetZeroConfigurationResponse()
{
}

dm::TDS__GetZeroConfigurationResponse::TDS__GetZeroConfigurationResponse( const dm::TDS__GetZeroConfigurationResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetZeroConfigurationResponse&  dm::TDS__GetZeroConfigurationResponse::operator=( const dm::TDS__GetZeroConfigurationResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__RecordingCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    bool mReceiverSource;
    bool mMediaProfileSource;
    bool mDynamicRecordings;
    bool mDynamicTracks;
    int mMaxStringLength;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__RecordingCapabilities::PrivateDPtr::PrivateDPtr()
    : mReceiverSource(false), mMediaProfileSource(false), mDynamicRecordings(false), mDynamicTracks(false), mMaxStringLength(0), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__RecordingCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__RecordingCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__RecordingCapabilities::setReceiverSource( bool _receiverSource )
{
    d_ptr->mReceiverSource = _receiverSource;
}

bool dm::TT__RecordingCapabilities::receiverSource() const
{
    return d_ptr->mReceiverSource;
}

void dm::TT__RecordingCapabilities::setMediaProfileSource( bool _mediaProfileSource )
{
    d_ptr->mMediaProfileSource = _mediaProfileSource;
}

bool dm::TT__RecordingCapabilities::mediaProfileSource() const
{
    return d_ptr->mMediaProfileSource;
}

void dm::TT__RecordingCapabilities::setDynamicRecordings( bool _dynamicRecordings )
{
    d_ptr->mDynamicRecordings = _dynamicRecordings;
}

bool dm::TT__RecordingCapabilities::dynamicRecordings() const
{
    return d_ptr->mDynamicRecordings;
}

void dm::TT__RecordingCapabilities::setDynamicTracks( bool _dynamicTracks )
{
    d_ptr->mDynamicTracks = _dynamicTracks;
}

bool dm::TT__RecordingCapabilities::dynamicTracks() const
{
    return d_ptr->mDynamicTracks;
}

void dm::TT__RecordingCapabilities::setMaxStringLength( int _maxStringLength )
{
    d_ptr->mMaxStringLength = _maxStringLength;
}

int dm::TT__RecordingCapabilities::maxStringLength() const
{
    return d_ptr->mMaxStringLength;
}

void dm::TT__RecordingCapabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__RecordingCapabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__RecordingCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__RecordingCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__RecordingCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("RecordingCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    KDSoapValue _valueReceiverSource(QString::fromLatin1("ReceiverSource"), QVariant::fromValue(d_ptr->mReceiverSource), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueReceiverSource.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueReceiverSource.setQualified(true);
    args.append(_valueReceiverSource);// elementargumentserializer.cpp:122
    KDSoapValue _valueMediaProfileSource(QString::fromLatin1("MediaProfileSource"), QVariant::fromValue(d_ptr->mMediaProfileSource), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueMediaProfileSource.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMediaProfileSource.setQualified(true);
    args.append(_valueMediaProfileSource);// elementargumentserializer.cpp:122
    KDSoapValue _valueDynamicRecordings(QString::fromLatin1("DynamicRecordings"), QVariant::fromValue(d_ptr->mDynamicRecordings), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueDynamicRecordings.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDynamicRecordings.setQualified(true);
    args.append(_valueDynamicRecordings);// elementargumentserializer.cpp:122
    KDSoapValue _valueDynamicTracks(QString::fromLatin1("DynamicTracks"), QVariant::fromValue(d_ptr->mDynamicTracks), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueDynamicTracks.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDynamicTracks.setQualified(true);
    args.append(_valueDynamicTracks);// elementargumentserializer.cpp:122
    KDSoapValue _valueMaxStringLength(QString::fromLatin1("MaxStringLength"), QVariant::fromValue(d_ptr->mMaxStringLength), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueMaxStringLength.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMaxStringLength.setQualified(true);
    args.append(_valueMaxStringLength);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__RecordingCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("ReceiverSource")) {// converter_complextype.cpp:354
            d_ptr->mReceiverSource = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("MediaProfileSource")) {// converter_complextype.cpp:354
            d_ptr->mMediaProfileSource = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("DynamicRecordings")) {// converter_complextype.cpp:354
            d_ptr->mDynamicRecordings = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("DynamicTracks")) {// converter_complextype.cpp:354
            d_ptr->mDynamicTracks = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("MaxStringLength")) {// converter_complextype.cpp:354
            d_ptr->mMaxStringLength = val.value().value<int>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__RecordingCapabilities::TT__RecordingCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__RecordingCapabilities::~TT__RecordingCapabilities()
{
}

dm::TT__RecordingCapabilities::TT__RecordingCapabilities( const dm::TT__RecordingCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__RecordingCapabilities&  dm::TT__RecordingCapabilities::operator=( const dm::TT__RecordingCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Dot11SecurityConfigurationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__Dot11SecurityConfigurationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__Dot11SecurityConfigurationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__Dot11SecurityConfigurationExtension::any() const
{
    return d_ptr->mAny;
}

void dm::TT__Dot11SecurityConfigurationExtension::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__Dot11SecurityConfigurationExtension::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__Dot11SecurityConfigurationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11SecurityConfigurationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Dot11SecurityConfigurationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__Dot11SecurityConfigurationExtension::TT__Dot11SecurityConfigurationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Dot11SecurityConfigurationExtension::~TT__Dot11SecurityConfigurationExtension()
{
}

dm::TT__Dot11SecurityConfigurationExtension::TT__Dot11SecurityConfigurationExtension( const dm::TT__Dot11SecurityConfigurationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Dot11SecurityConfigurationExtension&  dm::TT__Dot11SecurityConfigurationExtension::operator=( const dm::TT__Dot11SecurityConfigurationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__StartSystemRestoreResponse::PrivateDPtr : public QSharedData
{
public:
    QString mUploadUri;
    QString mExpectedDownTime;
};

void dm::TDS__StartSystemRestoreResponse::setUploadUri( const QString& _uploadUri )
{
    d_ptr->mUploadUri = _uploadUri;
}

QString dm::TDS__StartSystemRestoreResponse::uploadUri() const
{
    return d_ptr->mUploadUri;
}

void dm::TDS__StartSystemRestoreResponse::setExpectedDownTime( const QString& _expectedDownTime )
{
    d_ptr->mExpectedDownTime = _expectedDownTime;
}

QString dm::TDS__StartSystemRestoreResponse::expectedDownTime() const
{
    return d_ptr->mExpectedDownTime;
}

KDSoapValue dm::TDS__StartSystemRestoreResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("StartSystemRestoreResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueUploadUri(QString::fromLatin1("UploadUri"), QVariant::fromValue(d_ptr->mUploadUri), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueUploadUri.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueUploadUri.setQualified(true);
    args.append(_valueUploadUri);// elementargumentserializer.cpp:122
    KDSoapValue _valueExpectedDownTime(QString::fromLatin1("ExpectedDownTime"), QVariant::fromValue(d_ptr->mExpectedDownTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// elementargumentserializer.cpp:108
    _valueExpectedDownTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueExpectedDownTime.setQualified(true);
    args.append(_valueExpectedDownTime);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__StartSystemRestoreResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("UploadUri")) {// converter_complextype.cpp:354
            d_ptr->mUploadUri = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("ExpectedDownTime")) {// converter_complextype.cpp:354
            d_ptr->mExpectedDownTime = val.value().value<QString>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__StartSystemRestoreResponse::TDS__StartSystemRestoreResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__StartSystemRestoreResponse::~TDS__StartSystemRestoreResponse()
{
}

dm::TDS__StartSystemRestoreResponse::TDS__StartSystemRestoreResponse( const dm::TDS__StartSystemRestoreResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__StartSystemRestoreResponse&  dm::TDS__StartSystemRestoreResponse::operator=( const dm::TDS__StartSystemRestoreResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkHostExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__NetworkHostExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__NetworkHostExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__NetworkHostExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__NetworkHostExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkHostExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__NetworkHostExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__NetworkHostExtension::TT__NetworkHostExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkHostExtension::~TT__NetworkHostExtension()
{
}

dm::TT__NetworkHostExtension::TT__NetworkHostExtension( const dm::TT__NetworkHostExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkHostExtension&  dm::TT__NetworkHostExtension::operator=( const dm::TT__NetworkHostExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkInterfaceSetConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mEnabled;
    bool mEnabled_nil;
    dm::TT__NetworkInterfaceConnectionSetting mLink;
    bool mLink_nil;
    int mMTU;
    bool mMTU_nil;
    dm::TT__IPv4NetworkInterfaceSetConfiguration mIPv4;
    bool mIPv4_nil;
    dm::TT__IPv6NetworkInterfaceSetConfiguration mIPv6;
    bool mIPv6_nil;
    dm::TT__NetworkInterfaceSetConfigurationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__NetworkInterfaceSetConfiguration::PrivateDPtr::PrivateDPtr()
    : mEnabled(false), mEnabled_nil(true), mLink_nil(true), mMTU(0), mMTU_nil(true), mIPv4_nil(true), mIPv6_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__NetworkInterfaceSetConfiguration::setEnabled( bool _enabled )
{
    d_ptr->mEnabled_nil = false;// converter_complextype.cpp:277
    d_ptr->mEnabled = _enabled;
}

bool dm::TT__NetworkInterfaceSetConfiguration::enabled() const
{
    return d_ptr->mEnabled;
}

void dm::TT__NetworkInterfaceSetConfiguration::setLink( const dm::TT__NetworkInterfaceConnectionSetting& _link )
{
    d_ptr->mLink_nil = false;// converter_complextype.cpp:277
    d_ptr->mLink = _link;
}

dm::TT__NetworkInterfaceConnectionSetting dm::TT__NetworkInterfaceSetConfiguration::link() const
{
    return d_ptr->mLink;
}

void dm::TT__NetworkInterfaceSetConfiguration::setMTU( int _mTU )
{
    d_ptr->mMTU_nil = false;// converter_complextype.cpp:277
    d_ptr->mMTU = _mTU;
}

int dm::TT__NetworkInterfaceSetConfiguration::mTU() const
{
    return d_ptr->mMTU;
}

void dm::TT__NetworkInterfaceSetConfiguration::setIPv4( const dm::TT__IPv4NetworkInterfaceSetConfiguration& _iPv4 )
{
    d_ptr->mIPv4_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv4 = _iPv4;
}

dm::TT__IPv4NetworkInterfaceSetConfiguration dm::TT__NetworkInterfaceSetConfiguration::iPv4() const
{
    return d_ptr->mIPv4;
}

void dm::TT__NetworkInterfaceSetConfiguration::setIPv6( const dm::TT__IPv6NetworkInterfaceSetConfiguration& _iPv6 )
{
    d_ptr->mIPv6_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv6 = _iPv6;
}

dm::TT__IPv6NetworkInterfaceSetConfiguration dm::TT__NetworkInterfaceSetConfiguration::iPv6() const
{
    return d_ptr->mIPv6;
}

void dm::TT__NetworkInterfaceSetConfiguration::setExtension( const dm::TT__NetworkInterfaceSetConfigurationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__NetworkInterfaceSetConfigurationExtension dm::TT__NetworkInterfaceSetConfiguration::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__NetworkInterfaceSetConfiguration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__NetworkInterfaceSetConfiguration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__NetworkInterfaceSetConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkInterfaceSetConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mEnabled_nil) {
        KDSoapValue _valueEnabled(QString::fromLatin1("Enabled"), QVariant::fromValue(d_ptr->mEnabled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueEnabled.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueEnabled.setQualified(true);
        if (!_valueEnabled.isNil())
        args.append(_valueEnabled);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mLink_nil) {
        KDSoapValue _valueLink(d_ptr->mLink.serialize(QString::fromLatin1("Link")));// elementargumentserializer.cpp:102
        _valueLink.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueLink.setQualified(true);
        if (!_valueLink.isNil())
        args.append(_valueLink);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mMTU_nil) {
        KDSoapValue _valueMTU(QString::fromLatin1("MTU"), QVariant::fromValue(d_ptr->mMTU), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueMTU.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueMTU.setQualified(true);
        if (!_valueMTU.isNil())
        args.append(_valueMTU);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mIPv4_nil) {
        KDSoapValue _valueIPv4(d_ptr->mIPv4.serialize(QString::fromLatin1("IPv4")));// elementargumentserializer.cpp:102
        _valueIPv4.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPv4.setQualified(true);
        if (!_valueIPv4.isNil())
        args.append(_valueIPv4);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mIPv6_nil) {
        KDSoapValue _valueIPv6(d_ptr->mIPv6.serialize(QString::fromLatin1("IPv6")));// elementargumentserializer.cpp:102
        _valueIPv6.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPv6.setQualified(true);
        if (!_valueIPv6.isNil())
        args.append(_valueIPv6);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__NetworkInterfaceSetConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Enabled")) {// converter_complextype.cpp:354
            d_ptr->mEnabled = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mEnabled_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Link")) {// converter_complextype.cpp:354
            d_ptr->mLink.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("MTU")) {// converter_complextype.cpp:354
            d_ptr->mMTU = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mMTU_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("IPv4")) {// converter_complextype.cpp:354
            d_ptr->mIPv4.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("IPv6")) {// converter_complextype.cpp:354
            d_ptr->mIPv6.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__NetworkInterfaceSetConfiguration::TT__NetworkInterfaceSetConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkInterfaceSetConfiguration::~TT__NetworkInterfaceSetConfiguration()
{
}

dm::TT__NetworkInterfaceSetConfiguration::TT__NetworkInterfaceSetConfiguration( const dm::TT__NetworkInterfaceSetConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkInterfaceSetConfiguration&  dm::TT__NetworkInterfaceSetConfiguration::operator=( const dm::TT__NetworkInterfaceSetConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetNetworkProtocolsResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__NetworkProtocol > mNetworkProtocols;
    bool mNetworkProtocols_nil;
};

dm::TDS__GetNetworkProtocolsResponse::PrivateDPtr::PrivateDPtr()
    : mNetworkProtocols_nil(true)
{
}


void dm::TDS__GetNetworkProtocolsResponse::setNetworkProtocols( const QList< dm::TT__NetworkProtocol >& _networkProtocols )
{
    d_ptr->mNetworkProtocols_nil = false;// converter_complextype.cpp:277
    d_ptr->mNetworkProtocols = _networkProtocols;
}

QList< dm::TT__NetworkProtocol > dm::TDS__GetNetworkProtocolsResponse::networkProtocols() const
{
    return d_ptr->mNetworkProtocols;
}

KDSoapValue dm::TDS__GetNetworkProtocolsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetNetworkProtocolsResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mNetworkProtocols.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueNetworkProtocols(d_ptr->mNetworkProtocols.at(i).serialize(QString::fromLatin1("NetworkProtocols")));// elementargumentserializer.cpp:102
        _valueNetworkProtocols.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueNetworkProtocols.setQualified(true);
        args.append(_valueNetworkProtocols);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetNetworkProtocolsResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("NetworkProtocols")) {// converter_complextype.cpp:354
            dm::TT__NetworkProtocol mNetworkProtocolsTemp;// converter_complextype.cpp:412
            mNetworkProtocolsTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mNetworkProtocols.append(mNetworkProtocolsTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetNetworkProtocolsResponse::TDS__GetNetworkProtocolsResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetNetworkProtocolsResponse::~TDS__GetNetworkProtocolsResponse()
{
}

dm::TDS__GetNetworkProtocolsResponse::TDS__GetNetworkProtocolsResponse( const dm::TDS__GetNetworkProtocolsResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetNetworkProtocolsResponse&  dm::TDS__GetNetworkProtocolsResponse::operator=( const dm::TDS__GetNetworkProtocolsResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetDynamicDNS::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__DynamicDNSType mType;
    dm::TT__DNSName mName;
    bool mName_nil;
    QString mTTL;
    bool mTTL_nil;
};

dm::TDS__SetDynamicDNS::PrivateDPtr::PrivateDPtr()
    : mName_nil(true), mTTL_nil(true)
{
}


void dm::TDS__SetDynamicDNS::setType( const dm::TT__DynamicDNSType& _type )
{
    d_ptr->mType = _type;
}

dm::TT__DynamicDNSType dm::TDS__SetDynamicDNS::type() const
{
    return d_ptr->mType;
}

void dm::TDS__SetDynamicDNS::setName( const dm::TT__DNSName& _name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:277
    d_ptr->mName = _name;
}

dm::TT__DNSName dm::TDS__SetDynamicDNS::name() const
{
    return d_ptr->mName;
}

void dm::TDS__SetDynamicDNS::setTTL( const QString& _tTL )
{
    d_ptr->mTTL_nil = false;// converter_complextype.cpp:277
    d_ptr->mTTL = _tTL;
}

QString dm::TDS__SetDynamicDNS::tTL() const
{
    return d_ptr->mTTL;
}

KDSoapValue dm::TDS__SetDynamicDNS::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetDynamicDNS"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueType(QString::fromLatin1("Type"), d_ptr->mType.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DynamicDNSType"));// elementargumentserializer.cpp:110
    _valueType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueType.setQualified(true);
    args.append(_valueType);// elementargumentserializer.cpp:122
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("Name"), d_ptr->mName.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DNSName"));// elementargumentserializer.cpp:110
        _valueName.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueName.setQualified(true);
        if (!_valueName.isNil())
        args.append(_valueName);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mTTL_nil) {
        KDSoapValue _valueTTL(QString::fromLatin1("TTL"), QVariant::fromValue(d_ptr->mTTL), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// elementargumentserializer.cpp:108
        _valueTTL.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueTTL.setQualified(true);
        if (!_valueTTL.isNil())
        args.append(_valueTTL);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__SetDynamicDNS::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Type")) {// converter_complextype.cpp:354
            d_ptr->mType.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Name")) {// converter_complextype.cpp:354
            d_ptr->mName.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mName_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("TTL")) {// converter_complextype.cpp:354
            d_ptr->mTTL = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mTTL_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TDS__SetDynamicDNS::TDS__SetDynamicDNS()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetDynamicDNS::~TDS__SetDynamicDNS()
{
}

dm::TDS__SetDynamicDNS::TDS__SetDynamicDNS( const dm::TDS__SetDynamicDNS& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetDynamicDNS&  dm::TDS__SetDynamicDNS::operator=( const dm::TDS__SetDynamicDNS& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkZeroConfigurationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__NetworkZeroConfiguration > mAdditional;
    bool mAdditional_nil;
    dm::TT__NetworkZeroConfigurationExtension2 mExtension;
    bool mExtension_nil;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__NetworkZeroConfigurationExtension::PrivateDPtr::PrivateDPtr()
    : mAdditional_nil(true), mExtension_nil(true), mAny_nil(true)
{
}


void dm::TT__NetworkZeroConfigurationExtension::setAdditional( const QList< dm::TT__NetworkZeroConfiguration >& _additional )
{
    d_ptr->mAdditional_nil = false;// converter_complextype.cpp:277
    d_ptr->mAdditional = _additional;
}

QList< dm::TT__NetworkZeroConfiguration > dm::TT__NetworkZeroConfigurationExtension::additional() const
{
    return d_ptr->mAdditional;
}

void dm::TT__NetworkZeroConfigurationExtension::setExtension( const dm::TT__NetworkZeroConfigurationExtension2& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__NetworkZeroConfigurationExtension2 dm::TT__NetworkZeroConfigurationExtension::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__NetworkZeroConfigurationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__NetworkZeroConfigurationExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__NetworkZeroConfigurationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkZeroConfigurationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mAdditional.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueAdditional(d_ptr->mAdditional.at(i).serialize(QString::fromLatin1("Additional")));// elementargumentserializer.cpp:102
        _valueAdditional.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAdditional.setQualified(true);
        args.append(_valueAdditional);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__NetworkZeroConfigurationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Additional")) {// converter_complextype.cpp:354
            dm::TT__NetworkZeroConfiguration mAdditionalTemp;// converter_complextype.cpp:412
            mAdditionalTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mAdditional.append(mAdditionalTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__NetworkZeroConfigurationExtension::TT__NetworkZeroConfigurationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkZeroConfigurationExtension::~TT__NetworkZeroConfigurationExtension()
{
}

dm::TT__NetworkZeroConfigurationExtension::TT__NetworkZeroConfigurationExtension( const dm::TT__NetworkZeroConfigurationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkZeroConfigurationExtension&  dm::TT__NetworkZeroConfigurationExtension::operator=( const dm::TT__NetworkZeroConfigurationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__SystemLog::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__AttachmentData mBinary;
    bool mBinary_nil;
    QString mString;
    bool mString_nil;
};

dm::TT__SystemLog::PrivateDPtr::PrivateDPtr()
    : mBinary_nil(true), mString_nil(true)
{
}


void dm::TT__SystemLog::setBinary( const dm::TT__AttachmentData& _binary )
{
    d_ptr->mBinary_nil = false;// converter_complextype.cpp:277
    d_ptr->mBinary = _binary;
}

dm::TT__AttachmentData dm::TT__SystemLog::binary() const
{
    return d_ptr->mBinary;
}

void dm::TT__SystemLog::setString( const QString& _string )
{
    d_ptr->mString_nil = false;// converter_complextype.cpp:277
    d_ptr->mString = _string;
}

QString dm::TT__SystemLog::string() const
{
    return d_ptr->mString;
}

KDSoapValue dm::TT__SystemLog::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SystemLog"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mBinary_nil) {
        KDSoapValue _valueBinary(d_ptr->mBinary.serialize(QString::fromLatin1("Binary")));// elementargumentserializer.cpp:102
        _valueBinary.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueBinary.setQualified(true);
        if (!_valueBinary.isNil())
        args.append(_valueBinary);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mString_nil) {
        KDSoapValue _valueString(QString::fromLatin1("String"), QVariant::fromValue(d_ptr->mString), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueString.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueString.setQualified(true);
        if (!_valueString.isNil())
        args.append(_valueString);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__SystemLog::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Binary")) {// converter_complextype.cpp:354
            d_ptr->mBinary.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("String")) {// converter_complextype.cpp:354
            d_ptr->mString = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mString_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TT__SystemLog::TT__SystemLog()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SystemLog::~TT__SystemLog()
{
}

dm::TT__SystemLog::TT__SystemLog( const dm::TT__SystemLog& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SystemLog&  dm::TT__SystemLog::operator=( const dm::TT__SystemLog& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Dot11PSKSet::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__Dot11PSK mKey;
    bool mKey_nil;
    dm::TT__Dot11PSKPassphrase mPassphrase;
    bool mPassphrase_nil;
    dm::TT__Dot11PSKSetExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__Dot11PSKSet::PrivateDPtr::PrivateDPtr()
    : mKey_nil(true), mPassphrase_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__Dot11PSKSet::setKey( const dm::TT__Dot11PSK& _key )
{
    d_ptr->mKey_nil = false;// converter_complextype.cpp:277
    d_ptr->mKey = _key;
}

dm::TT__Dot11PSK dm::TT__Dot11PSKSet::key() const
{
    return d_ptr->mKey;
}

void dm::TT__Dot11PSKSet::setPassphrase( const dm::TT__Dot11PSKPassphrase& _passphrase )
{
    d_ptr->mPassphrase_nil = false;// converter_complextype.cpp:277
    d_ptr->mPassphrase = _passphrase;
}

dm::TT__Dot11PSKPassphrase dm::TT__Dot11PSKSet::passphrase() const
{
    return d_ptr->mPassphrase;
}

void dm::TT__Dot11PSKSet::setExtension( const dm::TT__Dot11PSKSetExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__Dot11PSKSetExtension dm::TT__Dot11PSKSet::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__Dot11PSKSet::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__Dot11PSKSet::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__Dot11PSKSet::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11PSKSet"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mKey_nil) {
        KDSoapValue _valueKey(QString::fromLatin1("Key"), d_ptr->mKey.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11PSK"));// elementargumentserializer.cpp:110
        _valueKey.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueKey.setQualified(true);
        if (!_valueKey.isNil())
        args.append(_valueKey);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mPassphrase_nil) {
        KDSoapValue _valuePassphrase(QString::fromLatin1("Passphrase"), d_ptr->mPassphrase.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11PSKPassphrase"));// elementargumentserializer.cpp:110
        _valuePassphrase.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePassphrase.setQualified(true);
        if (!_valuePassphrase.isNil())
        args.append(_valuePassphrase);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Dot11PSKSet::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Key")) {// converter_complextype.cpp:354
            d_ptr->mKey.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mKey_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("Passphrase")) {// converter_complextype.cpp:354
            d_ptr->mPassphrase.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mPassphrase_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__Dot11PSKSet::TT__Dot11PSKSet()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Dot11PSKSet::~TT__Dot11PSKSet()
{
}

dm::TT__Dot11PSKSet::TT__Dot11PSKSet( const dm::TT__Dot11PSKSet& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Dot11PSKSet&  dm::TT__Dot11PSKSet::operator=( const dm::TT__Dot11PSKSet& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetNetworkInterfaces::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetNetworkInterfaces"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetNetworkInterfaces::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetNetworkInterfaces::TDS__GetNetworkInterfaces()
{
}

dm::TDS__GetNetworkInterfaces::~TDS__GetNetworkInterfaces()
{
}


class dm::TT__PTZCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__PTZCapabilities::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__PTZCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__PTZCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__PTZCapabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__PTZCapabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__PTZCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__PTZCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__PTZCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("PTZCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__PTZCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__PTZCapabilities::TT__PTZCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__PTZCapabilities::~TT__PTZCapabilities()
{
}

dm::TT__PTZCapabilities::TT__PTZCapabilities( const dm::TT__PTZCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__PTZCapabilities&  dm::TT__PTZCapabilities::operator=( const dm::TT__PTZCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__CreateUsersResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("CreateUsersResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__CreateUsersResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__CreateUsersResponse::TDS__CreateUsersResponse()
{
}

dm::TDS__CreateUsersResponse::~TDS__CreateUsersResponse()
{
}


KDSoapValue dm::TDS__GetEndpointReference::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetEndpointReference"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetEndpointReference::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetEndpointReference::TDS__GetEndpointReference()
{
}

dm::TDS__GetEndpointReference::~TDS__GetEndpointReference()
{
}


KDSoapValue dm::TDS__CreateDot1XConfigurationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("CreateDot1XConfigurationResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__CreateDot1XConfigurationResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__CreateDot1XConfigurationResponse::TDS__CreateDot1XConfigurationResponse()
{
}

dm::TDS__CreateDot1XConfigurationResponse::~TDS__CreateDot1XConfigurationResponse()
{
}


class dm::TDS__GetDynamicDNSResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__DynamicDNSInformation mDynamicDNSInformation;
};

void dm::TDS__GetDynamicDNSResponse::setDynamicDNSInformation( const dm::TT__DynamicDNSInformation& _dynamicDNSInformation )
{
    d_ptr->mDynamicDNSInformation = _dynamicDNSInformation;
}

dm::TT__DynamicDNSInformation dm::TDS__GetDynamicDNSResponse::dynamicDNSInformation() const
{
    return d_ptr->mDynamicDNSInformation;
}

KDSoapValue dm::TDS__GetDynamicDNSResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDynamicDNSResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDynamicDNSInformation(d_ptr->mDynamicDNSInformation.serialize(QString::fromLatin1("DynamicDNSInformation")));// elementargumentserializer.cpp:102
    _valueDynamicDNSInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDynamicDNSInformation.setQualified(true);
    args.append(_valueDynamicDNSInformation);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetDynamicDNSResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DynamicDNSInformation")) {// converter_complextype.cpp:354
            d_ptr->mDynamicDNSInformation.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetDynamicDNSResponse::TDS__GetDynamicDNSResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetDynamicDNSResponse::~TDS__GetDynamicDNSResponse()
{
}

dm::TDS__GetDynamicDNSResponse::TDS__GetDynamicDNSResponse( const dm::TDS__GetDynamicDNSResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetDynamicDNSResponse&  dm::TDS__GetDynamicDNSResponse::operator=( const dm::TDS__GetDynamicDNSResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Dot3Configuration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__Dot3Configuration::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__Dot3Configuration::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__Dot3Configuration::any() const
{
    return d_ptr->mAny;
}

void dm::TT__Dot3Configuration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__Dot3Configuration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__Dot3Configuration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot3Configuration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Dot3Configuration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__Dot3Configuration::TT__Dot3Configuration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Dot3Configuration::~TT__Dot3Configuration()
{
}

dm::TT__Dot3Configuration::TT__Dot3Configuration( const dm::TT__Dot3Configuration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Dot3Configuration&  dm::TT__Dot3Configuration::operator=( const dm::TT__Dot3Configuration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__DeviceIOCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    int mVideoSources;
    int mVideoOutputs;
    int mAudioSources;
    int mAudioOutputs;
    int mRelayOutputs;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__DeviceIOCapabilities::PrivateDPtr::PrivateDPtr()
    : mVideoSources(0), mVideoOutputs(0), mAudioSources(0), mAudioOutputs(0), mRelayOutputs(0), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__DeviceIOCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__DeviceIOCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__DeviceIOCapabilities::setVideoSources( int _videoSources )
{
    d_ptr->mVideoSources = _videoSources;
}

int dm::TT__DeviceIOCapabilities::videoSources() const
{
    return d_ptr->mVideoSources;
}

void dm::TT__DeviceIOCapabilities::setVideoOutputs( int _videoOutputs )
{
    d_ptr->mVideoOutputs = _videoOutputs;
}

int dm::TT__DeviceIOCapabilities::videoOutputs() const
{
    return d_ptr->mVideoOutputs;
}

void dm::TT__DeviceIOCapabilities::setAudioSources( int _audioSources )
{
    d_ptr->mAudioSources = _audioSources;
}

int dm::TT__DeviceIOCapabilities::audioSources() const
{
    return d_ptr->mAudioSources;
}

void dm::TT__DeviceIOCapabilities::setAudioOutputs( int _audioOutputs )
{
    d_ptr->mAudioOutputs = _audioOutputs;
}

int dm::TT__DeviceIOCapabilities::audioOutputs() const
{
    return d_ptr->mAudioOutputs;
}

void dm::TT__DeviceIOCapabilities::setRelayOutputs( int _relayOutputs )
{
    d_ptr->mRelayOutputs = _relayOutputs;
}

int dm::TT__DeviceIOCapabilities::relayOutputs() const
{
    return d_ptr->mRelayOutputs;
}

void dm::TT__DeviceIOCapabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__DeviceIOCapabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__DeviceIOCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__DeviceIOCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__DeviceIOCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DeviceIOCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    KDSoapValue _valueVideoSources(QString::fromLatin1("VideoSources"), QVariant::fromValue(d_ptr->mVideoSources), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueVideoSources.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueVideoSources.setQualified(true);
    args.append(_valueVideoSources);// elementargumentserializer.cpp:122
    KDSoapValue _valueVideoOutputs(QString::fromLatin1("VideoOutputs"), QVariant::fromValue(d_ptr->mVideoOutputs), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueVideoOutputs.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueVideoOutputs.setQualified(true);
    args.append(_valueVideoOutputs);// elementargumentserializer.cpp:122
    KDSoapValue _valueAudioSources(QString::fromLatin1("AudioSources"), QVariant::fromValue(d_ptr->mAudioSources), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueAudioSources.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueAudioSources.setQualified(true);
    args.append(_valueAudioSources);// elementargumentserializer.cpp:122
    KDSoapValue _valueAudioOutputs(QString::fromLatin1("AudioOutputs"), QVariant::fromValue(d_ptr->mAudioOutputs), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueAudioOutputs.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueAudioOutputs.setQualified(true);
    args.append(_valueAudioOutputs);// elementargumentserializer.cpp:122
    KDSoapValue _valueRelayOutputs(QString::fromLatin1("RelayOutputs"), QVariant::fromValue(d_ptr->mRelayOutputs), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueRelayOutputs.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueRelayOutputs.setQualified(true);
    args.append(_valueRelayOutputs);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__DeviceIOCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("VideoSources")) {// converter_complextype.cpp:354
            d_ptr->mVideoSources = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("VideoOutputs")) {// converter_complextype.cpp:354
            d_ptr->mVideoOutputs = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("AudioSources")) {// converter_complextype.cpp:354
            d_ptr->mAudioSources = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("AudioOutputs")) {// converter_complextype.cpp:354
            d_ptr->mAudioOutputs = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("RelayOutputs")) {// converter_complextype.cpp:354
            d_ptr->mRelayOutputs = val.value().value<int>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__DeviceIOCapabilities::TT__DeviceIOCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DeviceIOCapabilities::~TT__DeviceIOCapabilities()
{
}

dm::TT__DeviceIOCapabilities::TT__DeviceIOCapabilities( const dm::TT__DeviceIOCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__DeviceIOCapabilities&  dm::TT__DeviceIOCapabilities::operator=( const dm::TT__DeviceIOCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__DeviceEntity::PrivateDPtr : public QSharedData
{
public:
    dm::TT__ReferenceToken mToken;
};

void dm::TT__DeviceEntity::setToken( const dm::TT__ReferenceToken& _token )
{
    d_ptr->mToken = _token;
}

dm::TT__ReferenceToken dm::TT__DeviceEntity::token() const
{
    return d_ptr->mToken;
}

KDSoapValue dm::TT__DeviceEntity::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DeviceEntity"));// converter_complextype.cpp:471
    KDSoapValueList attribs;
    KDSoapValue _valueToken(QString::fromLatin1("token"), d_ptr->mToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    attribs.append(_valueToken);// elementargumentserializer.cpp:122
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__DeviceEntity::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("token")) {// converter_complextype.cpp:354
            d_ptr->mToken.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TT__DeviceEntity::TT__DeviceEntity()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DeviceEntity::~TT__DeviceEntity()
{
}

dm::TT__DeviceEntity *dm::TT__DeviceEntity::_kd_clone() const
{
    return new TT__DeviceEntity(*this);
}

dm::TT__DeviceEntity::TT__DeviceEntity( const dm::TT__DeviceEntity& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__DeviceEntity&  dm::TT__DeviceEntity::operator=( const dm::TT__DeviceEntity& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__DeleteDot1XConfigurationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("DeleteDot1XConfigurationResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__DeleteDot1XConfigurationResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__DeleteDot1XConfigurationResponse::TDS__DeleteDot1XConfigurationResponse()
{
}

dm::TDS__DeleteDot1XConfigurationResponse::~TDS__DeleteDot1XConfigurationResponse()
{
}


class dm::TT__RealTimeStreamingCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mRTPMulticast;
    bool mRTPMulticast_nil;
    bool mRTP_TCP;
    bool mRTP_TCP_nil;
    bool mRTP_RTSP_TCP;
    bool mRTP_RTSP_TCP_nil;
    dm::TT__RealTimeStreamingCapabilitiesExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__RealTimeStreamingCapabilities::PrivateDPtr::PrivateDPtr()
    : mRTPMulticast(false), mRTPMulticast_nil(true), mRTP_TCP(false), mRTP_TCP_nil(true), mRTP_RTSP_TCP(false), mRTP_RTSP_TCP_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__RealTimeStreamingCapabilities::setRTPMulticast( bool _rTPMulticast )
{
    d_ptr->mRTPMulticast_nil = false;// converter_complextype.cpp:277
    d_ptr->mRTPMulticast = _rTPMulticast;
}

bool dm::TT__RealTimeStreamingCapabilities::rTPMulticast() const
{
    return d_ptr->mRTPMulticast;
}

void dm::TT__RealTimeStreamingCapabilities::setRTP_TCP( bool _rTP_TCP )
{
    d_ptr->mRTP_TCP_nil = false;// converter_complextype.cpp:277
    d_ptr->mRTP_TCP = _rTP_TCP;
}

bool dm::TT__RealTimeStreamingCapabilities::rTP_TCP() const
{
    return d_ptr->mRTP_TCP;
}

void dm::TT__RealTimeStreamingCapabilities::setRTP_RTSP_TCP( bool _rTP_RTSP_TCP )
{
    d_ptr->mRTP_RTSP_TCP_nil = false;// converter_complextype.cpp:277
    d_ptr->mRTP_RTSP_TCP = _rTP_RTSP_TCP;
}

bool dm::TT__RealTimeStreamingCapabilities::rTP_RTSP_TCP() const
{
    return d_ptr->mRTP_RTSP_TCP;
}

void dm::TT__RealTimeStreamingCapabilities::setExtension( const dm::TT__RealTimeStreamingCapabilitiesExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__RealTimeStreamingCapabilitiesExtension dm::TT__RealTimeStreamingCapabilities::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__RealTimeStreamingCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__RealTimeStreamingCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__RealTimeStreamingCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("RealTimeStreamingCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mRTPMulticast_nil) {
        KDSoapValue _valueRTPMulticast(QString::fromLatin1("RTPMulticast"), QVariant::fromValue(d_ptr->mRTPMulticast), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueRTPMulticast.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueRTPMulticast.setQualified(true);
        if (!_valueRTPMulticast.isNil())
        args.append(_valueRTPMulticast);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mRTP_TCP_nil) {
        KDSoapValue _valueRTP_TCP(QString::fromLatin1("RTP_TCP"), QVariant::fromValue(d_ptr->mRTP_TCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueRTP_TCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueRTP_TCP.setQualified(true);
        if (!_valueRTP_TCP.isNil())
        args.append(_valueRTP_TCP);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mRTP_RTSP_TCP_nil) {
        KDSoapValue _valueRTP_RTSP_TCP(QString::fromLatin1("RTP_RTSP_TCP"), QVariant::fromValue(d_ptr->mRTP_RTSP_TCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueRTP_RTSP_TCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueRTP_RTSP_TCP.setQualified(true);
        if (!_valueRTP_RTSP_TCP.isNil())
        args.append(_valueRTP_RTSP_TCP);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__RealTimeStreamingCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("RTPMulticast")) {// converter_complextype.cpp:354
            d_ptr->mRTPMulticast = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mRTPMulticast_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("RTP_TCP")) {// converter_complextype.cpp:354
            d_ptr->mRTP_TCP = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mRTP_TCP_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("RTP_RTSP_TCP")) {// converter_complextype.cpp:354
            d_ptr->mRTP_RTSP_TCP = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mRTP_RTSP_TCP_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__RealTimeStreamingCapabilities::TT__RealTimeStreamingCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__RealTimeStreamingCapabilities::~TT__RealTimeStreamingCapabilities()
{
}

dm::TT__RealTimeStreamingCapabilities::TT__RealTimeStreamingCapabilities( const dm::TT__RealTimeStreamingCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__RealTimeStreamingCapabilities&  dm::TT__RealTimeStreamingCapabilities::operator=( const dm::TT__RealTimeStreamingCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__DNSInformationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__DNSInformationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__DNSInformationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__DNSInformationExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__DNSInformationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DNSInformationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__DNSInformationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__DNSInformationExtension::TT__DNSInformationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DNSInformationExtension::~TT__DNSInformationExtension()
{
}

dm::TT__DNSInformationExtension::TT__DNSInformationExtension( const dm::TT__DNSInformationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__DNSInformationExtension&  dm::TT__DNSInformationExtension::operator=( const dm::TT__DNSInformationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__PTZSpacesExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__PTZSpacesExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__PTZSpacesExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__PTZSpacesExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__PTZSpacesExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("PTZSpacesExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__PTZSpacesExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__PTZSpacesExtension::TT__PTZSpacesExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__PTZSpacesExtension::~TT__PTZSpacesExtension()
{
}

dm::TT__PTZSpacesExtension::TT__PTZSpacesExtension( const dm::TT__PTZSpacesExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__PTZSpacesExtension&  dm::TT__PTZSpacesExtension::operator=( const dm::TT__PTZSpacesExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__PaneLayout::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__ReferenceToken mPane;
    dm::TT__Rectangle mArea;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__PaneLayout::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__PaneLayout::setPane( const dm::TT__ReferenceToken& _pane )
{
    d_ptr->mPane = _pane;
}

dm::TT__ReferenceToken dm::TT__PaneLayout::pane() const
{
    return d_ptr->mPane;
}

void dm::TT__PaneLayout::setArea( const dm::TT__Rectangle& _area )
{
    d_ptr->mArea = _area;
}

dm::TT__Rectangle dm::TT__PaneLayout::area() const
{
    return d_ptr->mArea;
}

void dm::TT__PaneLayout::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__PaneLayout::any() const
{
    return d_ptr->mAny;
}

void dm::TT__PaneLayout::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__PaneLayout::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__PaneLayout::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("PaneLayout"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valuePane(QString::fromLatin1("Pane"), d_ptr->mPane.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valuePane.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valuePane.setQualified(true);
    args.append(_valuePane);// elementargumentserializer.cpp:122
    KDSoapValue _valueArea(d_ptr->mArea.serialize(QString::fromLatin1("Area")));// elementargumentserializer.cpp:102
    _valueArea.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueArea.setQualified(true);
    args.append(_valueArea);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__PaneLayout::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Pane")) {// converter_complextype.cpp:354
            d_ptr->mPane.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Area")) {// converter_complextype.cpp:354
            d_ptr->mArea.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__PaneLayout::TT__PaneLayout()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__PaneLayout::~TT__PaneLayout()
{
}

dm::TT__PaneLayout::TT__PaneLayout( const dm::TT__PaneLayout& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__PaneLayout&  dm::TT__PaneLayout::operator=( const dm::TT__PaneLayout& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__DNSInformation::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mFromDHCP;
    QStringList mSearchDomain;
    bool mSearchDomain_nil;
    QList< dm::TT__IPAddress > mDNSFromDHCP;
    bool mDNSFromDHCP_nil;
    QList< dm::TT__IPAddress > mDNSManual;
    bool mDNSManual_nil;
    dm::TT__DNSInformationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__DNSInformation::PrivateDPtr::PrivateDPtr()
    : mFromDHCP(false), mSearchDomain_nil(true), mDNSFromDHCP_nil(true), mDNSManual_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__DNSInformation::setFromDHCP( bool _fromDHCP )
{
    d_ptr->mFromDHCP = _fromDHCP;
}

bool dm::TT__DNSInformation::fromDHCP() const
{
    return d_ptr->mFromDHCP;
}

void dm::TT__DNSInformation::setSearchDomain( const QStringList& _searchDomain )
{
    d_ptr->mSearchDomain_nil = false;// converter_complextype.cpp:277
    d_ptr->mSearchDomain = _searchDomain;
}

QStringList dm::TT__DNSInformation::searchDomain() const
{
    return d_ptr->mSearchDomain;
}

void dm::TT__DNSInformation::setDNSFromDHCP( const QList< dm::TT__IPAddress >& _dNSFromDHCP )
{
    d_ptr->mDNSFromDHCP_nil = false;// converter_complextype.cpp:277
    d_ptr->mDNSFromDHCP = _dNSFromDHCP;
}

QList< dm::TT__IPAddress > dm::TT__DNSInformation::dNSFromDHCP() const
{
    return d_ptr->mDNSFromDHCP;
}

void dm::TT__DNSInformation::setDNSManual( const QList< dm::TT__IPAddress >& _dNSManual )
{
    d_ptr->mDNSManual_nil = false;// converter_complextype.cpp:277
    d_ptr->mDNSManual = _dNSManual;
}

QList< dm::TT__IPAddress > dm::TT__DNSInformation::dNSManual() const
{
    return d_ptr->mDNSManual;
}

void dm::TT__DNSInformation::setExtension( const dm::TT__DNSInformationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__DNSInformationExtension dm::TT__DNSInformation::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__DNSInformation::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__DNSInformation::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__DNSInformation::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DNSInformation"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueFromDHCP(QString::fromLatin1("FromDHCP"), QVariant::fromValue(d_ptr->mFromDHCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueFromDHCP.setQualified(true);
    args.append(_valueFromDHCP);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mSearchDomain.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueSearchDomain(QString::fromLatin1("SearchDomain"), QVariant::fromValue(d_ptr->mSearchDomain.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
        _valueSearchDomain.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSearchDomain.setQualified(true);
        args.append(_valueSearchDomain);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mDNSFromDHCP.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueDNSFromDHCP(d_ptr->mDNSFromDHCP.at(i).serialize(QString::fromLatin1("DNSFromDHCP")));// elementargumentserializer.cpp:102
        _valueDNSFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDNSFromDHCP.setQualified(true);
        args.append(_valueDNSFromDHCP);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mDNSManual.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueDNSManual(d_ptr->mDNSManual.at(i).serialize(QString::fromLatin1("DNSManual")));// elementargumentserializer.cpp:102
        _valueDNSManual.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDNSManual.setQualified(true);
        args.append(_valueDNSManual);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__DNSInformation::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("FromDHCP")) {// converter_complextype.cpp:354
            d_ptr->mFromDHCP = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("SearchDomain")) {// converter_complextype.cpp:354
            QString mSearchDomainTemp;// converter_complextype.cpp:412
            mSearchDomainTemp = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mSearchDomain.append(mSearchDomainTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("DNSFromDHCP")) {// converter_complextype.cpp:354
            dm::TT__IPAddress mDNSFromDHCPTemp;// converter_complextype.cpp:412
            mDNSFromDHCPTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mDNSFromDHCP.append(mDNSFromDHCPTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("DNSManual")) {// converter_complextype.cpp:354
            dm::TT__IPAddress mDNSManualTemp;// converter_complextype.cpp:412
            mDNSManualTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mDNSManual.append(mDNSManualTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__DNSInformation::TT__DNSInformation()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DNSInformation::~TT__DNSInformation()
{
}

dm::TT__DNSInformation::TT__DNSInformation( const dm::TT__DNSInformation& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__DNSInformation&  dm::TT__DNSInformation::operator=( const dm::TT__DNSInformation& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Rectangle::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mBottom;
    bool mBottom_nil;
    float mTop;
    bool mTop_nil;
    float mRight;
    bool mRight_nil;
    float mLeft;
    bool mLeft_nil;
};

dm::TT__Rectangle::PrivateDPtr::PrivateDPtr()
    : mBottom(0), mBottom_nil(true), mTop(0), mTop_nil(true), mRight(0), mRight_nil(true), mLeft(0), mLeft_nil(true)
{
}


void dm::TT__Rectangle::setBottom( float _bottom )
{
    d_ptr->mBottom_nil = false;// converter_complextype.cpp:277
    d_ptr->mBottom = _bottom;
}

float dm::TT__Rectangle::bottom() const
{
    return d_ptr->mBottom;
}

void dm::TT__Rectangle::setTop( float _top )
{
    d_ptr->mTop_nil = false;// converter_complextype.cpp:277
    d_ptr->mTop = _top;
}

float dm::TT__Rectangle::top() const
{
    return d_ptr->mTop;
}

void dm::TT__Rectangle::setRight( float _right )
{
    d_ptr->mRight_nil = false;// converter_complextype.cpp:277
    d_ptr->mRight = _right;
}

float dm::TT__Rectangle::right() const
{
    return d_ptr->mRight;
}

void dm::TT__Rectangle::setLeft( float _left )
{
    d_ptr->mLeft_nil = false;// converter_complextype.cpp:277
    d_ptr->mLeft = _left;
}

float dm::TT__Rectangle::left() const
{
    return d_ptr->mLeft;
}

KDSoapValue dm::TT__Rectangle::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Rectangle"));// converter_complextype.cpp:471
    KDSoapValueList attribs;
    if (!d_ptr->mBottom_nil) {
        KDSoapValue _valueBottom(QString::fromLatin1("bottom"), QVariant::fromValue(d_ptr->mBottom), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueBottom.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        if (!_valueBottom.isNil())
        attribs.append(_valueBottom);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mTop_nil) {
        KDSoapValue _valueTop(QString::fromLatin1("top"), QVariant::fromValue(d_ptr->mTop), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueTop.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        if (!_valueTop.isNil())
        attribs.append(_valueTop);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mRight_nil) {
        KDSoapValue _valueRight(QString::fromLatin1("right"), QVariant::fromValue(d_ptr->mRight), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueRight.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        if (!_valueRight.isNil())
        attribs.append(_valueRight);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mLeft_nil) {
        KDSoapValue _valueLeft(QString::fromLatin1("left"), QVariant::fromValue(d_ptr->mLeft), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueLeft.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        if (!_valueLeft.isNil())
        attribs.append(_valueLeft);// elementargumentserializer.cpp:122
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Rectangle::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("bottom")) {// converter_complextype.cpp:354
            d_ptr->mBottom = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mBottom_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("top")) {// converter_complextype.cpp:354
            d_ptr->mTop = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mTop_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("right")) {// converter_complextype.cpp:354
            d_ptr->mRight = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mRight_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("left")) {// converter_complextype.cpp:354
            d_ptr->mLeft = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mLeft_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TT__Rectangle::TT__Rectangle()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Rectangle::~TT__Rectangle()
{
}

dm::TT__Rectangle::TT__Rectangle( const dm::TT__Rectangle& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Rectangle&  dm::TT__Rectangle::operator=( const dm::TT__Rectangle& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__LoadCACertificatesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("LoadCACertificatesResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__LoadCACertificatesResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__LoadCACertificatesResponse::TDS__LoadCACertificatesResponse()
{
}

dm::TDS__LoadCACertificatesResponse::~TDS__LoadCACertificatesResponse()
{
}


class dm::TDS__SetSystemFactoryDefault::PrivateDPtr : public QSharedData
{
public:
    dm::TT__FactoryDefaultType mFactoryDefault;
};

void dm::TDS__SetSystemFactoryDefault::setFactoryDefault( const dm::TT__FactoryDefaultType& _factoryDefault )
{
    d_ptr->mFactoryDefault = _factoryDefault;
}

dm::TT__FactoryDefaultType dm::TDS__SetSystemFactoryDefault::factoryDefault() const
{
    return d_ptr->mFactoryDefault;
}

KDSoapValue dm::TDS__SetSystemFactoryDefault::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetSystemFactoryDefault"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueFactoryDefault(QString::fromLatin1("FactoryDefault"), d_ptr->mFactoryDefault.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("FactoryDefaultType"));// elementargumentserializer.cpp:110
    _valueFactoryDefault.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueFactoryDefault.setQualified(true);
    args.append(_valueFactoryDefault);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetSystemFactoryDefault::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("FactoryDefault")) {// converter_complextype.cpp:354
            d_ptr->mFactoryDefault.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__SetSystemFactoryDefault::TDS__SetSystemFactoryDefault()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetSystemFactoryDefault::~TDS__SetSystemFactoryDefault()
{
}

dm::TDS__SetSystemFactoryDefault::TDS__SetSystemFactoryDefault( const dm::TDS__SetSystemFactoryDefault& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetSystemFactoryDefault&  dm::TDS__SetSystemFactoryDefault::operator=( const dm::TDS__SetSystemFactoryDefault& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetSystemDateAndTime::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetSystemDateAndTime"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetSystemDateAndTime::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetSystemDateAndTime::TDS__GetSystemDateAndTime()
{
}

dm::TDS__GetSystemDateAndTime::~TDS__GetSystemDateAndTime()
{
}


KDSoapValue dm::TDS__GetCertificates::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetCertificates"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetCertificates::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetCertificates::TDS__GetCertificates()
{
}

dm::TDS__GetCertificates::~TDS__GetCertificates()
{
}


class dm::TDS__GetSystemLogResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__SystemLog mSystemLog;
};

void dm::TDS__GetSystemLogResponse::setSystemLog( const dm::TT__SystemLog& _systemLog )
{
    d_ptr->mSystemLog = _systemLog;
}

dm::TT__SystemLog dm::TDS__GetSystemLogResponse::systemLog() const
{
    return d_ptr->mSystemLog;
}

KDSoapValue dm::TDS__GetSystemLogResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetSystemLogResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueSystemLog(d_ptr->mSystemLog.serialize(QString::fromLatin1("SystemLog")));// elementargumentserializer.cpp:102
    _valueSystemLog.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSystemLog.setQualified(true);
    args.append(_valueSystemLog);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetSystemLogResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("SystemLog")) {// converter_complextype.cpp:354
            d_ptr->mSystemLog.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetSystemLogResponse::TDS__GetSystemLogResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetSystemLogResponse::~TDS__GetSystemLogResponse()
{
}

dm::TDS__GetSystemLogResponse::TDS__GetSystemLogResponse( const dm::TDS__GetSystemLogResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetSystemLogResponse&  dm::TDS__GetSystemLogResponse::operator=( const dm::TDS__GetSystemLogResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Time::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mHour;
    int mMinute;
    int mSecond;
};

dm::TT__Time::PrivateDPtr::PrivateDPtr()
    : mHour(0), mMinute(0), mSecond(0)
{
}


void dm::TT__Time::setHour( int _hour )
{
    d_ptr->mHour = _hour;
}

int dm::TT__Time::hour() const
{
    return d_ptr->mHour;
}

void dm::TT__Time::setMinute( int _minute )
{
    d_ptr->mMinute = _minute;
}

int dm::TT__Time::minute() const
{
    return d_ptr->mMinute;
}

void dm::TT__Time::setSecond( int _second )
{
    d_ptr->mSecond = _second;
}

int dm::TT__Time::second() const
{
    return d_ptr->mSecond;
}

KDSoapValue dm::TT__Time::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Time"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueHour(QString::fromLatin1("Hour"), QVariant::fromValue(d_ptr->mHour), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueHour.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueHour.setQualified(true);
    args.append(_valueHour);// elementargumentserializer.cpp:122
    KDSoapValue _valueMinute(QString::fromLatin1("Minute"), QVariant::fromValue(d_ptr->mMinute), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueMinute.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMinute.setQualified(true);
    args.append(_valueMinute);// elementargumentserializer.cpp:122
    KDSoapValue _valueSecond(QString::fromLatin1("Second"), QVariant::fromValue(d_ptr->mSecond), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueSecond.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueSecond.setQualified(true);
    args.append(_valueSecond);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__Time::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Hour")) {// converter_complextype.cpp:354
            d_ptr->mHour = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Minute")) {// converter_complextype.cpp:354
            d_ptr->mMinute = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Second")) {// converter_complextype.cpp:354
            d_ptr->mSecond = val.value().value<int>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__Time::TT__Time()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Time::~TT__Time()
{
}

dm::TT__Time::TT__Time( const dm::TT__Time& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Time&  dm::TT__Time::operator=( const dm::TT__Time& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkInterfaceInfo::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mName;
    bool mName_nil;
    dm::TT__HwAddress mHwAddress;
    int mMTU;
    bool mMTU_nil;
};

dm::TT__NetworkInterfaceInfo::PrivateDPtr::PrivateDPtr()
    : mName_nil(true), mMTU(0), mMTU_nil(true)
{
}


void dm::TT__NetworkInterfaceInfo::setName( const QString& _name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:277
    d_ptr->mName = _name;
}

QString dm::TT__NetworkInterfaceInfo::name() const
{
    return d_ptr->mName;
}

void dm::TT__NetworkInterfaceInfo::setHwAddress( const dm::TT__HwAddress& _hwAddress )
{
    d_ptr->mHwAddress = _hwAddress;
}

dm::TT__HwAddress dm::TT__NetworkInterfaceInfo::hwAddress() const
{
    return d_ptr->mHwAddress;
}

void dm::TT__NetworkInterfaceInfo::setMTU( int _mTU )
{
    d_ptr->mMTU_nil = false;// converter_complextype.cpp:277
    d_ptr->mMTU = _mTU;
}

int dm::TT__NetworkInterfaceInfo::mTU() const
{
    return d_ptr->mMTU;
}

KDSoapValue dm::TT__NetworkInterfaceInfo::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkInterfaceInfo"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueName.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueName.setQualified(true);
        if (!_valueName.isNil())
        args.append(_valueName);// elementargumentserializer.cpp:122
    }
    KDSoapValue _valueHwAddress(QString::fromLatin1("HwAddress"), d_ptr->mHwAddress.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("HwAddress"));// elementargumentserializer.cpp:110
    _valueHwAddress.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueHwAddress.setQualified(true);
    args.append(_valueHwAddress);// elementargumentserializer.cpp:122
    if (!d_ptr->mMTU_nil) {
        KDSoapValue _valueMTU(QString::fromLatin1("MTU"), QVariant::fromValue(d_ptr->mMTU), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueMTU.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueMTU.setQualified(true);
        if (!_valueMTU.isNil())
        args.append(_valueMTU);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__NetworkInterfaceInfo::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Name")) {// converter_complextype.cpp:354
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mName_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("HwAddress")) {// converter_complextype.cpp:354
            d_ptr->mHwAddress.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("MTU")) {// converter_complextype.cpp:354
            d_ptr->mMTU = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mMTU_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TT__NetworkInterfaceInfo::TT__NetworkInterfaceInfo()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkInterfaceInfo::~TT__NetworkInterfaceInfo()
{
}

dm::TT__NetworkInterfaceInfo::TT__NetworkInterfaceInfo( const dm::TT__NetworkInterfaceInfo& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkInterfaceInfo&  dm::TT__NetworkInterfaceInfo::operator=( const dm::TT__NetworkInterfaceInfo& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__RestoreSystem::PrivateDPtr : public QSharedData
{
public:
    QList< dm::TT__BackupFile > mBackupFiles;
};

void dm::TDS__RestoreSystem::setBackupFiles( const QList< dm::TT__BackupFile >& _backupFiles )
{
    d_ptr->mBackupFiles = _backupFiles;
}

QList< dm::TT__BackupFile > dm::TDS__RestoreSystem::backupFiles() const
{
    return d_ptr->mBackupFiles;
}

KDSoapValue dm::TDS__RestoreSystem::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("RestoreSystem"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mBackupFiles.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueBackupFiles(d_ptr->mBackupFiles.at(i).serialize(QString::fromLatin1("BackupFiles")));// elementargumentserializer.cpp:102
        _valueBackupFiles.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueBackupFiles.setQualified(true);
        args.append(_valueBackupFiles);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__RestoreSystem::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("BackupFiles")) {// converter_complextype.cpp:354
            dm::TT__BackupFile mBackupFilesTemp;// converter_complextype.cpp:412
            mBackupFilesTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mBackupFiles.append(mBackupFilesTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__RestoreSystem::TDS__RestoreSystem()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__RestoreSystem::~TDS__RestoreSystem()
{
}

dm::TDS__RestoreSystem::TDS__RestoreSystem( const dm::TDS__RestoreSystem& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__RestoreSystem&  dm::TDS__RestoreSystem::operator=( const dm::TDS__RestoreSystem& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetRelayOutputs::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetRelayOutputs"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetRelayOutputs::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetRelayOutputs::TDS__GetRelayOutputs()
{
}

dm::TDS__GetRelayOutputs::~TDS__GetRelayOutputs()
{
}


class dm::TDS__GetStorageConfigurationResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TDS__StorageConfiguration mStorageConfiguration;
};

void dm::TDS__GetStorageConfigurationResponse::setStorageConfiguration( const dm::TDS__StorageConfiguration& _storageConfiguration )
{
    d_ptr->mStorageConfiguration = _storageConfiguration;
}

dm::TDS__StorageConfiguration dm::TDS__GetStorageConfigurationResponse::storageConfiguration() const
{
    return d_ptr->mStorageConfiguration;
}

KDSoapValue dm::TDS__GetStorageConfigurationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetStorageConfigurationResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueStorageConfiguration(d_ptr->mStorageConfiguration.serialize(QString::fromLatin1("StorageConfiguration")));// elementargumentserializer.cpp:102
    _valueStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueStorageConfiguration.setQualified(true);
    args.append(_valueStorageConfiguration);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetStorageConfigurationResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("StorageConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mStorageConfiguration.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetStorageConfigurationResponse::TDS__GetStorageConfigurationResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetStorageConfigurationResponse::~TDS__GetStorageConfigurationResponse()
{
}

dm::TDS__GetStorageConfigurationResponse::TDS__GetStorageConfigurationResponse( const dm::TDS__GetStorageConfigurationResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetStorageConfigurationResponse&  dm::TDS__GetStorageConfigurationResponse::operator=( const dm::TDS__GetStorageConfigurationResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__ImagingSettingsExtension203::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__ToneCompensation mToneCompensation;
    bool mToneCompensation_nil;
    dm::TT__Defogging mDefogging;
    bool mDefogging_nil;
    dm::TT__NoiseReduction mNoiseReduction;
    bool mNoiseReduction_nil;
    dm::TT__ImagingSettingsExtension204 mExtension;
    bool mExtension_nil;
};

dm::TT__ImagingSettingsExtension203::PrivateDPtr::PrivateDPtr()
    : mToneCompensation_nil(true), mDefogging_nil(true), mNoiseReduction_nil(true), mExtension_nil(true)
{
}


void dm::TT__ImagingSettingsExtension203::setToneCompensation( const dm::TT__ToneCompensation& _toneCompensation )
{
    d_ptr->mToneCompensation_nil = false;// converter_complextype.cpp:277
    d_ptr->mToneCompensation = _toneCompensation;
}

dm::TT__ToneCompensation dm::TT__ImagingSettingsExtension203::toneCompensation() const
{
    return d_ptr->mToneCompensation;
}

void dm::TT__ImagingSettingsExtension203::setDefogging( const dm::TT__Defogging& _defogging )
{
    d_ptr->mDefogging_nil = false;// converter_complextype.cpp:277
    d_ptr->mDefogging = _defogging;
}

dm::TT__Defogging dm::TT__ImagingSettingsExtension203::defogging() const
{
    return d_ptr->mDefogging;
}

void dm::TT__ImagingSettingsExtension203::setNoiseReduction( const dm::TT__NoiseReduction& _noiseReduction )
{
    d_ptr->mNoiseReduction_nil = false;// converter_complextype.cpp:277
    d_ptr->mNoiseReduction = _noiseReduction;
}

dm::TT__NoiseReduction dm::TT__ImagingSettingsExtension203::noiseReduction() const
{
    return d_ptr->mNoiseReduction;
}

void dm::TT__ImagingSettingsExtension203::setExtension( const dm::TT__ImagingSettingsExtension204& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__ImagingSettingsExtension204 dm::TT__ImagingSettingsExtension203::extension() const
{
    return d_ptr->mExtension;
}

KDSoapValue dm::TT__ImagingSettingsExtension203::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ImagingSettingsExtension203"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mToneCompensation_nil) {
        KDSoapValue _valueToneCompensation(d_ptr->mToneCompensation.serialize(QString::fromLatin1("ToneCompensation")));// elementargumentserializer.cpp:102
        _valueToneCompensation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueToneCompensation.setQualified(true);
        if (!_valueToneCompensation.isNil())
        args.append(_valueToneCompensation);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDefogging_nil) {
        KDSoapValue _valueDefogging(d_ptr->mDefogging.serialize(QString::fromLatin1("Defogging")));// elementargumentserializer.cpp:102
        _valueDefogging.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDefogging.setQualified(true);
        if (!_valueDefogging.isNil())
        args.append(_valueDefogging);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mNoiseReduction_nil) {
        KDSoapValue _valueNoiseReduction(d_ptr->mNoiseReduction.serialize(QString::fromLatin1("NoiseReduction")));// elementargumentserializer.cpp:102
        _valueNoiseReduction.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueNoiseReduction.setQualified(true);
        if (!_valueNoiseReduction.isNil())
        args.append(_valueNoiseReduction);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__ImagingSettingsExtension203::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ToneCompensation")) {// converter_complextype.cpp:354
            d_ptr->mToneCompensation.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Defogging")) {// converter_complextype.cpp:354
            d_ptr->mDefogging.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("NoiseReduction")) {// converter_complextype.cpp:354
            d_ptr->mNoiseReduction.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TT__ImagingSettingsExtension203::TT__ImagingSettingsExtension203()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ImagingSettingsExtension203::~TT__ImagingSettingsExtension203()
{
}

dm::TT__ImagingSettingsExtension203::TT__ImagingSettingsExtension203( const dm::TT__ImagingSettingsExtension203& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ImagingSettingsExtension203&  dm::TT__ImagingSettingsExtension203::operator=( const dm::TT__ImagingSettingsExtension203& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__FloatRange::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mMin;
    float mMax;
};

dm::TT__FloatRange::PrivateDPtr::PrivateDPtr()
    : mMin(0), mMax(0)
{
}


void dm::TT__FloatRange::setMin( float _min )
{
    d_ptr->mMin = _min;
}

float dm::TT__FloatRange::min() const
{
    return d_ptr->mMin;
}

void dm::TT__FloatRange::setMax( float _max )
{
    d_ptr->mMax = _max;
}

float dm::TT__FloatRange::max() const
{
    return d_ptr->mMax;
}

KDSoapValue dm::TT__FloatRange::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("FloatRange"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMin(QString::fromLatin1("Min"), QVariant::fromValue(d_ptr->mMin), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueMin.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMin.setQualified(true);
    args.append(_valueMin);// elementargumentserializer.cpp:122
    KDSoapValue _valueMax(QString::fromLatin1("Max"), QVariant::fromValue(d_ptr->mMax), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueMax.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMax.setQualified(true);
    args.append(_valueMax);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__FloatRange::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Min")) {// converter_complextype.cpp:354
            d_ptr->mMin = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Max")) {// converter_complextype.cpp:354
            d_ptr->mMax = val.value().value<float>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__FloatRange::TT__FloatRange()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__FloatRange::~TT__FloatRange()
{
}

dm::TT__FloatRange::TT__FloatRange( const dm::TT__FloatRange& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__FloatRange&  dm::TT__FloatRange::operator=( const dm::TT__FloatRange& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__EAPMethodConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__TLSConfiguration mTLSConfiguration;
    bool mTLSConfiguration_nil;
    QString mPassword;
    bool mPassword_nil;
    dm::TT__EapMethodExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__EAPMethodConfiguration::PrivateDPtr::PrivateDPtr()
    : mTLSConfiguration_nil(true), mPassword_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__EAPMethodConfiguration::setTLSConfiguration( const dm::TT__TLSConfiguration& _tLSConfiguration )
{
    d_ptr->mTLSConfiguration_nil = false;// converter_complextype.cpp:277
    d_ptr->mTLSConfiguration = _tLSConfiguration;
}

dm::TT__TLSConfiguration dm::TT__EAPMethodConfiguration::tLSConfiguration() const
{
    return d_ptr->mTLSConfiguration;
}

void dm::TT__EAPMethodConfiguration::setPassword( const QString& _password )
{
    d_ptr->mPassword_nil = false;// converter_complextype.cpp:277
    d_ptr->mPassword = _password;
}

QString dm::TT__EAPMethodConfiguration::password() const
{
    return d_ptr->mPassword;
}

void dm::TT__EAPMethodConfiguration::setExtension( const dm::TT__EapMethodExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__EapMethodExtension dm::TT__EAPMethodConfiguration::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__EAPMethodConfiguration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__EAPMethodConfiguration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__EAPMethodConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("EAPMethodConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mTLSConfiguration_nil) {
        KDSoapValue _valueTLSConfiguration(d_ptr->mTLSConfiguration.serialize(QString::fromLatin1("TLSConfiguration")));// elementargumentserializer.cpp:102
        _valueTLSConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueTLSConfiguration.setQualified(true);
        if (!_valueTLSConfiguration.isNil())
        args.append(_valueTLSConfiguration);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mPassword_nil) {
        KDSoapValue _valuePassword(QString::fromLatin1("Password"), QVariant::fromValue(d_ptr->mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valuePassword.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePassword.setQualified(true);
        if (!_valuePassword.isNil())
        args.append(_valuePassword);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__EAPMethodConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("TLSConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mTLSConfiguration.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Password")) {// converter_complextype.cpp:354
            d_ptr->mPassword = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mPassword_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__EAPMethodConfiguration::TT__EAPMethodConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__EAPMethodConfiguration::~TT__EAPMethodConfiguration()
{
}

dm::TT__EAPMethodConfiguration::TT__EAPMethodConfiguration( const dm::TT__EAPMethodConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__EAPMethodConfiguration&  dm::TT__EAPMethodConfiguration::operator=( const dm::TT__EAPMethodConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Space2DDescription::PrivateDPtr : public QSharedData
{
public:
    QString mURI;
    dm::TT__FloatRange mXRange;
    dm::TT__FloatRange mYRange;
};

void dm::TT__Space2DDescription::setURI( const QString& _uRI )
{
    d_ptr->mURI = _uRI;
}

QString dm::TT__Space2DDescription::uRI() const
{
    return d_ptr->mURI;
}

void dm::TT__Space2DDescription::setXRange( const dm::TT__FloatRange& _xRange )
{
    d_ptr->mXRange = _xRange;
}

dm::TT__FloatRange dm::TT__Space2DDescription::xRange() const
{
    return d_ptr->mXRange;
}

void dm::TT__Space2DDescription::setYRange( const dm::TT__FloatRange& _yRange )
{
    d_ptr->mYRange = _yRange;
}

dm::TT__FloatRange dm::TT__Space2DDescription::yRange() const
{
    return d_ptr->mYRange;
}

KDSoapValue dm::TT__Space2DDescription::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Space2DDescription"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueURI(QString::fromLatin1("URI"), QVariant::fromValue(d_ptr->mURI), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueURI.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueURI.setQualified(true);
    args.append(_valueURI);// elementargumentserializer.cpp:122
    KDSoapValue _valueXRange(d_ptr->mXRange.serialize(QString::fromLatin1("XRange")));// elementargumentserializer.cpp:102
    _valueXRange.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXRange.setQualified(true);
    args.append(_valueXRange);// elementargumentserializer.cpp:122
    KDSoapValue _valueYRange(d_ptr->mYRange.serialize(QString::fromLatin1("YRange")));// elementargumentserializer.cpp:102
    _valueYRange.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueYRange.setQualified(true);
    args.append(_valueYRange);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__Space2DDescription::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("URI")) {// converter_complextype.cpp:354
            d_ptr->mURI = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("XRange")) {// converter_complextype.cpp:354
            d_ptr->mXRange.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("YRange")) {// converter_complextype.cpp:354
            d_ptr->mYRange.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TT__Space2DDescription::TT__Space2DDescription()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Space2DDescription::~TT__Space2DDescription()
{
}

dm::TT__Space2DDescription::TT__Space2DDescription( const dm::TT__Space2DDescription& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Space2DDescription&  dm::TT__Space2DDescription::operator=( const dm::TT__Space2DDescription& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetDPAddressesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetDPAddressesResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetDPAddressesResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetDPAddressesResponse::TDS__SetDPAddressesResponse()
{
}

dm::TDS__SetDPAddressesResponse::~TDS__SetDPAddressesResponse()
{
}


class dm::TT__Dot11Status::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__Dot11SSIDType mSSID;
    QString mBSSID;
    bool mBSSID_nil;
    dm::TT__Dot11Cipher mPairCipher;
    bool mPairCipher_nil;
    dm::TT__Dot11Cipher mGroupCipher;
    bool mGroupCipher_nil;
    dm::TT__Dot11SignalStrength mSignalStrength;
    bool mSignalStrength_nil;
    dm::TT__ReferenceToken mActiveConfigAlias;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__Dot11Status::PrivateDPtr::PrivateDPtr()
    : mBSSID_nil(true), mPairCipher_nil(true), mGroupCipher_nil(true), mSignalStrength_nil(true), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__Dot11Status::setSSID( const dm::TT__Dot11SSIDType& _sSID )
{
    d_ptr->mSSID = _sSID;
}

dm::TT__Dot11SSIDType dm::TT__Dot11Status::sSID() const
{
    return d_ptr->mSSID;
}

void dm::TT__Dot11Status::setBSSID( const QString& _bSSID )
{
    d_ptr->mBSSID_nil = false;// converter_complextype.cpp:277
    d_ptr->mBSSID = _bSSID;
}

QString dm::TT__Dot11Status::bSSID() const
{
    return d_ptr->mBSSID;
}

void dm::TT__Dot11Status::setPairCipher( const dm::TT__Dot11Cipher& _pairCipher )
{
    d_ptr->mPairCipher_nil = false;// converter_complextype.cpp:277
    d_ptr->mPairCipher = _pairCipher;
}

dm::TT__Dot11Cipher dm::TT__Dot11Status::pairCipher() const
{
    return d_ptr->mPairCipher;
}

void dm::TT__Dot11Status::setGroupCipher( const dm::TT__Dot11Cipher& _groupCipher )
{
    d_ptr->mGroupCipher_nil = false;// converter_complextype.cpp:277
    d_ptr->mGroupCipher = _groupCipher;
}

dm::TT__Dot11Cipher dm::TT__Dot11Status::groupCipher() const
{
    return d_ptr->mGroupCipher;
}

void dm::TT__Dot11Status::setSignalStrength( const dm::TT__Dot11SignalStrength& _signalStrength )
{
    d_ptr->mSignalStrength_nil = false;// converter_complextype.cpp:277
    d_ptr->mSignalStrength = _signalStrength;
}

dm::TT__Dot11SignalStrength dm::TT__Dot11Status::signalStrength() const
{
    return d_ptr->mSignalStrength;
}

void dm::TT__Dot11Status::setActiveConfigAlias( const dm::TT__ReferenceToken& _activeConfigAlias )
{
    d_ptr->mActiveConfigAlias = _activeConfigAlias;
}

dm::TT__ReferenceToken dm::TT__Dot11Status::activeConfigAlias() const
{
    return d_ptr->mActiveConfigAlias;
}

void dm::TT__Dot11Status::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__Dot11Status::any() const
{
    return d_ptr->mAny;
}

void dm::TT__Dot11Status::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__Dot11Status::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__Dot11Status::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11Status"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueSSID(QString::fromLatin1("SSID"), d_ptr->mSSID.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11SSIDType"));// elementargumentserializer.cpp:110
    _valueSSID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueSSID.setQualified(true);
    args.append(_valueSSID);// elementargumentserializer.cpp:122
    if (!d_ptr->mBSSID_nil) {
        KDSoapValue _valueBSSID(QString::fromLatin1("BSSID"), QVariant::fromValue(d_ptr->mBSSID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueBSSID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueBSSID.setQualified(true);
        if (!_valueBSSID.isNil())
        args.append(_valueBSSID);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mPairCipher_nil) {
        KDSoapValue _valuePairCipher(QString::fromLatin1("PairCipher"), d_ptr->mPairCipher.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11Cipher"));// elementargumentserializer.cpp:110
        _valuePairCipher.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePairCipher.setQualified(true);
        if (!_valuePairCipher.isNil())
        args.append(_valuePairCipher);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mGroupCipher_nil) {
        KDSoapValue _valueGroupCipher(QString::fromLatin1("GroupCipher"), d_ptr->mGroupCipher.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11Cipher"));// elementargumentserializer.cpp:110
        _valueGroupCipher.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueGroupCipher.setQualified(true);
        if (!_valueGroupCipher.isNil())
        args.append(_valueGroupCipher);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSignalStrength_nil) {
        KDSoapValue _valueSignalStrength(QString::fromLatin1("SignalStrength"), d_ptr->mSignalStrength.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11SignalStrength"));// elementargumentserializer.cpp:110
        _valueSignalStrength.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSignalStrength.setQualified(true);
        if (!_valueSignalStrength.isNil())
        args.append(_valueSignalStrength);// elementargumentserializer.cpp:122
    }
    KDSoapValue _valueActiveConfigAlias(QString::fromLatin1("ActiveConfigAlias"), d_ptr->mActiveConfigAlias.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueActiveConfigAlias.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueActiveConfigAlias.setQualified(true);
    args.append(_valueActiveConfigAlias);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Dot11Status::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("SSID")) {// converter_complextype.cpp:354
            d_ptr->mSSID.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("BSSID")) {// converter_complextype.cpp:354
            d_ptr->mBSSID = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mBSSID_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("PairCipher")) {// converter_complextype.cpp:354
            d_ptr->mPairCipher.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mPairCipher_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("GroupCipher")) {// converter_complextype.cpp:354
            d_ptr->mGroupCipher.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mGroupCipher_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("SignalStrength")) {// converter_complextype.cpp:354
            d_ptr->mSignalStrength.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mSignalStrength_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("ActiveConfigAlias")) {// converter_complextype.cpp:354
            d_ptr->mActiveConfigAlias.deserialize(val.value());// converter_complextype.cpp:373
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__Dot11Status::TT__Dot11Status()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Dot11Status::~TT__Dot11Status()
{
}

dm::TT__Dot11Status::TT__Dot11Status( const dm::TT__Dot11Status& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Dot11Status&  dm::TT__Dot11Status::operator=( const dm::TT__Dot11Status& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetSystemLog::PrivateDPtr : public QSharedData
{
public:
    dm::TT__SystemLogType mLogType;
};

void dm::TDS__GetSystemLog::setLogType( const dm::TT__SystemLogType& _logType )
{
    d_ptr->mLogType = _logType;
}

dm::TT__SystemLogType dm::TDS__GetSystemLog::logType() const
{
    return d_ptr->mLogType;
}

KDSoapValue dm::TDS__GetSystemLog::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetSystemLog"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueLogType(QString::fromLatin1("LogType"), d_ptr->mLogType.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SystemLogType"));// elementargumentserializer.cpp:110
    _valueLogType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueLogType.setQualified(true);
    args.append(_valueLogType);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetSystemLog::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("LogType")) {// converter_complextype.cpp:354
            d_ptr->mLogType.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__GetSystemLog::TDS__GetSystemLog()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetSystemLog::~TDS__GetSystemLog()
{
}

dm::TDS__GetSystemLog::TDS__GetSystemLog( const dm::TDS__GetSystemLog& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetSystemLog&  dm::TDS__GetSystemLog::operator=( const dm::TDS__GetSystemLog& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__CapabilityCategory > mCategory;
    bool mCategory_nil;
};

dm::TDS__GetCapabilities::PrivateDPtr::PrivateDPtr()
    : mCategory_nil(true)
{
}


void dm::TDS__GetCapabilities::setCategory( const QList< dm::TT__CapabilityCategory >& _category )
{
    d_ptr->mCategory_nil = false;// converter_complextype.cpp:277
    d_ptr->mCategory = _category;
}

QList< dm::TT__CapabilityCategory > dm::TDS__GetCapabilities::category() const
{
    return d_ptr->mCategory;
}

KDSoapValue dm::TDS__GetCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mCategory.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueCategory(QString::fromLatin1("Category"), d_ptr->mCategory.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("CapabilityCategory"));// elementargumentserializer.cpp:110
        _valueCategory.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueCategory.setQualified(true);
        args.append(_valueCategory);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Category")) {// converter_complextype.cpp:354
            dm::TT__CapabilityCategory mCategoryTemp;// converter_complextype.cpp:412
            mCategoryTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mCategory.append(mCategoryTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetCapabilities::TDS__GetCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetCapabilities::~TDS__GetCapabilities()
{
}

dm::TDS__GetCapabilities::TDS__GetCapabilities( const dm::TDS__GetCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetCapabilities&  dm::TDS__GetCapabilities::operator=( const dm::TDS__GetCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetDiscoveryModeResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__DiscoveryMode mDiscoveryMode;
};

void dm::TDS__GetDiscoveryModeResponse::setDiscoveryMode( const dm::TT__DiscoveryMode& _discoveryMode )
{
    d_ptr->mDiscoveryMode = _discoveryMode;
}

dm::TT__DiscoveryMode dm::TDS__GetDiscoveryModeResponse::discoveryMode() const
{
    return d_ptr->mDiscoveryMode;
}

KDSoapValue dm::TDS__GetDiscoveryModeResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDiscoveryModeResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDiscoveryMode(QString::fromLatin1("DiscoveryMode"), d_ptr->mDiscoveryMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DiscoveryMode"));// elementargumentserializer.cpp:110
    _valueDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDiscoveryMode.setQualified(true);
    args.append(_valueDiscoveryMode);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetDiscoveryModeResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DiscoveryMode")) {// converter_complextype.cpp:354
            d_ptr->mDiscoveryMode.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__GetDiscoveryModeResponse::TDS__GetDiscoveryModeResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetDiscoveryModeResponse::~TDS__GetDiscoveryModeResponse()
{
}

dm::TDS__GetDiscoveryModeResponse::TDS__GetDiscoveryModeResponse( const dm::TDS__GetDiscoveryModeResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetDiscoveryModeResponse&  dm::TDS__GetDiscoveryModeResponse::operator=( const dm::TDS__GetDiscoveryModeResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetServicesResponse::PrivateDPtr : public QSharedData
{
public:
    QList< dm::TDS__Service > mService;
};

void dm::TDS__GetServicesResponse::setService( const QList< dm::TDS__Service >& _service )
{
    d_ptr->mService = _service;
}

QList< dm::TDS__Service > dm::TDS__GetServicesResponse::service() const
{
    return d_ptr->mService;
}

KDSoapValue dm::TDS__GetServicesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetServicesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mService.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueService(d_ptr->mService.at(i).serialize(QString::fromLatin1("Service")));// elementargumentserializer.cpp:102
        _valueService.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueService.setQualified(true);
        args.append(_valueService);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetServicesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Service")) {// converter_complextype.cpp:354
            dm::TDS__Service mServiceTemp;// converter_complextype.cpp:412
            mServiceTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mService.append(mServiceTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetServicesResponse::TDS__GetServicesResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetServicesResponse::~TDS__GetServicesResponse()
{
}

dm::TDS__GetServicesResponse::TDS__GetServicesResponse( const dm::TDS__GetServicesResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetServicesResponse&  dm::TDS__GetServicesResponse::operator=( const dm::TDS__GetServicesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetCapabilitiesResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__Capabilities mCapabilities;
};

void dm::TDS__GetCapabilitiesResponse::setCapabilities( const dm::TT__Capabilities& _capabilities )
{
    d_ptr->mCapabilities = _capabilities;
}

dm::TT__Capabilities dm::TDS__GetCapabilitiesResponse::capabilities() const
{
    return d_ptr->mCapabilities;
}

KDSoapValue dm::TDS__GetCapabilitiesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetCapabilitiesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueCapabilities(d_ptr->mCapabilities.serialize(QString::fromLatin1("Capabilities")));// elementargumentserializer.cpp:102
    _valueCapabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCapabilities.setQualified(true);
    args.append(_valueCapabilities);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetCapabilitiesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Capabilities")) {// converter_complextype.cpp:354
            d_ptr->mCapabilities.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetCapabilitiesResponse::TDS__GetCapabilitiesResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetCapabilitiesResponse::~TDS__GetCapabilitiesResponse()
{
}

dm::TDS__GetCapabilitiesResponse::TDS__GetCapabilitiesResponse( const dm::TDS__GetCapabilitiesResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetCapabilitiesResponse&  dm::TDS__GetCapabilitiesResponse::operator=( const dm::TDS__GetCapabilitiesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Scope::PrivateDPtr : public QSharedData
{
public:
    dm::TT__ScopeDefinition mScopeDef;
    QString mScopeItem;
};

void dm::TT__Scope::setScopeDef( const dm::TT__ScopeDefinition& _scopeDef )
{
    d_ptr->mScopeDef = _scopeDef;
}

dm::TT__ScopeDefinition dm::TT__Scope::scopeDef() const
{
    return d_ptr->mScopeDef;
}

void dm::TT__Scope::setScopeItem( const QString& _scopeItem )
{
    d_ptr->mScopeItem = _scopeItem;
}

QString dm::TT__Scope::scopeItem() const
{
    return d_ptr->mScopeItem;
}

KDSoapValue dm::TT__Scope::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Scope"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueScopeDef(QString::fromLatin1("ScopeDef"), d_ptr->mScopeDef.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ScopeDefinition"));// elementargumentserializer.cpp:110
    _valueScopeDef.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueScopeDef.setQualified(true);
    args.append(_valueScopeDef);// elementargumentserializer.cpp:122
    KDSoapValue _valueScopeItem(QString::fromLatin1("ScopeItem"), QVariant::fromValue(d_ptr->mScopeItem), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueScopeItem.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueScopeItem.setQualified(true);
    args.append(_valueScopeItem);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__Scope::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ScopeDef")) {// converter_complextype.cpp:354
            d_ptr->mScopeDef.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("ScopeItem")) {// converter_complextype.cpp:354
            d_ptr->mScopeItem = val.value().value<QString>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__Scope::TT__Scope()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Scope::~TT__Scope()
{
}

dm::TT__Scope::TT__Scope( const dm::TT__Scope& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Scope&  dm::TT__Scope::operator=( const dm::TT__Scope& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkInterfaceExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__IANA_IfTypes mInterfaceType;
    QList< dm::TT__Dot3Configuration > mDot3;
    bool mDot3_nil;
    QList< dm::TT__Dot11Configuration > mDot11;
    bool mDot11_nil;
    dm::TT__NetworkInterfaceExtension2 mExtension;
    bool mExtension_nil;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__NetworkInterfaceExtension::PrivateDPtr::PrivateDPtr()
    : mDot3_nil(true), mDot11_nil(true), mExtension_nil(true), mAny_nil(true)
{
}


void dm::TT__NetworkInterfaceExtension::setInterfaceType( const dm::TT__IANA_IfTypes& _interfaceType )
{
    d_ptr->mInterfaceType = _interfaceType;
}

dm::TT__IANA_IfTypes dm::TT__NetworkInterfaceExtension::interfaceType() const
{
    return d_ptr->mInterfaceType;
}

void dm::TT__NetworkInterfaceExtension::setDot3( const QList< dm::TT__Dot3Configuration >& _dot3 )
{
    d_ptr->mDot3_nil = false;// converter_complextype.cpp:277
    d_ptr->mDot3 = _dot3;
}

QList< dm::TT__Dot3Configuration > dm::TT__NetworkInterfaceExtension::dot3() const
{
    return d_ptr->mDot3;
}

void dm::TT__NetworkInterfaceExtension::setDot11( const QList< dm::TT__Dot11Configuration >& _dot11 )
{
    d_ptr->mDot11_nil = false;// converter_complextype.cpp:277
    d_ptr->mDot11 = _dot11;
}

QList< dm::TT__Dot11Configuration > dm::TT__NetworkInterfaceExtension::dot11() const
{
    return d_ptr->mDot11;
}

void dm::TT__NetworkInterfaceExtension::setExtension( const dm::TT__NetworkInterfaceExtension2& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__NetworkInterfaceExtension2 dm::TT__NetworkInterfaceExtension::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__NetworkInterfaceExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__NetworkInterfaceExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__NetworkInterfaceExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkInterfaceExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueInterfaceType(QString::fromLatin1("InterfaceType"), d_ptr->mInterfaceType.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IANA-IfTypes"));// elementargumentserializer.cpp:110
    _valueInterfaceType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueInterfaceType.setQualified(true);
    args.append(_valueInterfaceType);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mDot3.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueDot3(d_ptr->mDot3.at(i).serialize(QString::fromLatin1("Dot3")));// elementargumentserializer.cpp:102
        _valueDot3.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDot3.setQualified(true);
        args.append(_valueDot3);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mDot11.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueDot11(d_ptr->mDot11.at(i).serialize(QString::fromLatin1("Dot11")));// elementargumentserializer.cpp:102
        _valueDot11.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDot11.setQualified(true);
        args.append(_valueDot11);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__NetworkInterfaceExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("InterfaceType")) {// converter_complextype.cpp:354
            d_ptr->mInterfaceType.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Dot3")) {// converter_complextype.cpp:354
            dm::TT__Dot3Configuration mDot3Temp;// converter_complextype.cpp:412
            mDot3Temp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mDot3.append(mDot3Temp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Dot11")) {// converter_complextype.cpp:354
            dm::TT__Dot11Configuration mDot11Temp;// converter_complextype.cpp:412
            mDot11Temp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mDot11.append(mDot11Temp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__NetworkInterfaceExtension::TT__NetworkInterfaceExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkInterfaceExtension::~TT__NetworkInterfaceExtension()
{
}

dm::TT__NetworkInterfaceExtension::TT__NetworkInterfaceExtension( const dm::TT__NetworkInterfaceExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkInterfaceExtension&  dm::TT__NetworkInterfaceExtension::operator=( const dm::TT__NetworkInterfaceExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetRemoteDiscoveryMode::PrivateDPtr : public QSharedData
{
public:
    dm::TT__DiscoveryMode mRemoteDiscoveryMode;
};

void dm::TDS__SetRemoteDiscoveryMode::setRemoteDiscoveryMode( const dm::TT__DiscoveryMode& _remoteDiscoveryMode )
{
    d_ptr->mRemoteDiscoveryMode = _remoteDiscoveryMode;
}

dm::TT__DiscoveryMode dm::TDS__SetRemoteDiscoveryMode::remoteDiscoveryMode() const
{
    return d_ptr->mRemoteDiscoveryMode;
}

KDSoapValue dm::TDS__SetRemoteDiscoveryMode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetRemoteDiscoveryMode"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueRemoteDiscoveryMode(QString::fromLatin1("RemoteDiscoveryMode"), d_ptr->mRemoteDiscoveryMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DiscoveryMode"));// elementargumentserializer.cpp:110
    _valueRemoteDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRemoteDiscoveryMode.setQualified(true);
    args.append(_valueRemoteDiscoveryMode);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetRemoteDiscoveryMode::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("RemoteDiscoveryMode")) {// converter_complextype.cpp:354
            d_ptr->mRemoteDiscoveryMode.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__SetRemoteDiscoveryMode::TDS__SetRemoteDiscoveryMode()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetRemoteDiscoveryMode::~TDS__SetRemoteDiscoveryMode()
{
}

dm::TDS__SetRemoteDiscoveryMode::TDS__SetRemoteDiscoveryMode( const dm::TDS__SetRemoteDiscoveryMode& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetRemoteDiscoveryMode&  dm::TDS__SetRemoteDiscoveryMode::operator=( const dm::TDS__SetRemoteDiscoveryMode& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SystemRebootResponse::PrivateDPtr : public QSharedData
{
public:
    QString mMessage;
};

void dm::TDS__SystemRebootResponse::setMessage( const QString& _message )
{
    d_ptr->mMessage = _message;
}

QString dm::TDS__SystemRebootResponse::message() const
{
    return d_ptr->mMessage;
}

KDSoapValue dm::TDS__SystemRebootResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SystemRebootResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMessage(QString::fromLatin1("Message"), QVariant::fromValue(d_ptr->mMessage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueMessage.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueMessage.setQualified(true);
    args.append(_valueMessage);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SystemRebootResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Message")) {// converter_complextype.cpp:354
            d_ptr->mMessage = val.value().value<QString>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__SystemRebootResponse::TDS__SystemRebootResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SystemRebootResponse::~TDS__SystemRebootResponse()
{
}

dm::TDS__SystemRebootResponse::TDS__SystemRebootResponse( const dm::TDS__SystemRebootResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SystemRebootResponse&  dm::TDS__SystemRebootResponse::operator=( const dm::TDS__SystemRebootResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__VideoResolution::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mWidth;
    int mHeight;
};

dm::TT__VideoResolution::PrivateDPtr::PrivateDPtr()
    : mWidth(0), mHeight(0)
{
}


void dm::TT__VideoResolution::setWidth( int _width )
{
    d_ptr->mWidth = _width;
}

int dm::TT__VideoResolution::width() const
{
    return d_ptr->mWidth;
}

void dm::TT__VideoResolution::setHeight( int _height )
{
    d_ptr->mHeight = _height;
}

int dm::TT__VideoResolution::height() const
{
    return d_ptr->mHeight;
}

KDSoapValue dm::TT__VideoResolution::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("VideoResolution"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueWidth(QString::fromLatin1("Width"), QVariant::fromValue(d_ptr->mWidth), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueWidth.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueWidth.setQualified(true);
    args.append(_valueWidth);// elementargumentserializer.cpp:122
    KDSoapValue _valueHeight(QString::fromLatin1("Height"), QVariant::fromValue(d_ptr->mHeight), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueHeight.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueHeight.setQualified(true);
    args.append(_valueHeight);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__VideoResolution::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Width")) {// converter_complextype.cpp:354
            d_ptr->mWidth = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Height")) {// converter_complextype.cpp:354
            d_ptr->mHeight = val.value().value<int>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__VideoResolution::TT__VideoResolution()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__VideoResolution::~TT__VideoResolution()
{
}

dm::TT__VideoResolution::TT__VideoResolution( const dm::TT__VideoResolution& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__VideoResolution&  dm::TT__VideoResolution::operator=( const dm::TT__VideoResolution& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NoiseReduction::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mLevel;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__NoiseReduction::PrivateDPtr::PrivateDPtr()
    : mLevel(0), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__NoiseReduction::setLevel( float _level )
{
    d_ptr->mLevel = _level;
}

float dm::TT__NoiseReduction::level() const
{
    return d_ptr->mLevel;
}

void dm::TT__NoiseReduction::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__NoiseReduction::any() const
{
    return d_ptr->mAny;
}

void dm::TT__NoiseReduction::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__NoiseReduction::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__NoiseReduction::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NoiseReduction"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueLevel(QString::fromLatin1("Level"), QVariant::fromValue(d_ptr->mLevel), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueLevel.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueLevel.setQualified(true);
    args.append(_valueLevel);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__NoiseReduction::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Level")) {// converter_complextype.cpp:354
            d_ptr->mLevel = val.value().value<float>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__NoiseReduction::TT__NoiseReduction()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NoiseReduction::~TT__NoiseReduction()
{
}

dm::TT__NoiseReduction::TT__NoiseReduction( const dm::TT__NoiseReduction& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NoiseReduction&  dm::TT__NoiseReduction::operator=( const dm::TT__NoiseReduction& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__IPv4NetworkInterfaceSetConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mEnabled;
    bool mEnabled_nil;
    QList< dm::TT__PrefixedIPv4Address > mManual;
    bool mManual_nil;
    bool mDHCP;
    bool mDHCP_nil;
};

dm::TT__IPv4NetworkInterfaceSetConfiguration::PrivateDPtr::PrivateDPtr()
    : mEnabled(false), mEnabled_nil(true), mManual_nil(true), mDHCP(false), mDHCP_nil(true)
{
}


void dm::TT__IPv4NetworkInterfaceSetConfiguration::setEnabled( bool _enabled )
{
    d_ptr->mEnabled_nil = false;// converter_complextype.cpp:277
    d_ptr->mEnabled = _enabled;
}

bool dm::TT__IPv4NetworkInterfaceSetConfiguration::enabled() const
{
    return d_ptr->mEnabled;
}

void dm::TT__IPv4NetworkInterfaceSetConfiguration::setManual( const QList< dm::TT__PrefixedIPv4Address >& _manual )
{
    d_ptr->mManual_nil = false;// converter_complextype.cpp:277
    d_ptr->mManual = _manual;
}

QList< dm::TT__PrefixedIPv4Address > dm::TT__IPv4NetworkInterfaceSetConfiguration::manual() const
{
    return d_ptr->mManual;
}

void dm::TT__IPv4NetworkInterfaceSetConfiguration::setDHCP( bool _dHCP )
{
    d_ptr->mDHCP_nil = false;// converter_complextype.cpp:277
    d_ptr->mDHCP = _dHCP;
}

bool dm::TT__IPv4NetworkInterfaceSetConfiguration::dHCP() const
{
    return d_ptr->mDHCP;
}

KDSoapValue dm::TT__IPv4NetworkInterfaceSetConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv4NetworkInterfaceSetConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mEnabled_nil) {
        KDSoapValue _valueEnabled(QString::fromLatin1("Enabled"), QVariant::fromValue(d_ptr->mEnabled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueEnabled.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueEnabled.setQualified(true);
        if (!_valueEnabled.isNil())
        args.append(_valueEnabled);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mManual.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueManual(d_ptr->mManual.at(i).serialize(QString::fromLatin1("Manual")));// elementargumentserializer.cpp:102
        _valueManual.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueManual.setQualified(true);
        args.append(_valueManual);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDHCP_nil) {
        KDSoapValue _valueDHCP(QString::fromLatin1("DHCP"), QVariant::fromValue(d_ptr->mDHCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDHCP.setQualified(true);
        if (!_valueDHCP.isNil())
        args.append(_valueDHCP);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__IPv4NetworkInterfaceSetConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Enabled")) {// converter_complextype.cpp:354
            d_ptr->mEnabled = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mEnabled_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Manual")) {// converter_complextype.cpp:354
            dm::TT__PrefixedIPv4Address mManualTemp;// converter_complextype.cpp:412
            mManualTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mManual.append(mManualTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("DHCP")) {// converter_complextype.cpp:354
            d_ptr->mDHCP = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mDHCP_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TT__IPv4NetworkInterfaceSetConfiguration::TT__IPv4NetworkInterfaceSetConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IPv4NetworkInterfaceSetConfiguration::~TT__IPv4NetworkInterfaceSetConfiguration()
{
}

dm::TT__IPv4NetworkInterfaceSetConfiguration::TT__IPv4NetworkInterfaceSetConfiguration( const dm::TT__IPv4NetworkInterfaceSetConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IPv4NetworkInterfaceSetConfiguration&  dm::TT__IPv4NetworkInterfaceSetConfiguration::operator=( const dm::TT__IPv4NetworkInterfaceSetConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetDNSResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetDNSResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetDNSResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetDNSResponse::TDS__SetDNSResponse()
{
}

dm::TDS__SetDNSResponse::~TDS__SetDNSResponse()
{
}


class dm::TT__BackupFile::PrivateDPtr : public QSharedData
{
public:
    QString mName;
    dm::TT__AttachmentData mData;
};

void dm::TT__BackupFile::setName( const QString& _name )
{
    d_ptr->mName = _name;
}

QString dm::TT__BackupFile::name() const
{
    return d_ptr->mName;
}

void dm::TT__BackupFile::setData( const dm::TT__AttachmentData& _data )
{
    d_ptr->mData = _data;
}

dm::TT__AttachmentData dm::TT__BackupFile::data() const
{
    return d_ptr->mData;
}

KDSoapValue dm::TT__BackupFile::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("BackupFile"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueName.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueName.setQualified(true);
    args.append(_valueName);// elementargumentserializer.cpp:122
    KDSoapValue _valueData(d_ptr->mData.serialize(QString::fromLatin1("Data")));// elementargumentserializer.cpp:102
    _valueData.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueData.setQualified(true);
    args.append(_valueData);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__BackupFile::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Name")) {// converter_complextype.cpp:354
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Data")) {// converter_complextype.cpp:354
            d_ptr->mData.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TT__BackupFile::TT__BackupFile()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__BackupFile::~TT__BackupFile()
{
}

dm::TT__BackupFile::TT__BackupFile( const dm::TT__BackupFile& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__BackupFile&  dm::TT__BackupFile::operator=( const dm::TT__BackupFile& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__FocusConfiguration20Extension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__FocusConfiguration20Extension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__FocusConfiguration20Extension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__FocusConfiguration20Extension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__FocusConfiguration20Extension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("FocusConfiguration20Extension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__FocusConfiguration20Extension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__FocusConfiguration20Extension::TT__FocusConfiguration20Extension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__FocusConfiguration20Extension::~TT__FocusConfiguration20Extension()
{
}

dm::TT__FocusConfiguration20Extension::TT__FocusConfiguration20Extension( const dm::TT__FocusConfiguration20Extension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__FocusConfiguration20Extension&  dm::TT__FocusConfiguration20Extension::operator=( const dm::TT__FocusConfiguration20Extension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetHostnameResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetHostnameResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetHostnameResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetHostnameResponse::TDS__SetHostnameResponse()
{
}

dm::TDS__SetHostnameResponse::~TDS__SetHostnameResponse()
{
}


KDSoapValue dm::TDS__SystemReboot::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SystemReboot"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SystemReboot::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SystemReboot::TDS__SystemReboot()
{
}

dm::TDS__SystemReboot::~TDS__SystemReboot()
{
}


class dm::TT__CapabilitiesExtension2::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__CapabilitiesExtension2::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__CapabilitiesExtension2::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__CapabilitiesExtension2::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__CapabilitiesExtension2::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("CapabilitiesExtension2"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__CapabilitiesExtension2::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__CapabilitiesExtension2::TT__CapabilitiesExtension2()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__CapabilitiesExtension2::~TT__CapabilitiesExtension2()
{
}

dm::TT__CapabilitiesExtension2::TT__CapabilitiesExtension2( const dm::TT__CapabilitiesExtension2& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__CapabilitiesExtension2&  dm::TT__CapabilitiesExtension2::operator=( const dm::TT__CapabilitiesExtension2& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkInterfaceExtension2::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__NetworkInterfaceExtension2::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__NetworkInterfaceExtension2::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__NetworkInterfaceExtension2::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__NetworkInterfaceExtension2::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkInterfaceExtension2"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__NetworkInterfaceExtension2::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__NetworkInterfaceExtension2::TT__NetworkInterfaceExtension2()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkInterfaceExtension2::~TT__NetworkInterfaceExtension2()
{
}

dm::TT__NetworkInterfaceExtension2::TT__NetworkInterfaceExtension2( const dm::TT__NetworkInterfaceExtension2& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkInterfaceExtension2&  dm::TT__NetworkInterfaceExtension2::operator=( const dm::TT__NetworkInterfaceExtension2& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetPkcs10Request::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCertificateID;
    QString mSubject;
    bool mSubject_nil;
    dm::TT__BinaryData mAttributes;
    bool mAttributes_nil;
};

dm::TDS__GetPkcs10Request::PrivateDPtr::PrivateDPtr()
    : mSubject_nil(true), mAttributes_nil(true)
{
}


void dm::TDS__GetPkcs10Request::setCertificateID( const QString& _certificateID )
{
    d_ptr->mCertificateID = _certificateID;
}

QString dm::TDS__GetPkcs10Request::certificateID() const
{
    return d_ptr->mCertificateID;
}

void dm::TDS__GetPkcs10Request::setSubject( const QString& _subject )
{
    d_ptr->mSubject_nil = false;// converter_complextype.cpp:277
    d_ptr->mSubject = _subject;
}

QString dm::TDS__GetPkcs10Request::subject() const
{
    return d_ptr->mSubject;
}

void dm::TDS__GetPkcs10Request::setAttributes( const dm::TT__BinaryData& _attributes )
{
    d_ptr->mAttributes_nil = false;// converter_complextype.cpp:277
    d_ptr->mAttributes = _attributes;
}

dm::TT__BinaryData dm::TDS__GetPkcs10Request::attributes() const
{
    return d_ptr->mAttributes;
}

KDSoapValue dm::TDS__GetPkcs10Request::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetPkcs10Request"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueCertificateID(QString::fromLatin1("CertificateID"), QVariant::fromValue(d_ptr->mCertificateID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
    _valueCertificateID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCertificateID.setQualified(true);
    args.append(_valueCertificateID);// elementargumentserializer.cpp:122
    if (!d_ptr->mSubject_nil) {
        KDSoapValue _valueSubject(QString::fromLatin1("Subject"), QVariant::fromValue(d_ptr->mSubject), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueSubject.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueSubject.setQualified(true);
        if (!_valueSubject.isNil())
        args.append(_valueSubject);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mAttributes_nil) {
        KDSoapValue _valueAttributes(d_ptr->mAttributes.serialize(QString::fromLatin1("Attributes")));// elementargumentserializer.cpp:102
        _valueAttributes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueAttributes.setQualified(true);
        if (!_valueAttributes.isNil())
        args.append(_valueAttributes);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetPkcs10Request::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateID")) {// converter_complextype.cpp:354
            d_ptr->mCertificateID = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Subject")) {// converter_complextype.cpp:354
            d_ptr->mSubject = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mSubject_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Attributes")) {// converter_complextype.cpp:354
            d_ptr->mAttributes.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetPkcs10Request::TDS__GetPkcs10Request()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetPkcs10Request::~TDS__GetPkcs10Request()
{
}

dm::TDS__GetPkcs10Request::TDS__GetPkcs10Request( const dm::TDS__GetPkcs10Request& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetPkcs10Request&  dm::TDS__GetPkcs10Request::operator=( const dm::TDS__GetPkcs10Request& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetAccessPolicy::PrivateDPtr : public QSharedData
{
public:
    dm::TT__BinaryData mPolicyFile;
};

void dm::TDS__SetAccessPolicy::setPolicyFile( const dm::TT__BinaryData& _policyFile )
{
    d_ptr->mPolicyFile = _policyFile;
}

dm::TT__BinaryData dm::TDS__SetAccessPolicy::policyFile() const
{
    return d_ptr->mPolicyFile;
}

KDSoapValue dm::TDS__SetAccessPolicy::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetAccessPolicy"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valuePolicyFile(d_ptr->mPolicyFile.serialize(QString::fromLatin1("PolicyFile")));// elementargumentserializer.cpp:102
    _valuePolicyFile.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valuePolicyFile.setQualified(true);
    args.append(_valuePolicyFile);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetAccessPolicy::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("PolicyFile")) {// converter_complextype.cpp:354
            d_ptr->mPolicyFile.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__SetAccessPolicy::TDS__SetAccessPolicy()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetAccessPolicy::~TDS__SetAccessPolicy()
{
}

dm::TDS__SetAccessPolicy::TDS__SetAccessPolicy( const dm::TDS__SetAccessPolicy& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetAccessPolicy&  dm::TDS__SetAccessPolicy::operator=( const dm::TDS__SetAccessPolicy& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkHost::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__NetworkHostType mType;
    dm::TT__IPv4Address mIPv4Address;
    bool mIPv4Address_nil;
    dm::TT__IPv6Address mIPv6Address;
    bool mIPv6Address_nil;
    dm::TT__DNSName mDNSname;
    bool mDNSname_nil;
    dm::TT__NetworkHostExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__NetworkHost::PrivateDPtr::PrivateDPtr()
    : mIPv4Address_nil(true), mIPv6Address_nil(true), mDNSname_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__NetworkHost::setType( const dm::TT__NetworkHostType& _type )
{
    d_ptr->mType = _type;
}

dm::TT__NetworkHostType dm::TT__NetworkHost::type() const
{
    return d_ptr->mType;
}

void dm::TT__NetworkHost::setIPv4Address( const dm::TT__IPv4Address& _iPv4Address )
{
    d_ptr->mIPv4Address_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv4Address = _iPv4Address;
}

dm::TT__IPv4Address dm::TT__NetworkHost::iPv4Address() const
{
    return d_ptr->mIPv4Address;
}

void dm::TT__NetworkHost::setIPv6Address( const dm::TT__IPv6Address& _iPv6Address )
{
    d_ptr->mIPv6Address_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv6Address = _iPv6Address;
}

dm::TT__IPv6Address dm::TT__NetworkHost::iPv6Address() const
{
    return d_ptr->mIPv6Address;
}

void dm::TT__NetworkHost::setDNSname( const dm::TT__DNSName& _dNSname )
{
    d_ptr->mDNSname_nil = false;// converter_complextype.cpp:277
    d_ptr->mDNSname = _dNSname;
}

dm::TT__DNSName dm::TT__NetworkHost::dNSname() const
{
    return d_ptr->mDNSname;
}

void dm::TT__NetworkHost::setExtension( const dm::TT__NetworkHostExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__NetworkHostExtension dm::TT__NetworkHost::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__NetworkHost::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__NetworkHost::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__NetworkHost::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkHost"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueType(QString::fromLatin1("Type"), d_ptr->mType.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkHostType"));// elementargumentserializer.cpp:110
    _valueType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueType.setQualified(true);
    args.append(_valueType);// elementargumentserializer.cpp:122
    if (!d_ptr->mIPv4Address_nil) {
        KDSoapValue _valueIPv4Address(QString::fromLatin1("IPv4Address"), d_ptr->mIPv4Address.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv4Address"));// elementargumentserializer.cpp:110
        _valueIPv4Address.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPv4Address.setQualified(true);
        if (!_valueIPv4Address.isNil())
        args.append(_valueIPv4Address);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mIPv6Address_nil) {
        KDSoapValue _valueIPv6Address(QString::fromLatin1("IPv6Address"), d_ptr->mIPv6Address.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv6Address"));// elementargumentserializer.cpp:110
        _valueIPv6Address.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPv6Address.setQualified(true);
        if (!_valueIPv6Address.isNil())
        args.append(_valueIPv6Address);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDNSname_nil) {
        KDSoapValue _valueDNSname(QString::fromLatin1("DNSname"), d_ptr->mDNSname.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DNSName"));// elementargumentserializer.cpp:110
        _valueDNSname.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDNSname.setQualified(true);
        if (!_valueDNSname.isNil())
        args.append(_valueDNSname);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__NetworkHost::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Type")) {// converter_complextype.cpp:354
            d_ptr->mType.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("IPv4Address")) {// converter_complextype.cpp:354
            d_ptr->mIPv4Address.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mIPv4Address_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("IPv6Address")) {// converter_complextype.cpp:354
            d_ptr->mIPv6Address.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mIPv6Address_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("DNSname")) {// converter_complextype.cpp:354
            d_ptr->mDNSname.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mDNSname_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__NetworkHost::TT__NetworkHost()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkHost::~TT__NetworkHost()
{
}

dm::TT__NetworkHost::TT__NetworkHost( const dm::TT__NetworkHost& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkHost&  dm::TT__NetworkHost::operator=( const dm::TT__NetworkHost& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetDNSResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__DNSInformation mDNSInformation;
};

void dm::TDS__GetDNSResponse::setDNSInformation( const dm::TT__DNSInformation& _dNSInformation )
{
    d_ptr->mDNSInformation = _dNSInformation;
}

dm::TT__DNSInformation dm::TDS__GetDNSResponse::dNSInformation() const
{
    return d_ptr->mDNSInformation;
}

KDSoapValue dm::TDS__GetDNSResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDNSResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDNSInformation(d_ptr->mDNSInformation.serialize(QString::fromLatin1("DNSInformation")));// elementargumentserializer.cpp:102
    _valueDNSInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDNSInformation.setQualified(true);
    args.append(_valueDNSInformation);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetDNSResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DNSInformation")) {// converter_complextype.cpp:354
            d_ptr->mDNSInformation.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetDNSResponse::TDS__GetDNSResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetDNSResponse::~TDS__GetDNSResponse()
{
}

dm::TDS__GetDNSResponse::TDS__GetDNSResponse( const dm::TDS__GetDNSResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetDNSResponse&  dm::TDS__GetDNSResponse::operator=( const dm::TDS__GetDNSResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkGateway::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__IPv4Address > mIPv4Address;
    bool mIPv4Address_nil;
    QList< dm::TT__IPv6Address > mIPv6Address;
    bool mIPv6Address_nil;
};

dm::TT__NetworkGateway::PrivateDPtr::PrivateDPtr()
    : mIPv4Address_nil(true), mIPv6Address_nil(true)
{
}


void dm::TT__NetworkGateway::setIPv4Address( const QList< dm::TT__IPv4Address >& _iPv4Address )
{
    d_ptr->mIPv4Address_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv4Address = _iPv4Address;
}

QList< dm::TT__IPv4Address > dm::TT__NetworkGateway::iPv4Address() const
{
    return d_ptr->mIPv4Address;
}

void dm::TT__NetworkGateway::setIPv6Address( const QList< dm::TT__IPv6Address >& _iPv6Address )
{
    d_ptr->mIPv6Address_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv6Address = _iPv6Address;
}

QList< dm::TT__IPv6Address > dm::TT__NetworkGateway::iPv6Address() const
{
    return d_ptr->mIPv6Address;
}

KDSoapValue dm::TT__NetworkGateway::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkGateway"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mIPv4Address.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueIPv4Address(QString::fromLatin1("IPv4Address"), d_ptr->mIPv4Address.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv4Address"));// elementargumentserializer.cpp:110
        _valueIPv4Address.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPv4Address.setQualified(true);
        args.append(_valueIPv4Address);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mIPv6Address.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueIPv6Address(QString::fromLatin1("IPv6Address"), d_ptr->mIPv6Address.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv6Address"));// elementargumentserializer.cpp:110
        _valueIPv6Address.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPv6Address.setQualified(true);
        args.append(_valueIPv6Address);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__NetworkGateway::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("IPv4Address")) {// converter_complextype.cpp:354
            dm::TT__IPv4Address mIPv4AddressTemp;// converter_complextype.cpp:412
            mIPv4AddressTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mIPv4Address.append(mIPv4AddressTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("IPv6Address")) {// converter_complextype.cpp:354
            dm::TT__IPv6Address mIPv6AddressTemp;// converter_complextype.cpp:412
            mIPv6AddressTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mIPv6Address.append(mIPv6AddressTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TT__NetworkGateway::TT__NetworkGateway()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkGateway::~TT__NetworkGateway()
{
}

dm::TT__NetworkGateway::TT__NetworkGateway( const dm::TT__NetworkGateway& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkGateway&  dm::TT__NetworkGateway::operator=( const dm::TT__NetworkGateway& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__TLSConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCertificateID;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__TLSConfiguration::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__TLSConfiguration::setCertificateID( const QString& _certificateID )
{
    d_ptr->mCertificateID = _certificateID;
}

QString dm::TT__TLSConfiguration::certificateID() const
{
    return d_ptr->mCertificateID;
}

void dm::TT__TLSConfiguration::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__TLSConfiguration::any() const
{
    return d_ptr->mAny;
}

void dm::TT__TLSConfiguration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__TLSConfiguration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__TLSConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("TLSConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueCertificateID(QString::fromLatin1("CertificateID"), QVariant::fromValue(d_ptr->mCertificateID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
    _valueCertificateID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueCertificateID.setQualified(true);
    args.append(_valueCertificateID);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__TLSConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateID")) {// converter_complextype.cpp:354
            d_ptr->mCertificateID = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__TLSConfiguration::TT__TLSConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__TLSConfiguration::~TT__TLSConfiguration()
{
}

dm::TT__TLSConfiguration::TT__TLSConfiguration( const dm::TT__TLSConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__TLSConfiguration&  dm::TT__TLSConfiguration::operator=( const dm::TT__TLSConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__IPv6NetworkInterfaceSetConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mEnabled;
    bool mEnabled_nil;
    bool mAcceptRouterAdvert;
    bool mAcceptRouterAdvert_nil;
    QList< dm::TT__PrefixedIPv6Address > mManual;
    bool mManual_nil;
    dm::TT__IPv6DHCPConfiguration mDHCP;
    bool mDHCP_nil;
};

dm::TT__IPv6NetworkInterfaceSetConfiguration::PrivateDPtr::PrivateDPtr()
    : mEnabled(false), mEnabled_nil(true), mAcceptRouterAdvert(false), mAcceptRouterAdvert_nil(true), mManual_nil(true), mDHCP_nil(true)
{
}


void dm::TT__IPv6NetworkInterfaceSetConfiguration::setEnabled( bool _enabled )
{
    d_ptr->mEnabled_nil = false;// converter_complextype.cpp:277
    d_ptr->mEnabled = _enabled;
}

bool dm::TT__IPv6NetworkInterfaceSetConfiguration::enabled() const
{
    return d_ptr->mEnabled;
}

void dm::TT__IPv6NetworkInterfaceSetConfiguration::setAcceptRouterAdvert( bool _acceptRouterAdvert )
{
    d_ptr->mAcceptRouterAdvert_nil = false;// converter_complextype.cpp:277
    d_ptr->mAcceptRouterAdvert = _acceptRouterAdvert;
}

bool dm::TT__IPv6NetworkInterfaceSetConfiguration::acceptRouterAdvert() const
{
    return d_ptr->mAcceptRouterAdvert;
}

void dm::TT__IPv6NetworkInterfaceSetConfiguration::setManual( const QList< dm::TT__PrefixedIPv6Address >& _manual )
{
    d_ptr->mManual_nil = false;// converter_complextype.cpp:277
    d_ptr->mManual = _manual;
}

QList< dm::TT__PrefixedIPv6Address > dm::TT__IPv6NetworkInterfaceSetConfiguration::manual() const
{
    return d_ptr->mManual;
}

void dm::TT__IPv6NetworkInterfaceSetConfiguration::setDHCP( const dm::TT__IPv6DHCPConfiguration& _dHCP )
{
    d_ptr->mDHCP_nil = false;// converter_complextype.cpp:277
    d_ptr->mDHCP = _dHCP;
}

dm::TT__IPv6DHCPConfiguration dm::TT__IPv6NetworkInterfaceSetConfiguration::dHCP() const
{
    return d_ptr->mDHCP;
}

KDSoapValue dm::TT__IPv6NetworkInterfaceSetConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv6NetworkInterfaceSetConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mEnabled_nil) {
        KDSoapValue _valueEnabled(QString::fromLatin1("Enabled"), QVariant::fromValue(d_ptr->mEnabled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueEnabled.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueEnabled.setQualified(true);
        if (!_valueEnabled.isNil())
        args.append(_valueEnabled);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mAcceptRouterAdvert_nil) {
        KDSoapValue _valueAcceptRouterAdvert(QString::fromLatin1("AcceptRouterAdvert"), QVariant::fromValue(d_ptr->mAcceptRouterAdvert), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueAcceptRouterAdvert.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAcceptRouterAdvert.setQualified(true);
        if (!_valueAcceptRouterAdvert.isNil())
        args.append(_valueAcceptRouterAdvert);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mManual.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueManual(d_ptr->mManual.at(i).serialize(QString::fromLatin1("Manual")));// elementargumentserializer.cpp:102
        _valueManual.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueManual.setQualified(true);
        args.append(_valueManual);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDHCP_nil) {
        KDSoapValue _valueDHCP(QString::fromLatin1("DHCP"), d_ptr->mDHCP.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv6DHCPConfiguration"));// elementargumentserializer.cpp:110
        _valueDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDHCP.setQualified(true);
        if (!_valueDHCP.isNil())
        args.append(_valueDHCP);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__IPv6NetworkInterfaceSetConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Enabled")) {// converter_complextype.cpp:354
            d_ptr->mEnabled = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mEnabled_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("AcceptRouterAdvert")) {// converter_complextype.cpp:354
            d_ptr->mAcceptRouterAdvert = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mAcceptRouterAdvert_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Manual")) {// converter_complextype.cpp:354
            dm::TT__PrefixedIPv6Address mManualTemp;// converter_complextype.cpp:412
            mManualTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mManual.append(mManualTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("DHCP")) {// converter_complextype.cpp:354
            d_ptr->mDHCP.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mDHCP_nil = false;// converter_complextype.cpp:375
        }
    }
}

dm::TT__IPv6NetworkInterfaceSetConfiguration::TT__IPv6NetworkInterfaceSetConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IPv6NetworkInterfaceSetConfiguration::~TT__IPv6NetworkInterfaceSetConfiguration()
{
}

dm::TT__IPv6NetworkInterfaceSetConfiguration::TT__IPv6NetworkInterfaceSetConfiguration( const dm::TT__IPv6NetworkInterfaceSetConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IPv6NetworkInterfaceSetConfiguration&  dm::TT__IPv6NetworkInterfaceSetConfiguration::operator=( const dm::TT__IPv6NetworkInterfaceSetConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__AnalyticsDeviceCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    bool mRuleSupport;
    bool mRuleSupport_nil;
    dm::TT__AnalyticsDeviceExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__AnalyticsDeviceCapabilities::PrivateDPtr::PrivateDPtr()
    : mRuleSupport(false), mRuleSupport_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__AnalyticsDeviceCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__AnalyticsDeviceCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__AnalyticsDeviceCapabilities::setRuleSupport( bool _ruleSupport )
{
    d_ptr->mRuleSupport_nil = false;// converter_complextype.cpp:277
    d_ptr->mRuleSupport = _ruleSupport;
}

bool dm::TT__AnalyticsDeviceCapabilities::ruleSupport() const
{
    return d_ptr->mRuleSupport;
}

void dm::TT__AnalyticsDeviceCapabilities::setExtension( const dm::TT__AnalyticsDeviceExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__AnalyticsDeviceExtension dm::TT__AnalyticsDeviceCapabilities::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__AnalyticsDeviceCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__AnalyticsDeviceCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__AnalyticsDeviceCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("AnalyticsDeviceCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    if (!d_ptr->mRuleSupport_nil) {
        KDSoapValue _valueRuleSupport(QString::fromLatin1("RuleSupport"), QVariant::fromValue(d_ptr->mRuleSupport), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueRuleSupport.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueRuleSupport.setQualified(true);
        if (!_valueRuleSupport.isNil())
        args.append(_valueRuleSupport);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__AnalyticsDeviceCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("RuleSupport")) {// converter_complextype.cpp:354
            d_ptr->mRuleSupport = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mRuleSupport_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__AnalyticsDeviceCapabilities::TT__AnalyticsDeviceCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__AnalyticsDeviceCapabilities::~TT__AnalyticsDeviceCapabilities()
{
}

dm::TT__AnalyticsDeviceCapabilities::TT__AnalyticsDeviceCapabilities( const dm::TT__AnalyticsDeviceCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__AnalyticsDeviceCapabilities&  dm::TT__AnalyticsDeviceCapabilities::operator=( const dm::TT__AnalyticsDeviceCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetZeroConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__ReferenceToken mInterfaceToken;
    bool mEnabled;
};

dm::TDS__SetZeroConfiguration::PrivateDPtr::PrivateDPtr()
    : mEnabled(false)
{
}


void dm::TDS__SetZeroConfiguration::setInterfaceToken( const dm::TT__ReferenceToken& _interfaceToken )
{
    d_ptr->mInterfaceToken = _interfaceToken;
}

dm::TT__ReferenceToken dm::TDS__SetZeroConfiguration::interfaceToken() const
{
    return d_ptr->mInterfaceToken;
}

void dm::TDS__SetZeroConfiguration::setEnabled( bool _enabled )
{
    d_ptr->mEnabled = _enabled;
}

bool dm::TDS__SetZeroConfiguration::enabled() const
{
    return d_ptr->mEnabled;
}

KDSoapValue dm::TDS__SetZeroConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetZeroConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueInterfaceToken(QString::fromLatin1("InterfaceToken"), d_ptr->mInterfaceToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueInterfaceToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueInterfaceToken.setQualified(true);
    args.append(_valueInterfaceToken);// elementargumentserializer.cpp:122
    KDSoapValue _valueEnabled(QString::fromLatin1("Enabled"), QVariant::fromValue(d_ptr->mEnabled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueEnabled.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueEnabled.setQualified(true);
    args.append(_valueEnabled);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetZeroConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("InterfaceToken")) {// converter_complextype.cpp:354
            d_ptr->mInterfaceToken.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Enabled")) {// converter_complextype.cpp:354
            d_ptr->mEnabled = val.value().value<bool>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__SetZeroConfiguration::TDS__SetZeroConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetZeroConfiguration::~TDS__SetZeroConfiguration()
{
}

dm::TDS__SetZeroConfiguration::TDS__SetZeroConfiguration( const dm::TDS__SetZeroConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetZeroConfiguration&  dm::TDS__SetZeroConfiguration::operator=( const dm::TDS__SetZeroConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetDot11Status::PrivateDPtr : public QSharedData
{
public:
    dm::TT__ReferenceToken mInterfaceToken;
};

void dm::TDS__GetDot11Status::setInterfaceToken( const dm::TT__ReferenceToken& _interfaceToken )
{
    d_ptr->mInterfaceToken = _interfaceToken;
}

dm::TT__ReferenceToken dm::TDS__GetDot11Status::interfaceToken() const
{
    return d_ptr->mInterfaceToken;
}

KDSoapValue dm::TDS__GetDot11Status::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDot11Status"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueInterfaceToken(QString::fromLatin1("InterfaceToken"), d_ptr->mInterfaceToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueInterfaceToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueInterfaceToken.setQualified(true);
    args.append(_valueInterfaceToken);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetDot11Status::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("InterfaceToken")) {// converter_complextype.cpp:354
            d_ptr->mInterfaceToken.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__GetDot11Status::TDS__GetDot11Status()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetDot11Status::~TDS__GetDot11Status()
{
}

dm::TDS__GetDot11Status::TDS__GetDot11Status( const dm::TDS__GetDot11Status& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetDot11Status&  dm::TDS__GetDot11Status::operator=( const dm::TDS__GetDot11Status& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetUsers::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetUsers"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetUsers::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetUsers::TDS__GetUsers()
{
}

dm::TDS__GetUsers::~TDS__GetUsers()
{
}


class dm::XOP__Include::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    QString mHref;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::XOP__Include::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::XOP__Include::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::XOP__Include::any() const
{
    return d_ptr->mAny;
}

void dm::XOP__Include::setHref( const QString& _href )
{
    d_ptr->mHref = _href;
}

QString dm::XOP__Include::href() const
{
    return d_ptr->mHref;
}

void dm::XOP__Include::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::XOP__Include::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::XOP__Include::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.w3.org/2004/08/xop/include"), QString::fromLatin1("Include"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    KDSoapValue _valueHref(QString::fromLatin1("href"), QVariant::fromValue(d_ptr->mHref), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueHref.setNamespaceUri(QString::fromLatin1("http://www.w3.org/2004/08/xop/include"));
    attribs.append(_valueHref);// elementargumentserializer.cpp:122
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::XOP__Include::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("href")) {// converter_complextype.cpp:354
            d_ptr->mHref = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::XOP__Include::XOP__Include()
    : d_ptr(new PrivateDPtr)
{
}

dm::XOP__Include::~XOP__Include()
{
}

dm::XOP__Include::XOP__Include( const dm::XOP__Include& other )
    : d_ptr( other.d_ptr )
{
}

dm::XOP__Include&  dm::XOP__Include::operator=( const dm::XOP__Include& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__RealTimeStreamingCapabilitiesExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__RealTimeStreamingCapabilitiesExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__RealTimeStreamingCapabilitiesExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__RealTimeStreamingCapabilitiesExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__RealTimeStreamingCapabilitiesExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("RealTimeStreamingCapabilitiesExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__RealTimeStreamingCapabilitiesExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__RealTimeStreamingCapabilitiesExtension::TT__RealTimeStreamingCapabilitiesExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__RealTimeStreamingCapabilitiesExtension::~TT__RealTimeStreamingCapabilitiesExtension()
{
}

dm::TT__RealTimeStreamingCapabilitiesExtension::TT__RealTimeStreamingCapabilitiesExtension( const dm::TT__RealTimeStreamingCapabilitiesExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__RealTimeStreamingCapabilitiesExtension&  dm::TT__RealTimeStreamingCapabilitiesExtension::operator=( const dm::TT__RealTimeStreamingCapabilitiesExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetSystemBackupResponse::PrivateDPtr : public QSharedData
{
public:
    QList< dm::TT__BackupFile > mBackupFiles;
};

void dm::TDS__GetSystemBackupResponse::setBackupFiles( const QList< dm::TT__BackupFile >& _backupFiles )
{
    d_ptr->mBackupFiles = _backupFiles;
}

QList< dm::TT__BackupFile > dm::TDS__GetSystemBackupResponse::backupFiles() const
{
    return d_ptr->mBackupFiles;
}

KDSoapValue dm::TDS__GetSystemBackupResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetSystemBackupResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mBackupFiles.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueBackupFiles(d_ptr->mBackupFiles.at(i).serialize(QString::fromLatin1("BackupFiles")));// elementargumentserializer.cpp:102
        _valueBackupFiles.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueBackupFiles.setQualified(true);
        args.append(_valueBackupFiles);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetSystemBackupResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("BackupFiles")) {// converter_complextype.cpp:354
            dm::TT__BackupFile mBackupFilesTemp;// converter_complextype.cpp:412
            mBackupFilesTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mBackupFiles.append(mBackupFilesTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetSystemBackupResponse::TDS__GetSystemBackupResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetSystemBackupResponse::~TDS__GetSystemBackupResponse()
{
}

dm::TDS__GetSystemBackupResponse::TDS__GetSystemBackupResponse( const dm::TDS__GetSystemBackupResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetSystemBackupResponse&  dm::TDS__GetSystemBackupResponse::operator=( const dm::TDS__GetSystemBackupResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__PTZPresetTourSupported::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mMaximumNumberOfPresetTours;
    QList< dm::TT__PTZPresetTourOperation > mPTZPresetTourOperation;
    bool mPTZPresetTourOperation_nil;
    dm::TT__PTZPresetTourSupportedExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__PTZPresetTourSupported::PrivateDPtr::PrivateDPtr()
    : mMaximumNumberOfPresetTours(0), mPTZPresetTourOperation_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__PTZPresetTourSupported::setMaximumNumberOfPresetTours( int _maximumNumberOfPresetTours )
{
    d_ptr->mMaximumNumberOfPresetTours = _maximumNumberOfPresetTours;
}

int dm::TT__PTZPresetTourSupported::maximumNumberOfPresetTours() const
{
    return d_ptr->mMaximumNumberOfPresetTours;
}

void dm::TT__PTZPresetTourSupported::setPTZPresetTourOperation( const QList< dm::TT__PTZPresetTourOperation >& _pTZPresetTourOperation )
{
    d_ptr->mPTZPresetTourOperation_nil = false;// converter_complextype.cpp:277
    d_ptr->mPTZPresetTourOperation = _pTZPresetTourOperation;
}

QList< dm::TT__PTZPresetTourOperation > dm::TT__PTZPresetTourSupported::pTZPresetTourOperation() const
{
    return d_ptr->mPTZPresetTourOperation;
}

void dm::TT__PTZPresetTourSupported::setExtension( const dm::TT__PTZPresetTourSupportedExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__PTZPresetTourSupportedExtension dm::TT__PTZPresetTourSupported::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__PTZPresetTourSupported::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__PTZPresetTourSupported::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__PTZPresetTourSupported::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("PTZPresetTourSupported"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMaximumNumberOfPresetTours(QString::fromLatin1("MaximumNumberOfPresetTours"), QVariant::fromValue(d_ptr->mMaximumNumberOfPresetTours), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueMaximumNumberOfPresetTours.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMaximumNumberOfPresetTours.setQualified(true);
    args.append(_valueMaximumNumberOfPresetTours);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mPTZPresetTourOperation.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valuePTZPresetTourOperation(QString::fromLatin1("PTZPresetTourOperation"), d_ptr->mPTZPresetTourOperation.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("PTZPresetTourOperation"));// elementargumentserializer.cpp:110
        _valuePTZPresetTourOperation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePTZPresetTourOperation.setQualified(true);
        args.append(_valuePTZPresetTourOperation);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__PTZPresetTourSupported::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("MaximumNumberOfPresetTours")) {// converter_complextype.cpp:354
            d_ptr->mMaximumNumberOfPresetTours = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("PTZPresetTourOperation")) {// converter_complextype.cpp:354
            dm::TT__PTZPresetTourOperation mPTZPresetTourOperationTemp;// converter_complextype.cpp:412
            mPTZPresetTourOperationTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mPTZPresetTourOperation.append(mPTZPresetTourOperationTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__PTZPresetTourSupported::TT__PTZPresetTourSupported()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__PTZPresetTourSupported::~TT__PTZPresetTourSupported()
{
}

dm::TT__PTZPresetTourSupported::TT__PTZPresetTourSupported( const dm::TT__PTZPresetTourSupported& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__PTZPresetTourSupported&  dm::TT__PTZPresetTourSupported::operator=( const dm::TT__PTZPresetTourSupported& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkZeroConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__ReferenceToken mInterfaceToken;
    bool mEnabled;
    QList< dm::TT__IPv4Address > mAddresses;
    bool mAddresses_nil;
    dm::TT__NetworkZeroConfigurationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__NetworkZeroConfiguration::PrivateDPtr::PrivateDPtr()
    : mEnabled(false), mAddresses_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__NetworkZeroConfiguration::setInterfaceToken( const dm::TT__ReferenceToken& _interfaceToken )
{
    d_ptr->mInterfaceToken = _interfaceToken;
}

dm::TT__ReferenceToken dm::TT__NetworkZeroConfiguration::interfaceToken() const
{
    return d_ptr->mInterfaceToken;
}

void dm::TT__NetworkZeroConfiguration::setEnabled( bool _enabled )
{
    d_ptr->mEnabled = _enabled;
}

bool dm::TT__NetworkZeroConfiguration::enabled() const
{
    return d_ptr->mEnabled;
}

void dm::TT__NetworkZeroConfiguration::setAddresses( const QList< dm::TT__IPv4Address >& _addresses )
{
    d_ptr->mAddresses_nil = false;// converter_complextype.cpp:277
    d_ptr->mAddresses = _addresses;
}

QList< dm::TT__IPv4Address > dm::TT__NetworkZeroConfiguration::addresses() const
{
    return d_ptr->mAddresses;
}

void dm::TT__NetworkZeroConfiguration::setExtension( const dm::TT__NetworkZeroConfigurationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__NetworkZeroConfigurationExtension dm::TT__NetworkZeroConfiguration::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__NetworkZeroConfiguration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__NetworkZeroConfiguration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__NetworkZeroConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkZeroConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueInterfaceToken(QString::fromLatin1("InterfaceToken"), d_ptr->mInterfaceToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueInterfaceToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueInterfaceToken.setQualified(true);
    args.append(_valueInterfaceToken);// elementargumentserializer.cpp:122
    KDSoapValue _valueEnabled(QString::fromLatin1("Enabled"), QVariant::fromValue(d_ptr->mEnabled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueEnabled.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueEnabled.setQualified(true);
    args.append(_valueEnabled);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAddresses.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueAddresses(QString::fromLatin1("Addresses"), d_ptr->mAddresses.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv4Address"));// elementargumentserializer.cpp:110
        _valueAddresses.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAddresses.setQualified(true);
        args.append(_valueAddresses);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__NetworkZeroConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("InterfaceToken")) {// converter_complextype.cpp:354
            d_ptr->mInterfaceToken.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Enabled")) {// converter_complextype.cpp:354
            d_ptr->mEnabled = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Addresses")) {// converter_complextype.cpp:354
            dm::TT__IPv4Address mAddressesTemp;// converter_complextype.cpp:412
            mAddressesTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mAddresses.append(mAddressesTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__NetworkZeroConfiguration::TT__NetworkZeroConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkZeroConfiguration::~TT__NetworkZeroConfiguration()
{
}

dm::TT__NetworkZeroConfiguration::TT__NetworkZeroConfiguration( const dm::TT__NetworkZeroConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkZeroConfiguration&  dm::TT__NetworkZeroConfiguration::operator=( const dm::TT__NetworkZeroConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetStorageConfigurations::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetStorageConfigurations"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetStorageConfigurations::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetStorageConfigurations::TDS__GetStorageConfigurations()
{
}

dm::TDS__GetStorageConfigurations::~TDS__GetStorageConfigurations()
{
}


class dm::TDS__SystemCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mDiscoveryResolve;
    bool mDiscoveryResolve_nil;
    bool mDiscoveryBye;
    bool mDiscoveryBye_nil;
    bool mRemoteDiscovery;
    bool mRemoteDiscovery_nil;
    bool mSystemBackup;
    bool mSystemBackup_nil;
    bool mSystemLogging;
    bool mSystemLogging_nil;
    bool mFirmwareUpgrade;
    bool mFirmwareUpgrade_nil;
    bool mHttpFirmwareUpgrade;
    bool mHttpFirmwareUpgrade_nil;
    bool mHttpSystemBackup;
    bool mHttpSystemBackup_nil;
    bool mHttpSystemLogging;
    bool mHttpSystemLogging_nil;
    bool mHttpSupportInformation;
    bool mHttpSupportInformation_nil;
    bool mStorageConfiguration;
    bool mStorageConfiguration_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TDS__SystemCapabilities::PrivateDPtr::PrivateDPtr()
    : mDiscoveryResolve(false), mDiscoveryResolve_nil(true), mDiscoveryBye(false), mDiscoveryBye_nil(true), mRemoteDiscovery(false), mRemoteDiscovery_nil(true), mSystemBackup(false), mSystemBackup_nil(true), mSystemLogging(false), mSystemLogging_nil(true), mFirmwareUpgrade(false), mFirmwareUpgrade_nil(true), mHttpFirmwareUpgrade(false), mHttpFirmwareUpgrade_nil(true), mHttpSystemBackup(false), mHttpSystemBackup_nil(true), mHttpSystemLogging(false), mHttpSystemLogging_nil(true), mHttpSupportInformation(false), mHttpSupportInformation_nil(true), mStorageConfiguration(false), mStorageConfiguration_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TDS__SystemCapabilities::setDiscoveryResolve( bool _discoveryResolve )
{
    d_ptr->mDiscoveryResolve_nil = false;// converter_complextype.cpp:277
    d_ptr->mDiscoveryResolve = _discoveryResolve;
}

bool dm::TDS__SystemCapabilities::discoveryResolve() const
{
    return d_ptr->mDiscoveryResolve;
}

void dm::TDS__SystemCapabilities::setDiscoveryBye( bool _discoveryBye )
{
    d_ptr->mDiscoveryBye_nil = false;// converter_complextype.cpp:277
    d_ptr->mDiscoveryBye = _discoveryBye;
}

bool dm::TDS__SystemCapabilities::discoveryBye() const
{
    return d_ptr->mDiscoveryBye;
}

void dm::TDS__SystemCapabilities::setRemoteDiscovery( bool _remoteDiscovery )
{
    d_ptr->mRemoteDiscovery_nil = false;// converter_complextype.cpp:277
    d_ptr->mRemoteDiscovery = _remoteDiscovery;
}

bool dm::TDS__SystemCapabilities::remoteDiscovery() const
{
    return d_ptr->mRemoteDiscovery;
}

void dm::TDS__SystemCapabilities::setSystemBackup( bool _systemBackup )
{
    d_ptr->mSystemBackup_nil = false;// converter_complextype.cpp:277
    d_ptr->mSystemBackup = _systemBackup;
}

bool dm::TDS__SystemCapabilities::systemBackup() const
{
    return d_ptr->mSystemBackup;
}

void dm::TDS__SystemCapabilities::setSystemLogging( bool _systemLogging )
{
    d_ptr->mSystemLogging_nil = false;// converter_complextype.cpp:277
    d_ptr->mSystemLogging = _systemLogging;
}

bool dm::TDS__SystemCapabilities::systemLogging() const
{
    return d_ptr->mSystemLogging;
}

void dm::TDS__SystemCapabilities::setFirmwareUpgrade( bool _firmwareUpgrade )
{
    d_ptr->mFirmwareUpgrade_nil = false;// converter_complextype.cpp:277
    d_ptr->mFirmwareUpgrade = _firmwareUpgrade;
}

bool dm::TDS__SystemCapabilities::firmwareUpgrade() const
{
    return d_ptr->mFirmwareUpgrade;
}

void dm::TDS__SystemCapabilities::setHttpFirmwareUpgrade( bool _httpFirmwareUpgrade )
{
    d_ptr->mHttpFirmwareUpgrade_nil = false;// converter_complextype.cpp:277
    d_ptr->mHttpFirmwareUpgrade = _httpFirmwareUpgrade;
}

bool dm::TDS__SystemCapabilities::httpFirmwareUpgrade() const
{
    return d_ptr->mHttpFirmwareUpgrade;
}

void dm::TDS__SystemCapabilities::setHttpSystemBackup( bool _httpSystemBackup )
{
    d_ptr->mHttpSystemBackup_nil = false;// converter_complextype.cpp:277
    d_ptr->mHttpSystemBackup = _httpSystemBackup;
}

bool dm::TDS__SystemCapabilities::httpSystemBackup() const
{
    return d_ptr->mHttpSystemBackup;
}

void dm::TDS__SystemCapabilities::setHttpSystemLogging( bool _httpSystemLogging )
{
    d_ptr->mHttpSystemLogging_nil = false;// converter_complextype.cpp:277
    d_ptr->mHttpSystemLogging = _httpSystemLogging;
}

bool dm::TDS__SystemCapabilities::httpSystemLogging() const
{
    return d_ptr->mHttpSystemLogging;
}

void dm::TDS__SystemCapabilities::setHttpSupportInformation( bool _httpSupportInformation )
{
    d_ptr->mHttpSupportInformation_nil = false;// converter_complextype.cpp:277
    d_ptr->mHttpSupportInformation = _httpSupportInformation;
}

bool dm::TDS__SystemCapabilities::httpSupportInformation() const
{
    return d_ptr->mHttpSupportInformation;
}

void dm::TDS__SystemCapabilities::setStorageConfiguration( bool _storageConfiguration )
{
    d_ptr->mStorageConfiguration_nil = false;// converter_complextype.cpp:277
    d_ptr->mStorageConfiguration = _storageConfiguration;
}

bool dm::TDS__SystemCapabilities::storageConfiguration() const
{
    return d_ptr->mStorageConfiguration;
}

void dm::TDS__SystemCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TDS__SystemCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TDS__SystemCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SystemCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList attribs;
    if (!d_ptr->mDiscoveryResolve_nil) {
        KDSoapValue _valueDiscoveryResolve(QString::fromLatin1("DiscoveryResolve"), QVariant::fromValue(d_ptr->mDiscoveryResolve), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueDiscoveryResolve.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueDiscoveryResolve.isNil())
        attribs.append(_valueDiscoveryResolve);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDiscoveryBye_nil) {
        KDSoapValue _valueDiscoveryBye(QString::fromLatin1("DiscoveryBye"), QVariant::fromValue(d_ptr->mDiscoveryBye), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueDiscoveryBye.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueDiscoveryBye.isNil())
        attribs.append(_valueDiscoveryBye);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mRemoteDiscovery_nil) {
        KDSoapValue _valueRemoteDiscovery(QString::fromLatin1("RemoteDiscovery"), QVariant::fromValue(d_ptr->mRemoteDiscovery), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueRemoteDiscovery.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueRemoteDiscovery.isNil())
        attribs.append(_valueRemoteDiscovery);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSystemBackup_nil) {
        KDSoapValue _valueSystemBackup(QString::fromLatin1("SystemBackup"), QVariant::fromValue(d_ptr->mSystemBackup), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueSystemBackup.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueSystemBackup.isNil())
        attribs.append(_valueSystemBackup);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSystemLogging_nil) {
        KDSoapValue _valueSystemLogging(QString::fromLatin1("SystemLogging"), QVariant::fromValue(d_ptr->mSystemLogging), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueSystemLogging.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueSystemLogging.isNil())
        attribs.append(_valueSystemLogging);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mFirmwareUpgrade_nil) {
        KDSoapValue _valueFirmwareUpgrade(QString::fromLatin1("FirmwareUpgrade"), QVariant::fromValue(d_ptr->mFirmwareUpgrade), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueFirmwareUpgrade.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueFirmwareUpgrade.isNil())
        attribs.append(_valueFirmwareUpgrade);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mHttpFirmwareUpgrade_nil) {
        KDSoapValue _valueHttpFirmwareUpgrade(QString::fromLatin1("HttpFirmwareUpgrade"), QVariant::fromValue(d_ptr->mHttpFirmwareUpgrade), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueHttpFirmwareUpgrade.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueHttpFirmwareUpgrade.isNil())
        attribs.append(_valueHttpFirmwareUpgrade);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mHttpSystemBackup_nil) {
        KDSoapValue _valueHttpSystemBackup(QString::fromLatin1("HttpSystemBackup"), QVariant::fromValue(d_ptr->mHttpSystemBackup), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueHttpSystemBackup.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueHttpSystemBackup.isNil())
        attribs.append(_valueHttpSystemBackup);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mHttpSystemLogging_nil) {
        KDSoapValue _valueHttpSystemLogging(QString::fromLatin1("HttpSystemLogging"), QVariant::fromValue(d_ptr->mHttpSystemLogging), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueHttpSystemLogging.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueHttpSystemLogging.isNil())
        attribs.append(_valueHttpSystemLogging);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mHttpSupportInformation_nil) {
        KDSoapValue _valueHttpSupportInformation(QString::fromLatin1("HttpSupportInformation"), QVariant::fromValue(d_ptr->mHttpSupportInformation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueHttpSupportInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueHttpSupportInformation.isNil())
        attribs.append(_valueHttpSupportInformation);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mStorageConfiguration_nil) {
        KDSoapValue _valueStorageConfiguration(QString::fromLatin1("StorageConfiguration"), QVariant::fromValue(d_ptr->mStorageConfiguration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueStorageConfiguration.isNil())
        attribs.append(_valueStorageConfiguration);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TDS__SystemCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DiscoveryResolve")) {// converter_complextype.cpp:354
            d_ptr->mDiscoveryResolve = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mDiscoveryResolve_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("DiscoveryBye")) {// converter_complextype.cpp:354
            d_ptr->mDiscoveryBye = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mDiscoveryBye_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("RemoteDiscovery")) {// converter_complextype.cpp:354
            d_ptr->mRemoteDiscovery = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mRemoteDiscovery_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("SystemBackup")) {// converter_complextype.cpp:354
            d_ptr->mSystemBackup = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mSystemBackup_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("SystemLogging")) {// converter_complextype.cpp:354
            d_ptr->mSystemLogging = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mSystemLogging_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("FirmwareUpgrade")) {// converter_complextype.cpp:354
            d_ptr->mFirmwareUpgrade = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mFirmwareUpgrade_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("HttpFirmwareUpgrade")) {// converter_complextype.cpp:354
            d_ptr->mHttpFirmwareUpgrade = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mHttpFirmwareUpgrade_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("HttpSystemBackup")) {// converter_complextype.cpp:354
            d_ptr->mHttpSystemBackup = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mHttpSystemBackup_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("HttpSystemLogging")) {// converter_complextype.cpp:354
            d_ptr->mHttpSystemLogging = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mHttpSystemLogging_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("HttpSupportInformation")) {// converter_complextype.cpp:354
            d_ptr->mHttpSupportInformation = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mHttpSupportInformation_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("StorageConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mStorageConfiguration = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mStorageConfiguration_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TDS__SystemCapabilities::TDS__SystemCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SystemCapabilities::~TDS__SystemCapabilities()
{
}

dm::TDS__SystemCapabilities::TDS__SystemCapabilities( const dm::TDS__SystemCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SystemCapabilities&  dm::TDS__SystemCapabilities::operator=( const dm::TDS__SystemCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__AttachmentData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::XOP__Include mInclude;
    dm::XMIME__ContentType mContentType;
    bool mContentType_nil;
};

dm::TT__AttachmentData::PrivateDPtr::PrivateDPtr()
    : mContentType_nil(true)
{
}


void dm::TT__AttachmentData::setInclude( const dm::XOP__Include& _include )
{
    d_ptr->mInclude = _include;
}

dm::XOP__Include dm::TT__AttachmentData::include() const
{
    return d_ptr->mInclude;
}

void dm::TT__AttachmentData::setContentType( const dm::XMIME__ContentType& _contentType )
{
    d_ptr->mContentType_nil = false;// converter_complextype.cpp:277
    d_ptr->mContentType = _contentType;
}

dm::XMIME__ContentType dm::TT__AttachmentData::contentType() const
{
    return d_ptr->mContentType;
}

KDSoapValue dm::TT__AttachmentData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("AttachmentData"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueInclude(d_ptr->mInclude.serialize(QString::fromLatin1("Include")));// elementargumentserializer.cpp:102
    _valueInclude.setNamespaceUri(QString::fromLatin1("http://www.w3.org/2004/08/xop/include"));
    _valueInclude.setQualified(true);
    args.append(_valueInclude);// elementargumentserializer.cpp:122
    KDSoapValueList attribs;
    if (!d_ptr->mContentType_nil) {
        KDSoapValue _valueContentType(QString::fromLatin1("contentType"), d_ptr->mContentType.serialize(), QString::fromLatin1("http://www.w3.org/2005/05/xmlmime"), QString::fromLatin1("contentType"));// elementargumentserializer.cpp:110
        _valueContentType.setNamespaceUri(QString::fromLatin1("http://www.w3.org/2005/05/xmlmime"));
        if (!_valueContentType.isNil())
        attribs.append(_valueContentType);// elementargumentserializer.cpp:122
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__AttachmentData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Include")) {// converter_complextype.cpp:354
            d_ptr->mInclude.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("contentType")) {// converter_complextype.cpp:354
            d_ptr->mContentType.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mContentType_nil = false;// converter_complextype.cpp:375
        }
    }
}

dm::TT__AttachmentData::TT__AttachmentData()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__AttachmentData::~TT__AttachmentData()
{
}

dm::TT__AttachmentData::TT__AttachmentData( const dm::TT__AttachmentData& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__AttachmentData&  dm::TT__AttachmentData::operator=( const dm::TT__AttachmentData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__FocusConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__AutoFocusMode mAutoFocusMode;
    float mDefaultSpeed;
    float mNearLimit;
    float mFarLimit;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__FocusConfiguration::PrivateDPtr::PrivateDPtr()
    : mDefaultSpeed(0), mNearLimit(0), mFarLimit(0), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__FocusConfiguration::setAutoFocusMode( const dm::TT__AutoFocusMode& _autoFocusMode )
{
    d_ptr->mAutoFocusMode = _autoFocusMode;
}

dm::TT__AutoFocusMode dm::TT__FocusConfiguration::autoFocusMode() const
{
    return d_ptr->mAutoFocusMode;
}

void dm::TT__FocusConfiguration::setDefaultSpeed( float _defaultSpeed )
{
    d_ptr->mDefaultSpeed = _defaultSpeed;
}

float dm::TT__FocusConfiguration::defaultSpeed() const
{
    return d_ptr->mDefaultSpeed;
}

void dm::TT__FocusConfiguration::setNearLimit( float _nearLimit )
{
    d_ptr->mNearLimit = _nearLimit;
}

float dm::TT__FocusConfiguration::nearLimit() const
{
    return d_ptr->mNearLimit;
}

void dm::TT__FocusConfiguration::setFarLimit( float _farLimit )
{
    d_ptr->mFarLimit = _farLimit;
}

float dm::TT__FocusConfiguration::farLimit() const
{
    return d_ptr->mFarLimit;
}

void dm::TT__FocusConfiguration::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__FocusConfiguration::any() const
{
    return d_ptr->mAny;
}

void dm::TT__FocusConfiguration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__FocusConfiguration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__FocusConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("FocusConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueAutoFocusMode(QString::fromLatin1("AutoFocusMode"), d_ptr->mAutoFocusMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("AutoFocusMode"));// elementargumentserializer.cpp:110
    _valueAutoFocusMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueAutoFocusMode.setQualified(true);
    args.append(_valueAutoFocusMode);// elementargumentserializer.cpp:122
    KDSoapValue _valueDefaultSpeed(QString::fromLatin1("DefaultSpeed"), QVariant::fromValue(d_ptr->mDefaultSpeed), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueDefaultSpeed.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDefaultSpeed.setQualified(true);
    args.append(_valueDefaultSpeed);// elementargumentserializer.cpp:122
    KDSoapValue _valueNearLimit(QString::fromLatin1("NearLimit"), QVariant::fromValue(d_ptr->mNearLimit), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueNearLimit.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueNearLimit.setQualified(true);
    args.append(_valueNearLimit);// elementargumentserializer.cpp:122
    KDSoapValue _valueFarLimit(QString::fromLatin1("FarLimit"), QVariant::fromValue(d_ptr->mFarLimit), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueFarLimit.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueFarLimit.setQualified(true);
    args.append(_valueFarLimit);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__FocusConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("AutoFocusMode")) {// converter_complextype.cpp:354
            d_ptr->mAutoFocusMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("DefaultSpeed")) {// converter_complextype.cpp:354
            d_ptr->mDefaultSpeed = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("NearLimit")) {// converter_complextype.cpp:354
            d_ptr->mNearLimit = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("FarLimit")) {// converter_complextype.cpp:354
            d_ptr->mFarLimit = val.value().value<float>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__FocusConfiguration::TT__FocusConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__FocusConfiguration::~TT__FocusConfiguration()
{
}

dm::TT__FocusConfiguration::TT__FocusConfiguration( const dm::TT__FocusConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__FocusConfiguration&  dm::TT__FocusConfiguration::operator=( const dm::TT__FocusConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetClientCertificateModeResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetClientCertificateModeResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetClientCertificateModeResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetClientCertificateModeResponse::TDS__SetClientCertificateModeResponse()
{
}

dm::TDS__SetClientCertificateModeResponse::~TDS__SetClientCertificateModeResponse()
{
}


class dm::TT__ToneCompensation::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mMode;
    float mLevel;
    bool mLevel_nil;
    dm::TT__ToneCompensationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__ToneCompensation::PrivateDPtr::PrivateDPtr()
    : mLevel(0), mLevel_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__ToneCompensation::setMode( const QString& _mode )
{
    d_ptr->mMode = _mode;
}

QString dm::TT__ToneCompensation::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__ToneCompensation::setLevel( float _level )
{
    d_ptr->mLevel_nil = false;// converter_complextype.cpp:277
    d_ptr->mLevel = _level;
}

float dm::TT__ToneCompensation::level() const
{
    return d_ptr->mLevel;
}

void dm::TT__ToneCompensation::setExtension( const dm::TT__ToneCompensationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__ToneCompensationExtension dm::TT__ToneCompensation::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__ToneCompensation::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__ToneCompensation::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__ToneCompensation::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ToneCompensation"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), QVariant::fromValue(d_ptr->mMode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    if (!d_ptr->mLevel_nil) {
        KDSoapValue _valueLevel(QString::fromLatin1("Level"), QVariant::fromValue(d_ptr->mLevel), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueLevel.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueLevel.setQualified(true);
        if (!_valueLevel.isNil())
        args.append(_valueLevel);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__ToneCompensation::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Level")) {// converter_complextype.cpp:354
            d_ptr->mLevel = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mLevel_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__ToneCompensation::TT__ToneCompensation()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ToneCompensation::~TT__ToneCompensation()
{
}

dm::TT__ToneCompensation::TT__ToneCompensation( const dm::TT__ToneCompensation& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ToneCompensation&  dm::TT__ToneCompensation::operator=( const dm::TT__ToneCompensation& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__DateTime::PrivateDPtr : public QSharedData
{
public:
    dm::TT__Time mTime;
    dm::TT__Date mDate;
};

void dm::TT__DateTime::setTime( const dm::TT__Time& _time )
{
    d_ptr->mTime = _time;
}

dm::TT__Time dm::TT__DateTime::time() const
{
    return d_ptr->mTime;
}

void dm::TT__DateTime::setDate( const dm::TT__Date& _date )
{
    d_ptr->mDate = _date;
}

dm::TT__Date dm::TT__DateTime::date() const
{
    return d_ptr->mDate;
}

KDSoapValue dm::TT__DateTime::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DateTime"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueTime(d_ptr->mTime.serialize(QString::fromLatin1("Time")));// elementargumentserializer.cpp:102
    _valueTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueTime.setQualified(true);
    args.append(_valueTime);// elementargumentserializer.cpp:122
    KDSoapValue _valueDate(d_ptr->mDate.serialize(QString::fromLatin1("Date")));// elementargumentserializer.cpp:102
    _valueDate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDate.setQualified(true);
    args.append(_valueDate);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__DateTime::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Time")) {// converter_complextype.cpp:354
            d_ptr->mTime.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Date")) {// converter_complextype.cpp:354
            d_ptr->mDate.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TT__DateTime::TT__DateTime()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DateTime::~TT__DateTime()
{
}

dm::TT__DateTime::TT__DateTime( const dm::TT__DateTime& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__DateTime&  dm::TT__DateTime::operator=( const dm::TT__DateTime& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__IOCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mInputConnectors;
    bool mInputConnectors_nil;
    int mRelayOutputs;
    bool mRelayOutputs_nil;
    dm::TT__IOCapabilitiesExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__IOCapabilities::PrivateDPtr::PrivateDPtr()
    : mInputConnectors(0), mInputConnectors_nil(true), mRelayOutputs(0), mRelayOutputs_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__IOCapabilities::setInputConnectors( int _inputConnectors )
{
    d_ptr->mInputConnectors_nil = false;// converter_complextype.cpp:277
    d_ptr->mInputConnectors = _inputConnectors;
}

int dm::TT__IOCapabilities::inputConnectors() const
{
    return d_ptr->mInputConnectors;
}

void dm::TT__IOCapabilities::setRelayOutputs( int _relayOutputs )
{
    d_ptr->mRelayOutputs_nil = false;// converter_complextype.cpp:277
    d_ptr->mRelayOutputs = _relayOutputs;
}

int dm::TT__IOCapabilities::relayOutputs() const
{
    return d_ptr->mRelayOutputs;
}

void dm::TT__IOCapabilities::setExtension( const dm::TT__IOCapabilitiesExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__IOCapabilitiesExtension dm::TT__IOCapabilities::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__IOCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__IOCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__IOCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IOCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mInputConnectors_nil) {
        KDSoapValue _valueInputConnectors(QString::fromLatin1("InputConnectors"), QVariant::fromValue(d_ptr->mInputConnectors), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueInputConnectors.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueInputConnectors.setQualified(true);
        if (!_valueInputConnectors.isNil())
        args.append(_valueInputConnectors);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mRelayOutputs_nil) {
        KDSoapValue _valueRelayOutputs(QString::fromLatin1("RelayOutputs"), QVariant::fromValue(d_ptr->mRelayOutputs), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueRelayOutputs.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueRelayOutputs.setQualified(true);
        if (!_valueRelayOutputs.isNil())
        args.append(_valueRelayOutputs);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__IOCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("InputConnectors")) {// converter_complextype.cpp:354
            d_ptr->mInputConnectors = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mInputConnectors_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("RelayOutputs")) {// converter_complextype.cpp:354
            d_ptr->mRelayOutputs = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mRelayOutputs_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__IOCapabilities::TT__IOCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IOCapabilities::~TT__IOCapabilities()
{
}

dm::TT__IOCapabilities::TT__IOCapabilities( const dm::TT__IOCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IOCapabilities&  dm::TT__IOCapabilities::operator=( const dm::TT__IOCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetCertificateInformationResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__CertificateInformation mCertificateInformation;
};

void dm::TDS__GetCertificateInformationResponse::setCertificateInformation( const dm::TT__CertificateInformation& _certificateInformation )
{
    d_ptr->mCertificateInformation = _certificateInformation;
}

dm::TT__CertificateInformation dm::TDS__GetCertificateInformationResponse::certificateInformation() const
{
    return d_ptr->mCertificateInformation;
}

KDSoapValue dm::TDS__GetCertificateInformationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetCertificateInformationResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueCertificateInformation(d_ptr->mCertificateInformation.serialize(QString::fromLatin1("CertificateInformation")));// elementargumentserializer.cpp:102
    _valueCertificateInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCertificateInformation.setQualified(true);
    args.append(_valueCertificateInformation);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetCertificateInformationResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateInformation")) {// converter_complextype.cpp:354
            d_ptr->mCertificateInformation.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetCertificateInformationResponse::TDS__GetCertificateInformationResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetCertificateInformationResponse::~TDS__GetCertificateInformationResponse()
{
}

dm::TDS__GetCertificateInformationResponse::TDS__GetCertificateInformationResponse( const dm::TDS__GetCertificateInformationResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetCertificateInformationResponse&  dm::TDS__GetCertificateInformationResponse::operator=( const dm::TDS__GetCertificateInformationResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetScopesResponse::PrivateDPtr : public QSharedData
{
public:
    QList< dm::TT__Scope > mScopes;
};

void dm::TDS__GetScopesResponse::setScopes( const QList< dm::TT__Scope >& _scopes )
{
    d_ptr->mScopes = _scopes;
}

QList< dm::TT__Scope > dm::TDS__GetScopesResponse::scopes() const
{
    return d_ptr->mScopes;
}

KDSoapValue dm::TDS__GetScopesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetScopesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mScopes.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueScopes(d_ptr->mScopes.at(i).serialize(QString::fromLatin1("Scopes")));// elementargumentserializer.cpp:102
        _valueScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueScopes.setQualified(true);
        args.append(_valueScopes);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetScopesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Scopes")) {// converter_complextype.cpp:354
            dm::TT__Scope mScopesTemp;// converter_complextype.cpp:412
            mScopesTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mScopes.append(mScopesTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetScopesResponse::TDS__GetScopesResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetScopesResponse::~TDS__GetScopesResponse()
{
}

dm::TDS__GetScopesResponse::TDS__GetScopesResponse( const dm::TDS__GetScopesResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetScopesResponse&  dm::TDS__GetScopesResponse::operator=( const dm::TDS__GetScopesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetNTPResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__NTPInformation mNTPInformation;
};

void dm::TDS__GetNTPResponse::setNTPInformation( const dm::TT__NTPInformation& _nTPInformation )
{
    d_ptr->mNTPInformation = _nTPInformation;
}

dm::TT__NTPInformation dm::TDS__GetNTPResponse::nTPInformation() const
{
    return d_ptr->mNTPInformation;
}

KDSoapValue dm::TDS__GetNTPResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetNTPResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueNTPInformation(d_ptr->mNTPInformation.serialize(QString::fromLatin1("NTPInformation")));// elementargumentserializer.cpp:102
    _valueNTPInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueNTPInformation.setQualified(true);
    args.append(_valueNTPInformation);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetNTPResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("NTPInformation")) {// converter_complextype.cpp:354
            d_ptr->mNTPInformation.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetNTPResponse::TDS__GetNTPResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetNTPResponse::~TDS__GetNTPResponse()
{
}

dm::TDS__GetNTPResponse::TDS__GetNTPResponse( const dm::TDS__GetNTPResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetNTPResponse&  dm::TDS__GetNTPResponse::operator=( const dm::TDS__GetNTPResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__ImagingCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__ImagingCapabilities::PrivateDPtr::PrivateDPtr()
    : mAnyAttribute_nil(true)
{
}


void dm::TT__ImagingCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__ImagingCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__ImagingCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__ImagingCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__ImagingCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ImagingCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__ImagingCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__ImagingCapabilities::TT__ImagingCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ImagingCapabilities::~TT__ImagingCapabilities()
{
}

dm::TT__ImagingCapabilities::TT__ImagingCapabilities( const dm::TT__ImagingCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ImagingCapabilities&  dm::TT__ImagingCapabilities::operator=( const dm::TT__ImagingCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__IPAddressFilterExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__IPAddressFilterExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__IPAddressFilterExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__IPAddressFilterExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__IPAddressFilterExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPAddressFilterExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__IPAddressFilterExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__IPAddressFilterExtension::TT__IPAddressFilterExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IPAddressFilterExtension::~TT__IPAddressFilterExtension()
{
}

dm::TT__IPAddressFilterExtension::TT__IPAddressFilterExtension( const dm::TT__IPAddressFilterExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IPAddressFilterExtension&  dm::TT__IPAddressFilterExtension::operator=( const dm::TT__IPAddressFilterExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetCertificatesStatus::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__CertificateStatus > mCertificateStatus;
    bool mCertificateStatus_nil;
};

dm::TDS__SetCertificatesStatus::PrivateDPtr::PrivateDPtr()
    : mCertificateStatus_nil(true)
{
}


void dm::TDS__SetCertificatesStatus::setCertificateStatus( const QList< dm::TT__CertificateStatus >& _certificateStatus )
{
    d_ptr->mCertificateStatus_nil = false;// converter_complextype.cpp:277
    d_ptr->mCertificateStatus = _certificateStatus;
}

QList< dm::TT__CertificateStatus > dm::TDS__SetCertificatesStatus::certificateStatus() const
{
    return d_ptr->mCertificateStatus;
}

KDSoapValue dm::TDS__SetCertificatesStatus::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetCertificatesStatus"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mCertificateStatus.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueCertificateStatus(d_ptr->mCertificateStatus.at(i).serialize(QString::fromLatin1("CertificateStatus")));// elementargumentserializer.cpp:102
        _valueCertificateStatus.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueCertificateStatus.setQualified(true);
        args.append(_valueCertificateStatus);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__SetCertificatesStatus::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateStatus")) {// converter_complextype.cpp:354
            dm::TT__CertificateStatus mCertificateStatusTemp;// converter_complextype.cpp:412
            mCertificateStatusTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mCertificateStatus.append(mCertificateStatusTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__SetCertificatesStatus::TDS__SetCertificatesStatus()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetCertificatesStatus::~TDS__SetCertificatesStatus()
{
}

dm::TDS__SetCertificatesStatus::TDS__SetCertificatesStatus( const dm::TDS__SetCertificatesStatus& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetCertificatesStatus&  dm::TDS__SetCertificatesStatus::operator=( const dm::TDS__SetCertificatesStatus& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__AnalyticsDeviceExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__AnalyticsDeviceExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__AnalyticsDeviceExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__AnalyticsDeviceExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__AnalyticsDeviceExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("AnalyticsDeviceExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__AnalyticsDeviceExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__AnalyticsDeviceExtension::TT__AnalyticsDeviceExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__AnalyticsDeviceExtension::~TT__AnalyticsDeviceExtension()
{
}

dm::TT__AnalyticsDeviceExtension::TT__AnalyticsDeviceExtension( const dm::TT__AnalyticsDeviceExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__AnalyticsDeviceExtension&  dm::TT__AnalyticsDeviceExtension::operator=( const dm::TT__AnalyticsDeviceExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetIPAddressFilter::PrivateDPtr : public QSharedData
{
public:
    dm::TT__IPAddressFilter mIPAddressFilter;
};

void dm::TDS__SetIPAddressFilter::setIPAddressFilter( const dm::TT__IPAddressFilter& _iPAddressFilter )
{
    d_ptr->mIPAddressFilter = _iPAddressFilter;
}

dm::TT__IPAddressFilter dm::TDS__SetIPAddressFilter::iPAddressFilter() const
{
    return d_ptr->mIPAddressFilter;
}

KDSoapValue dm::TDS__SetIPAddressFilter::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetIPAddressFilter"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueIPAddressFilter(d_ptr->mIPAddressFilter.serialize(QString::fromLatin1("IPAddressFilter")));// elementargumentserializer.cpp:102
    _valueIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueIPAddressFilter.setQualified(true);
    args.append(_valueIPAddressFilter);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetIPAddressFilter::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("IPAddressFilter")) {// converter_complextype.cpp:354
            d_ptr->mIPAddressFilter.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__SetIPAddressFilter::TDS__SetIPAddressFilter()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetIPAddressFilter::~TDS__SetIPAddressFilter()
{
}

dm::TDS__SetIPAddressFilter::TDS__SetIPAddressFilter( const dm::TDS__SetIPAddressFilter& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetIPAddressFilter&  dm::TDS__SetIPAddressFilter::operator=( const dm::TDS__SetIPAddressFilter& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__CertificateWithPrivateKey::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCertificateID;
    bool mCertificateID_nil;
    dm::TT__BinaryData mCertificate;
    dm::TT__BinaryData mPrivateKey;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__CertificateWithPrivateKey::PrivateDPtr::PrivateDPtr()
    : mCertificateID_nil(true), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__CertificateWithPrivateKey::setCertificateID( const QString& _certificateID )
{
    d_ptr->mCertificateID_nil = false;// converter_complextype.cpp:277
    d_ptr->mCertificateID = _certificateID;
}

QString dm::TT__CertificateWithPrivateKey::certificateID() const
{
    return d_ptr->mCertificateID;
}

void dm::TT__CertificateWithPrivateKey::setCertificate( const dm::TT__BinaryData& _certificate )
{
    d_ptr->mCertificate = _certificate;
}

dm::TT__BinaryData dm::TT__CertificateWithPrivateKey::certificate() const
{
    return d_ptr->mCertificate;
}

void dm::TT__CertificateWithPrivateKey::setPrivateKey( const dm::TT__BinaryData& _privateKey )
{
    d_ptr->mPrivateKey = _privateKey;
}

dm::TT__BinaryData dm::TT__CertificateWithPrivateKey::privateKey() const
{
    return d_ptr->mPrivateKey;
}

void dm::TT__CertificateWithPrivateKey::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__CertificateWithPrivateKey::any() const
{
    return d_ptr->mAny;
}

void dm::TT__CertificateWithPrivateKey::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__CertificateWithPrivateKey::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__CertificateWithPrivateKey::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("CertificateWithPrivateKey"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mCertificateID_nil) {
        KDSoapValue _valueCertificateID(QString::fromLatin1("CertificateID"), QVariant::fromValue(d_ptr->mCertificateID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
        _valueCertificateID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueCertificateID.setQualified(true);
        if (!_valueCertificateID.isNil())
        args.append(_valueCertificateID);// elementargumentserializer.cpp:122
    }
    KDSoapValue _valueCertificate(d_ptr->mCertificate.serialize(QString::fromLatin1("Certificate")));// elementargumentserializer.cpp:102
    _valueCertificate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueCertificate.setQualified(true);
    args.append(_valueCertificate);// elementargumentserializer.cpp:122
    KDSoapValue _valuePrivateKey(d_ptr->mPrivateKey.serialize(QString::fromLatin1("PrivateKey")));// elementargumentserializer.cpp:102
    _valuePrivateKey.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valuePrivateKey.setQualified(true);
    args.append(_valuePrivateKey);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__CertificateWithPrivateKey::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateID")) {// converter_complextype.cpp:354
            d_ptr->mCertificateID = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mCertificateID_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Certificate")) {// converter_complextype.cpp:354
            d_ptr->mCertificate.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("PrivateKey")) {// converter_complextype.cpp:354
            d_ptr->mPrivateKey.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__CertificateWithPrivateKey::TT__CertificateWithPrivateKey()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__CertificateWithPrivateKey::~TT__CertificateWithPrivateKey()
{
}

dm::TT__CertificateWithPrivateKey::TT__CertificateWithPrivateKey( const dm::TT__CertificateWithPrivateKey& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__CertificateWithPrivateKey&  dm::TT__CertificateWithPrivateKey::operator=( const dm::TT__CertificateWithPrivateKey& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetRelayOutputStateResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetRelayOutputStateResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetRelayOutputStateResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetRelayOutputStateResponse::TDS__SetRelayOutputStateResponse()
{
}

dm::TDS__SetRelayOutputStateResponse::~TDS__SetRelayOutputStateResponse()
{
}


class dm::TDS__GetRemoteUserResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__RemoteUser mRemoteUser;
    bool mRemoteUser_nil;
};

dm::TDS__GetRemoteUserResponse::PrivateDPtr::PrivateDPtr()
    : mRemoteUser_nil(true)
{
}


void dm::TDS__GetRemoteUserResponse::setRemoteUser( const dm::TT__RemoteUser& _remoteUser )
{
    d_ptr->mRemoteUser_nil = false;// converter_complextype.cpp:277
    d_ptr->mRemoteUser = _remoteUser;
}

dm::TT__RemoteUser dm::TDS__GetRemoteUserResponse::remoteUser() const
{
    return d_ptr->mRemoteUser;
}

KDSoapValue dm::TDS__GetRemoteUserResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetRemoteUserResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mRemoteUser_nil) {
        KDSoapValue _valueRemoteUser(d_ptr->mRemoteUser.serialize(QString::fromLatin1("RemoteUser")));// elementargumentserializer.cpp:102
        _valueRemoteUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueRemoteUser.setQualified(true);
        if (!_valueRemoteUser.isNil())
        args.append(_valueRemoteUser);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetRemoteUserResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("RemoteUser")) {// converter_complextype.cpp:354
            d_ptr->mRemoteUser.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetRemoteUserResponse::TDS__GetRemoteUserResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetRemoteUserResponse::~TDS__GetRemoteUserResponse()
{
}

dm::TDS__GetRemoteUserResponse::TDS__GetRemoteUserResponse( const dm::TDS__GetRemoteUserResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetRemoteUserResponse&  dm::TDS__GetRemoteUserResponse::operator=( const dm::TDS__GetRemoteUserResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__HostnameInformationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__HostnameInformationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__HostnameInformationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__HostnameInformationExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__HostnameInformationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("HostnameInformationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__HostnameInformationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__HostnameInformationExtension::TT__HostnameInformationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__HostnameInformationExtension::~TT__HostnameInformationExtension()
{
}

dm::TT__HostnameInformationExtension::TT__HostnameInformationExtension( const dm::TT__HostnameInformationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__HostnameInformationExtension&  dm::TT__HostnameInformationExtension::operator=( const dm::TT__HostnameInformationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetDPAddresses::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__NetworkHost > mDPAddress;
    bool mDPAddress_nil;
};

dm::TDS__SetDPAddresses::PrivateDPtr::PrivateDPtr()
    : mDPAddress_nil(true)
{
}


void dm::TDS__SetDPAddresses::setDPAddress( const QList< dm::TT__NetworkHost >& _dPAddress )
{
    d_ptr->mDPAddress_nil = false;// converter_complextype.cpp:277
    d_ptr->mDPAddress = _dPAddress;
}

QList< dm::TT__NetworkHost > dm::TDS__SetDPAddresses::dPAddress() const
{
    return d_ptr->mDPAddress;
}

KDSoapValue dm::TDS__SetDPAddresses::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetDPAddresses"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mDPAddress.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueDPAddress(d_ptr->mDPAddress.at(i).serialize(QString::fromLatin1("DPAddress")));// elementargumentserializer.cpp:102
        _valueDPAddress.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueDPAddress.setQualified(true);
        args.append(_valueDPAddress);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__SetDPAddresses::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DPAddress")) {// converter_complextype.cpp:354
            dm::TT__NetworkHost mDPAddressTemp;// converter_complextype.cpp:412
            mDPAddressTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mDPAddress.append(mDPAddressTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__SetDPAddresses::TDS__SetDPAddresses()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetDPAddresses::~TDS__SetDPAddresses()
{
}

dm::TDS__SetDPAddresses::TDS__SetDPAddresses( const dm::TDS__SetDPAddresses& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetDPAddresses&  dm::TDS__SetDPAddresses::operator=( const dm::TDS__SetDPAddresses& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__IPv4Configuration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__PrefixedIPv4Address > mManual;
    bool mManual_nil;
    dm::TT__PrefixedIPv4Address mLinkLocal;
    bool mLinkLocal_nil;
    dm::TT__PrefixedIPv4Address mFromDHCP;
    bool mFromDHCP_nil;
    bool mDHCP;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__IPv4Configuration::PrivateDPtr::PrivateDPtr()
    : mManual_nil(true), mLinkLocal_nil(true), mFromDHCP_nil(true), mDHCP(false), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__IPv4Configuration::setManual( const QList< dm::TT__PrefixedIPv4Address >& _manual )
{
    d_ptr->mManual_nil = false;// converter_complextype.cpp:277
    d_ptr->mManual = _manual;
}

QList< dm::TT__PrefixedIPv4Address > dm::TT__IPv4Configuration::manual() const
{
    return d_ptr->mManual;
}

void dm::TT__IPv4Configuration::setLinkLocal( const dm::TT__PrefixedIPv4Address& _linkLocal )
{
    d_ptr->mLinkLocal_nil = false;// converter_complextype.cpp:277
    d_ptr->mLinkLocal = _linkLocal;
}

dm::TT__PrefixedIPv4Address dm::TT__IPv4Configuration::linkLocal() const
{
    return d_ptr->mLinkLocal;
}

void dm::TT__IPv4Configuration::setFromDHCP( const dm::TT__PrefixedIPv4Address& _fromDHCP )
{
    d_ptr->mFromDHCP_nil = false;// converter_complextype.cpp:277
    d_ptr->mFromDHCP = _fromDHCP;
}

dm::TT__PrefixedIPv4Address dm::TT__IPv4Configuration::fromDHCP() const
{
    return d_ptr->mFromDHCP;
}

void dm::TT__IPv4Configuration::setDHCP( bool _dHCP )
{
    d_ptr->mDHCP = _dHCP;
}

bool dm::TT__IPv4Configuration::dHCP() const
{
    return d_ptr->mDHCP;
}

void dm::TT__IPv4Configuration::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__IPv4Configuration::any() const
{
    return d_ptr->mAny;
}

void dm::TT__IPv4Configuration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__IPv4Configuration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__IPv4Configuration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv4Configuration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mManual.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueManual(d_ptr->mManual.at(i).serialize(QString::fromLatin1("Manual")));// elementargumentserializer.cpp:102
        _valueManual.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueManual.setQualified(true);
        args.append(_valueManual);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mLinkLocal_nil) {
        KDSoapValue _valueLinkLocal(d_ptr->mLinkLocal.serialize(QString::fromLatin1("LinkLocal")));// elementargumentserializer.cpp:102
        _valueLinkLocal.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueLinkLocal.setQualified(true);
        if (!_valueLinkLocal.isNil())
        args.append(_valueLinkLocal);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mFromDHCP_nil) {
        KDSoapValue _valueFromDHCP(d_ptr->mFromDHCP.serialize(QString::fromLatin1("FromDHCP")));// elementargumentserializer.cpp:102
        _valueFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueFromDHCP.setQualified(true);
        if (!_valueFromDHCP.isNil())
        args.append(_valueFromDHCP);// elementargumentserializer.cpp:122
    }
    KDSoapValue _valueDHCP(QString::fromLatin1("DHCP"), QVariant::fromValue(d_ptr->mDHCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDHCP.setQualified(true);
    args.append(_valueDHCP);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__IPv4Configuration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Manual")) {// converter_complextype.cpp:354
            dm::TT__PrefixedIPv4Address mManualTemp;// converter_complextype.cpp:412
            mManualTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mManual.append(mManualTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("LinkLocal")) {// converter_complextype.cpp:354
            d_ptr->mLinkLocal.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("FromDHCP")) {// converter_complextype.cpp:354
            d_ptr->mFromDHCP.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("DHCP")) {// converter_complextype.cpp:354
            d_ptr->mDHCP = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__IPv4Configuration::TT__IPv4Configuration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IPv4Configuration::~TT__IPv4Configuration()
{
}

dm::TT__IPv4Configuration::TT__IPv4Configuration( const dm::TT__IPv4Configuration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IPv4Configuration&  dm::TT__IPv4Configuration::operator=( const dm::TT__IPv4Configuration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetSystemDateAndTimeResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__SystemDateTime mSystemDateAndTime;
};

void dm::TDS__GetSystemDateAndTimeResponse::setSystemDateAndTime( const dm::TT__SystemDateTime& _systemDateAndTime )
{
    d_ptr->mSystemDateAndTime = _systemDateAndTime;
}

dm::TT__SystemDateTime dm::TDS__GetSystemDateAndTimeResponse::systemDateAndTime() const
{
    return d_ptr->mSystemDateAndTime;
}

KDSoapValue dm::TDS__GetSystemDateAndTimeResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetSystemDateAndTimeResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueSystemDateAndTime(d_ptr->mSystemDateAndTime.serialize(QString::fromLatin1("SystemDateAndTime")));// elementargumentserializer.cpp:102
    _valueSystemDateAndTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSystemDateAndTime.setQualified(true);
    args.append(_valueSystemDateAndTime);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetSystemDateAndTimeResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("SystemDateAndTime")) {// converter_complextype.cpp:354
            d_ptr->mSystemDateAndTime.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetSystemDateAndTimeResponse::TDS__GetSystemDateAndTimeResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetSystemDateAndTimeResponse::~TDS__GetSystemDateAndTimeResponse()
{
}

dm::TDS__GetSystemDateAndTimeResponse::TDS__GetSystemDateAndTimeResponse( const dm::TDS__GetSystemDateAndTimeResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetSystemDateAndTimeResponse&  dm::TDS__GetSystemDateAndTimeResponse::operator=( const dm::TDS__GetSystemDateAndTimeResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkInterfaceSetConfigurationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__Dot3Configuration > mDot3;
    bool mDot3_nil;
    QList< dm::TT__Dot11Configuration > mDot11;
    bool mDot11_nil;
    dm::TT__NetworkInterfaceSetConfigurationExtension2 mExtension;
    bool mExtension_nil;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__NetworkInterfaceSetConfigurationExtension::PrivateDPtr::PrivateDPtr()
    : mDot3_nil(true), mDot11_nil(true), mExtension_nil(true), mAny_nil(true)
{
}


void dm::TT__NetworkInterfaceSetConfigurationExtension::setDot3( const QList< dm::TT__Dot3Configuration >& _dot3 )
{
    d_ptr->mDot3_nil = false;// converter_complextype.cpp:277
    d_ptr->mDot3 = _dot3;
}

QList< dm::TT__Dot3Configuration > dm::TT__NetworkInterfaceSetConfigurationExtension::dot3() const
{
    return d_ptr->mDot3;
}

void dm::TT__NetworkInterfaceSetConfigurationExtension::setDot11( const QList< dm::TT__Dot11Configuration >& _dot11 )
{
    d_ptr->mDot11_nil = false;// converter_complextype.cpp:277
    d_ptr->mDot11 = _dot11;
}

QList< dm::TT__Dot11Configuration > dm::TT__NetworkInterfaceSetConfigurationExtension::dot11() const
{
    return d_ptr->mDot11;
}

void dm::TT__NetworkInterfaceSetConfigurationExtension::setExtension( const dm::TT__NetworkInterfaceSetConfigurationExtension2& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__NetworkInterfaceSetConfigurationExtension2 dm::TT__NetworkInterfaceSetConfigurationExtension::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__NetworkInterfaceSetConfigurationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__NetworkInterfaceSetConfigurationExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__NetworkInterfaceSetConfigurationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkInterfaceSetConfigurationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mDot3.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueDot3(d_ptr->mDot3.at(i).serialize(QString::fromLatin1("Dot3")));// elementargumentserializer.cpp:102
        _valueDot3.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDot3.setQualified(true);
        args.append(_valueDot3);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mDot11.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueDot11(d_ptr->mDot11.at(i).serialize(QString::fromLatin1("Dot11")));// elementargumentserializer.cpp:102
        _valueDot11.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDot11.setQualified(true);
        args.append(_valueDot11);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__NetworkInterfaceSetConfigurationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Dot3")) {// converter_complextype.cpp:354
            dm::TT__Dot3Configuration mDot3Temp;// converter_complextype.cpp:412
            mDot3Temp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mDot3.append(mDot3Temp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Dot11")) {// converter_complextype.cpp:354
            dm::TT__Dot11Configuration mDot11Temp;// converter_complextype.cpp:412
            mDot11Temp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mDot11.append(mDot11Temp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__NetworkInterfaceSetConfigurationExtension::TT__NetworkInterfaceSetConfigurationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkInterfaceSetConfigurationExtension::~TT__NetworkInterfaceSetConfigurationExtension()
{
}

dm::TT__NetworkInterfaceSetConfigurationExtension::TT__NetworkInterfaceSetConfigurationExtension( const dm::TT__NetworkInterfaceSetConfigurationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkInterfaceSetConfigurationExtension&  dm::TT__NetworkInterfaceSetConfigurationExtension::operator=( const dm::TT__NetworkInterfaceSetConfigurationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__CreateStorageConfigurationResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__ReferenceToken mToken;
};

void dm::TDS__CreateStorageConfigurationResponse::setToken( const dm::TT__ReferenceToken& _token )
{
    d_ptr->mToken = _token;
}

dm::TT__ReferenceToken dm::TDS__CreateStorageConfigurationResponse::token() const
{
    return d_ptr->mToken;
}

KDSoapValue dm::TDS__CreateStorageConfigurationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("CreateStorageConfigurationResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueToken(QString::fromLatin1("Token"), d_ptr->mToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueToken.setQualified(true);
    args.append(_valueToken);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__CreateStorageConfigurationResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Token")) {// converter_complextype.cpp:354
            d_ptr->mToken.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__CreateStorageConfigurationResponse::TDS__CreateStorageConfigurationResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__CreateStorageConfigurationResponse::~TDS__CreateStorageConfigurationResponse()
{
}

dm::TDS__CreateStorageConfigurationResponse::TDS__CreateStorageConfigurationResponse( const dm::TDS__CreateStorageConfigurationResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__CreateStorageConfigurationResponse&  dm::TDS__CreateStorageConfigurationResponse::operator=( const dm::TDS__CreateStorageConfigurationResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetDynamicDNSResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetDynamicDNSResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetDynamicDNSResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetDynamicDNSResponse::TDS__SetDynamicDNSResponse()
{
}

dm::TDS__SetDynamicDNSResponse::~TDS__SetDynamicDNSResponse()
{
}


class dm::TDS__NetworkCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mIPFilter;
    bool mIPFilter_nil;
    bool mZeroConfiguration;
    bool mZeroConfiguration_nil;
    bool mIPVersion6;
    bool mIPVersion6_nil;
    bool mDynDNS;
    bool mDynDNS_nil;
    bool mDot11Configuration;
    bool mDot11Configuration_nil;
    int mDot1XConfigurations;
    bool mDot1XConfigurations_nil;
    bool mHostnameFromDHCP;
    bool mHostnameFromDHCP_nil;
    int mNTP;
    bool mNTP_nil;
    bool mDHCPv6;
    bool mDHCPv6_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TDS__NetworkCapabilities::PrivateDPtr::PrivateDPtr()
    : mIPFilter(false), mIPFilter_nil(true), mZeroConfiguration(false), mZeroConfiguration_nil(true), mIPVersion6(false), mIPVersion6_nil(true), mDynDNS(false), mDynDNS_nil(true), mDot11Configuration(false), mDot11Configuration_nil(true), mDot1XConfigurations(0), mDot1XConfigurations_nil(true), mHostnameFromDHCP(false), mHostnameFromDHCP_nil(true), mNTP(0), mNTP_nil(true), mDHCPv6(false), mDHCPv6_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TDS__NetworkCapabilities::setIPFilter( bool _iPFilter )
{
    d_ptr->mIPFilter_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPFilter = _iPFilter;
}

bool dm::TDS__NetworkCapabilities::iPFilter() const
{
    return d_ptr->mIPFilter;
}

void dm::TDS__NetworkCapabilities::setZeroConfiguration( bool _zeroConfiguration )
{
    d_ptr->mZeroConfiguration_nil = false;// converter_complextype.cpp:277
    d_ptr->mZeroConfiguration = _zeroConfiguration;
}

bool dm::TDS__NetworkCapabilities::zeroConfiguration() const
{
    return d_ptr->mZeroConfiguration;
}

void dm::TDS__NetworkCapabilities::setIPVersion6( bool _iPVersion6 )
{
    d_ptr->mIPVersion6_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPVersion6 = _iPVersion6;
}

bool dm::TDS__NetworkCapabilities::iPVersion6() const
{
    return d_ptr->mIPVersion6;
}

void dm::TDS__NetworkCapabilities::setDynDNS( bool _dynDNS )
{
    d_ptr->mDynDNS_nil = false;// converter_complextype.cpp:277
    d_ptr->mDynDNS = _dynDNS;
}

bool dm::TDS__NetworkCapabilities::dynDNS() const
{
    return d_ptr->mDynDNS;
}

void dm::TDS__NetworkCapabilities::setDot11Configuration( bool _dot11Configuration )
{
    d_ptr->mDot11Configuration_nil = false;// converter_complextype.cpp:277
    d_ptr->mDot11Configuration = _dot11Configuration;
}

bool dm::TDS__NetworkCapabilities::dot11Configuration() const
{
    return d_ptr->mDot11Configuration;
}

void dm::TDS__NetworkCapabilities::setDot1XConfigurations( int _dot1XConfigurations )
{
    d_ptr->mDot1XConfigurations_nil = false;// converter_complextype.cpp:277
    d_ptr->mDot1XConfigurations = _dot1XConfigurations;
}

int dm::TDS__NetworkCapabilities::dot1XConfigurations() const
{
    return d_ptr->mDot1XConfigurations;
}

void dm::TDS__NetworkCapabilities::setHostnameFromDHCP( bool _hostnameFromDHCP )
{
    d_ptr->mHostnameFromDHCP_nil = false;// converter_complextype.cpp:277
    d_ptr->mHostnameFromDHCP = _hostnameFromDHCP;
}

bool dm::TDS__NetworkCapabilities::hostnameFromDHCP() const
{
    return d_ptr->mHostnameFromDHCP;
}

void dm::TDS__NetworkCapabilities::setNTP( int _nTP )
{
    d_ptr->mNTP_nil = false;// converter_complextype.cpp:277
    d_ptr->mNTP = _nTP;
}

int dm::TDS__NetworkCapabilities::nTP() const
{
    return d_ptr->mNTP;
}

void dm::TDS__NetworkCapabilities::setDHCPv6( bool _dHCPv6 )
{
    d_ptr->mDHCPv6_nil = false;// converter_complextype.cpp:277
    d_ptr->mDHCPv6 = _dHCPv6;
}

bool dm::TDS__NetworkCapabilities::dHCPv6() const
{
    return d_ptr->mDHCPv6;
}

void dm::TDS__NetworkCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TDS__NetworkCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TDS__NetworkCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("NetworkCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList attribs;
    if (!d_ptr->mIPFilter_nil) {
        KDSoapValue _valueIPFilter(QString::fromLatin1("IPFilter"), QVariant::fromValue(d_ptr->mIPFilter), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueIPFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueIPFilter.isNil())
        attribs.append(_valueIPFilter);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mZeroConfiguration_nil) {
        KDSoapValue _valueZeroConfiguration(QString::fromLatin1("ZeroConfiguration"), QVariant::fromValue(d_ptr->mZeroConfiguration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueZeroConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueZeroConfiguration.isNil())
        attribs.append(_valueZeroConfiguration);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mIPVersion6_nil) {
        KDSoapValue _valueIPVersion6(QString::fromLatin1("IPVersion6"), QVariant::fromValue(d_ptr->mIPVersion6), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueIPVersion6.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueIPVersion6.isNil())
        attribs.append(_valueIPVersion6);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDynDNS_nil) {
        KDSoapValue _valueDynDNS(QString::fromLatin1("DynDNS"), QVariant::fromValue(d_ptr->mDynDNS), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueDynDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueDynDNS.isNil())
        attribs.append(_valueDynDNS);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDot11Configuration_nil) {
        KDSoapValue _valueDot11Configuration(QString::fromLatin1("Dot11Configuration"), QVariant::fromValue(d_ptr->mDot11Configuration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueDot11Configuration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueDot11Configuration.isNil())
        attribs.append(_valueDot11Configuration);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDot1XConfigurations_nil) {
        KDSoapValue _valueDot1XConfigurations(QString::fromLatin1("Dot1XConfigurations"), QVariant::fromValue(d_ptr->mDot1XConfigurations), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueDot1XConfigurations.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueDot1XConfigurations.isNil())
        attribs.append(_valueDot1XConfigurations);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mHostnameFromDHCP_nil) {
        KDSoapValue _valueHostnameFromDHCP(QString::fromLatin1("HostnameFromDHCP"), QVariant::fromValue(d_ptr->mHostnameFromDHCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueHostnameFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueHostnameFromDHCP.isNil())
        attribs.append(_valueHostnameFromDHCP);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mNTP_nil) {
        KDSoapValue _valueNTP(QString::fromLatin1("NTP"), QVariant::fromValue(d_ptr->mNTP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueNTP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueNTP.isNil())
        attribs.append(_valueNTP);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDHCPv6_nil) {
        KDSoapValue _valueDHCPv6(QString::fromLatin1("DHCPv6"), QVariant::fromValue(d_ptr->mDHCPv6), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueDHCPv6.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueDHCPv6.isNil())
        attribs.append(_valueDHCPv6);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TDS__NetworkCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("IPFilter")) {// converter_complextype.cpp:354
            d_ptr->mIPFilter = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mIPFilter_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("ZeroConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mZeroConfiguration = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mZeroConfiguration_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("IPVersion6")) {// converter_complextype.cpp:354
            d_ptr->mIPVersion6 = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mIPVersion6_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("DynDNS")) {// converter_complextype.cpp:354
            d_ptr->mDynDNS = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mDynDNS_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Dot11Configuration")) {// converter_complextype.cpp:354
            d_ptr->mDot11Configuration = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mDot11Configuration_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Dot1XConfigurations")) {// converter_complextype.cpp:354
            d_ptr->mDot1XConfigurations = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mDot1XConfigurations_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("HostnameFromDHCP")) {// converter_complextype.cpp:354
            d_ptr->mHostnameFromDHCP = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mHostnameFromDHCP_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("NTP")) {// converter_complextype.cpp:354
            d_ptr->mNTP = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mNTP_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("DHCPv6")) {// converter_complextype.cpp:354
            d_ptr->mDHCPv6 = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mDHCPv6_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TDS__NetworkCapabilities::TDS__NetworkCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__NetworkCapabilities::~TDS__NetworkCapabilities()
{
}

dm::TDS__NetworkCapabilities::TDS__NetworkCapabilities( const dm::TDS__NetworkCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__NetworkCapabilities&  dm::TDS__NetworkCapabilities::operator=( const dm::TDS__NetworkCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__VideoOutputExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__VideoOutputExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__VideoOutputExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__VideoOutputExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__VideoOutputExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("VideoOutputExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__VideoOutputExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__VideoOutputExtension::TT__VideoOutputExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__VideoOutputExtension::~TT__VideoOutputExtension()
{
}

dm::TT__VideoOutputExtension::TT__VideoOutputExtension( const dm::TT__VideoOutputExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__VideoOutputExtension&  dm::TT__VideoOutputExtension::operator=( const dm::TT__VideoOutputExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetStorageConfiguration::PrivateDPtr : public QSharedData
{
public:
    dm::TDS__StorageConfiguration mStorageConfiguration;
};

void dm::TDS__SetStorageConfiguration::setStorageConfiguration( const dm::TDS__StorageConfiguration& _storageConfiguration )
{
    d_ptr->mStorageConfiguration = _storageConfiguration;
}

dm::TDS__StorageConfiguration dm::TDS__SetStorageConfiguration::storageConfiguration() const
{
    return d_ptr->mStorageConfiguration;
}

KDSoapValue dm::TDS__SetStorageConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetStorageConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueStorageConfiguration(d_ptr->mStorageConfiguration.serialize(QString::fromLatin1("StorageConfiguration")));// elementargumentserializer.cpp:102
    _valueStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueStorageConfiguration.setQualified(true);
    args.append(_valueStorageConfiguration);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetStorageConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("StorageConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mStorageConfiguration.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__SetStorageConfiguration::TDS__SetStorageConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetStorageConfiguration::~TDS__SetStorageConfiguration()
{
}

dm::TDS__SetStorageConfiguration::TDS__SetStorageConfiguration( const dm::TDS__SetStorageConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetStorageConfiguration&  dm::TDS__SetStorageConfiguration::operator=( const dm::TDS__SetStorageConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetDot11Capabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TDS__GetDot11Capabilities::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TDS__GetDot11Capabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TDS__GetDot11Capabilities::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TDS__GetDot11Capabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDot11Capabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TDS__GetDot11Capabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TDS__GetDot11Capabilities::TDS__GetDot11Capabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetDot11Capabilities::~TDS__GetDot11Capabilities()
{
}

dm::TDS__GetDot11Capabilities::TDS__GetDot11Capabilities( const dm::TDS__GetDot11Capabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetDot11Capabilities&  dm::TDS__GetDot11Capabilities::operator=( const dm::TDS__GetDot11Capabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetDot1XConfiguration::PrivateDPtr : public QSharedData
{
public:
    dm::TT__Dot1XConfiguration mDot1XConfiguration;
};

void dm::TDS__SetDot1XConfiguration::setDot1XConfiguration( const dm::TT__Dot1XConfiguration& _dot1XConfiguration )
{
    d_ptr->mDot1XConfiguration = _dot1XConfiguration;
}

dm::TT__Dot1XConfiguration dm::TDS__SetDot1XConfiguration::dot1XConfiguration() const
{
    return d_ptr->mDot1XConfiguration;
}

KDSoapValue dm::TDS__SetDot1XConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetDot1XConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDot1XConfiguration(d_ptr->mDot1XConfiguration.serialize(QString::fromLatin1("Dot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDot1XConfiguration.setQualified(true);
    args.append(_valueDot1XConfiguration);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetDot1XConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Dot1XConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mDot1XConfiguration.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__SetDot1XConfiguration::TDS__SetDot1XConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetDot1XConfiguration::~TDS__SetDot1XConfiguration()
{
}

dm::TDS__SetDot1XConfiguration::TDS__SetDot1XConfiguration( const dm::TDS__SetDot1XConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetDot1XConfiguration&  dm::TDS__SetDot1XConfiguration::operator=( const dm::TDS__SetDot1XConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetStorageConfiguration::PrivateDPtr : public QSharedData
{
public:
    dm::TT__ReferenceToken mToken;
};

void dm::TDS__GetStorageConfiguration::setToken( const dm::TT__ReferenceToken& _token )
{
    d_ptr->mToken = _token;
}

dm::TT__ReferenceToken dm::TDS__GetStorageConfiguration::token() const
{
    return d_ptr->mToken;
}

KDSoapValue dm::TDS__GetStorageConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetStorageConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueToken(QString::fromLatin1("Token"), d_ptr->mToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueToken.setQualified(true);
    args.append(_valueToken);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetStorageConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Token")) {// converter_complextype.cpp:354
            d_ptr->mToken.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__GetStorageConfiguration::TDS__GetStorageConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetStorageConfiguration::~TDS__GetStorageConfiguration()
{
}

dm::TDS__GetStorageConfiguration::TDS__GetStorageConfiguration( const dm::TDS__GetStorageConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetStorageConfiguration&  dm::TDS__GetStorageConfiguration::operator=( const dm::TDS__GetStorageConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__OSDPosConfigurationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__OSDPosConfigurationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__OSDPosConfigurationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__OSDPosConfigurationExtension::any() const
{
    return d_ptr->mAny;
}

void dm::TT__OSDPosConfigurationExtension::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__OSDPosConfigurationExtension::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__OSDPosConfigurationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("OSDPosConfigurationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__OSDPosConfigurationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__OSDPosConfigurationExtension::TT__OSDPosConfigurationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__OSDPosConfigurationExtension::~TT__OSDPosConfigurationExtension()
{
}

dm::TT__OSDPosConfigurationExtension::TT__OSDPosConfigurationExtension( const dm::TT__OSDPosConfigurationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__OSDPosConfigurationExtension&  dm::TT__OSDPosConfigurationExtension::operator=( const dm::TT__OSDPosConfigurationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__WideDynamicRange20::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__WideDynamicMode mMode;
    float mLevel;
    bool mLevel_nil;
};

dm::TT__WideDynamicRange20::PrivateDPtr::PrivateDPtr()
    : mLevel(0), mLevel_nil(true)
{
}


void dm::TT__WideDynamicRange20::setMode( const dm::TT__WideDynamicMode& _mode )
{
    d_ptr->mMode = _mode;
}

dm::TT__WideDynamicMode dm::TT__WideDynamicRange20::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__WideDynamicRange20::setLevel( float _level )
{
    d_ptr->mLevel_nil = false;// converter_complextype.cpp:277
    d_ptr->mLevel = _level;
}

float dm::TT__WideDynamicRange20::level() const
{
    return d_ptr->mLevel;
}

KDSoapValue dm::TT__WideDynamicRange20::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("WideDynamicRange20"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), d_ptr->mMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("WideDynamicMode"));// elementargumentserializer.cpp:110
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    if (!d_ptr->mLevel_nil) {
        KDSoapValue _valueLevel(QString::fromLatin1("Level"), QVariant::fromValue(d_ptr->mLevel), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueLevel.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueLevel.setQualified(true);
        if (!_valueLevel.isNil())
        args.append(_valueLevel);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__WideDynamicRange20::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Level")) {// converter_complextype.cpp:354
            d_ptr->mLevel = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mLevel_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TT__WideDynamicRange20::TT__WideDynamicRange20()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__WideDynamicRange20::~TT__WideDynamicRange20()
{
}

dm::TT__WideDynamicRange20::TT__WideDynamicRange20( const dm::TT__WideDynamicRange20& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__WideDynamicRange20&  dm::TT__WideDynamicRange20::operator=( const dm::TT__WideDynamicRange20& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__SupportInformation::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__AttachmentData mBinary;
    bool mBinary_nil;
    QString mString;
    bool mString_nil;
};

dm::TT__SupportInformation::PrivateDPtr::PrivateDPtr()
    : mBinary_nil(true), mString_nil(true)
{
}


void dm::TT__SupportInformation::setBinary( const dm::TT__AttachmentData& _binary )
{
    d_ptr->mBinary_nil = false;// converter_complextype.cpp:277
    d_ptr->mBinary = _binary;
}

dm::TT__AttachmentData dm::TT__SupportInformation::binary() const
{
    return d_ptr->mBinary;
}

void dm::TT__SupportInformation::setString( const QString& _string )
{
    d_ptr->mString_nil = false;// converter_complextype.cpp:277
    d_ptr->mString = _string;
}

QString dm::TT__SupportInformation::string() const
{
    return d_ptr->mString;
}

KDSoapValue dm::TT__SupportInformation::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SupportInformation"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mBinary_nil) {
        KDSoapValue _valueBinary(d_ptr->mBinary.serialize(QString::fromLatin1("Binary")));// elementargumentserializer.cpp:102
        _valueBinary.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueBinary.setQualified(true);
        if (!_valueBinary.isNil())
        args.append(_valueBinary);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mString_nil) {
        KDSoapValue _valueString(QString::fromLatin1("String"), QVariant::fromValue(d_ptr->mString), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueString.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueString.setQualified(true);
        if (!_valueString.isNil())
        args.append(_valueString);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__SupportInformation::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Binary")) {// converter_complextype.cpp:354
            d_ptr->mBinary.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("String")) {// converter_complextype.cpp:354
            d_ptr->mString = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mString_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TT__SupportInformation::TT__SupportInformation()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SupportInformation::~TT__SupportInformation()
{
}

dm::TT__SupportInformation::TT__SupportInformation( const dm::TT__SupportInformation& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SupportInformation&  dm::TT__SupportInformation::operator=( const dm::TT__SupportInformation& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetSystemDateAndTimeResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetSystemDateAndTimeResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetSystemDateAndTimeResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetSystemDateAndTimeResponse::TDS__SetSystemDateAndTimeResponse()
{
}

dm::TDS__SetSystemDateAndTimeResponse::~TDS__SetSystemDateAndTimeResponse()
{
}


class dm::TDS__ScanAvailableDot11NetworksResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__Dot11AvailableNetworks > mNetworks;
    bool mNetworks_nil;
};

dm::TDS__ScanAvailableDot11NetworksResponse::PrivateDPtr::PrivateDPtr()
    : mNetworks_nil(true)
{
}


void dm::TDS__ScanAvailableDot11NetworksResponse::setNetworks( const QList< dm::TT__Dot11AvailableNetworks >& _networks )
{
    d_ptr->mNetworks_nil = false;// converter_complextype.cpp:277
    d_ptr->mNetworks = _networks;
}

QList< dm::TT__Dot11AvailableNetworks > dm::TDS__ScanAvailableDot11NetworksResponse::networks() const
{
    return d_ptr->mNetworks;
}

KDSoapValue dm::TDS__ScanAvailableDot11NetworksResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("ScanAvailableDot11NetworksResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mNetworks.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueNetworks(d_ptr->mNetworks.at(i).serialize(QString::fromLatin1("Networks")));// elementargumentserializer.cpp:102
        _valueNetworks.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueNetworks.setQualified(true);
        args.append(_valueNetworks);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__ScanAvailableDot11NetworksResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Networks")) {// converter_complextype.cpp:354
            dm::TT__Dot11AvailableNetworks mNetworksTemp;// converter_complextype.cpp:412
            mNetworksTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mNetworks.append(mNetworksTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__ScanAvailableDot11NetworksResponse::TDS__ScanAvailableDot11NetworksResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__ScanAvailableDot11NetworksResponse::~TDS__ScanAvailableDot11NetworksResponse()
{
}

dm::TDS__ScanAvailableDot11NetworksResponse::TDS__ScanAvailableDot11NetworksResponse( const dm::TDS__ScanAvailableDot11NetworksResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__ScanAvailableDot11NetworksResponse&  dm::TDS__ScanAvailableDot11NetworksResponse::operator=( const dm::TDS__ScanAvailableDot11NetworksResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__PTZSpaces::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__Space2DDescription > mAbsolutePanTiltPositionSpace;
    bool mAbsolutePanTiltPositionSpace_nil;
    QList< dm::TT__Space1DDescription > mAbsoluteZoomPositionSpace;
    bool mAbsoluteZoomPositionSpace_nil;
    QList< dm::TT__Space2DDescription > mRelativePanTiltTranslationSpace;
    bool mRelativePanTiltTranslationSpace_nil;
    QList< dm::TT__Space1DDescription > mRelativeZoomTranslationSpace;
    bool mRelativeZoomTranslationSpace_nil;
    QList< dm::TT__Space2DDescription > mContinuousPanTiltVelocitySpace;
    bool mContinuousPanTiltVelocitySpace_nil;
    QList< dm::TT__Space1DDescription > mContinuousZoomVelocitySpace;
    bool mContinuousZoomVelocitySpace_nil;
    QList< dm::TT__Space1DDescription > mPanTiltSpeedSpace;
    bool mPanTiltSpeedSpace_nil;
    QList< dm::TT__Space1DDescription > mZoomSpeedSpace;
    bool mZoomSpeedSpace_nil;
    dm::TT__PTZSpacesExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__PTZSpaces::PrivateDPtr::PrivateDPtr()
    : mAbsolutePanTiltPositionSpace_nil(true), mAbsoluteZoomPositionSpace_nil(true), mRelativePanTiltTranslationSpace_nil(true), mRelativeZoomTranslationSpace_nil(true), mContinuousPanTiltVelocitySpace_nil(true), mContinuousZoomVelocitySpace_nil(true), mPanTiltSpeedSpace_nil(true), mZoomSpeedSpace_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__PTZSpaces::setAbsolutePanTiltPositionSpace( const QList< dm::TT__Space2DDescription >& _absolutePanTiltPositionSpace )
{
    d_ptr->mAbsolutePanTiltPositionSpace_nil = false;// converter_complextype.cpp:277
    d_ptr->mAbsolutePanTiltPositionSpace = _absolutePanTiltPositionSpace;
}

QList< dm::TT__Space2DDescription > dm::TT__PTZSpaces::absolutePanTiltPositionSpace() const
{
    return d_ptr->mAbsolutePanTiltPositionSpace;
}

void dm::TT__PTZSpaces::setAbsoluteZoomPositionSpace( const QList< dm::TT__Space1DDescription >& _absoluteZoomPositionSpace )
{
    d_ptr->mAbsoluteZoomPositionSpace_nil = false;// converter_complextype.cpp:277
    d_ptr->mAbsoluteZoomPositionSpace = _absoluteZoomPositionSpace;
}

QList< dm::TT__Space1DDescription > dm::TT__PTZSpaces::absoluteZoomPositionSpace() const
{
    return d_ptr->mAbsoluteZoomPositionSpace;
}

void dm::TT__PTZSpaces::setRelativePanTiltTranslationSpace( const QList< dm::TT__Space2DDescription >& _relativePanTiltTranslationSpace )
{
    d_ptr->mRelativePanTiltTranslationSpace_nil = false;// converter_complextype.cpp:277
    d_ptr->mRelativePanTiltTranslationSpace = _relativePanTiltTranslationSpace;
}

QList< dm::TT__Space2DDescription > dm::TT__PTZSpaces::relativePanTiltTranslationSpace() const
{
    return d_ptr->mRelativePanTiltTranslationSpace;
}

void dm::TT__PTZSpaces::setRelativeZoomTranslationSpace( const QList< dm::TT__Space1DDescription >& _relativeZoomTranslationSpace )
{
    d_ptr->mRelativeZoomTranslationSpace_nil = false;// converter_complextype.cpp:277
    d_ptr->mRelativeZoomTranslationSpace = _relativeZoomTranslationSpace;
}

QList< dm::TT__Space1DDescription > dm::TT__PTZSpaces::relativeZoomTranslationSpace() const
{
    return d_ptr->mRelativeZoomTranslationSpace;
}

void dm::TT__PTZSpaces::setContinuousPanTiltVelocitySpace( const QList< dm::TT__Space2DDescription >& _continuousPanTiltVelocitySpace )
{
    d_ptr->mContinuousPanTiltVelocitySpace_nil = false;// converter_complextype.cpp:277
    d_ptr->mContinuousPanTiltVelocitySpace = _continuousPanTiltVelocitySpace;
}

QList< dm::TT__Space2DDescription > dm::TT__PTZSpaces::continuousPanTiltVelocitySpace() const
{
    return d_ptr->mContinuousPanTiltVelocitySpace;
}

void dm::TT__PTZSpaces::setContinuousZoomVelocitySpace( const QList< dm::TT__Space1DDescription >& _continuousZoomVelocitySpace )
{
    d_ptr->mContinuousZoomVelocitySpace_nil = false;// converter_complextype.cpp:277
    d_ptr->mContinuousZoomVelocitySpace = _continuousZoomVelocitySpace;
}

QList< dm::TT__Space1DDescription > dm::TT__PTZSpaces::continuousZoomVelocitySpace() const
{
    return d_ptr->mContinuousZoomVelocitySpace;
}

void dm::TT__PTZSpaces::setPanTiltSpeedSpace( const QList< dm::TT__Space1DDescription >& _panTiltSpeedSpace )
{
    d_ptr->mPanTiltSpeedSpace_nil = false;// converter_complextype.cpp:277
    d_ptr->mPanTiltSpeedSpace = _panTiltSpeedSpace;
}

QList< dm::TT__Space1DDescription > dm::TT__PTZSpaces::panTiltSpeedSpace() const
{
    return d_ptr->mPanTiltSpeedSpace;
}

void dm::TT__PTZSpaces::setZoomSpeedSpace( const QList< dm::TT__Space1DDescription >& _zoomSpeedSpace )
{
    d_ptr->mZoomSpeedSpace_nil = false;// converter_complextype.cpp:277
    d_ptr->mZoomSpeedSpace = _zoomSpeedSpace;
}

QList< dm::TT__Space1DDescription > dm::TT__PTZSpaces::zoomSpeedSpace() const
{
    return d_ptr->mZoomSpeedSpace;
}

void dm::TT__PTZSpaces::setExtension( const dm::TT__PTZSpacesExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__PTZSpacesExtension dm::TT__PTZSpaces::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__PTZSpaces::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__PTZSpaces::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__PTZSpaces::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("PTZSpaces"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mAbsolutePanTiltPositionSpace.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueAbsolutePanTiltPositionSpace(d_ptr->mAbsolutePanTiltPositionSpace.at(i).serialize(QString::fromLatin1("AbsolutePanTiltPositionSpace")));// elementargumentserializer.cpp:102
        _valueAbsolutePanTiltPositionSpace.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAbsolutePanTiltPositionSpace.setQualified(true);
        args.append(_valueAbsolutePanTiltPositionSpace);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAbsoluteZoomPositionSpace.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueAbsoluteZoomPositionSpace(d_ptr->mAbsoluteZoomPositionSpace.at(i).serialize(QString::fromLatin1("AbsoluteZoomPositionSpace")));// elementargumentserializer.cpp:102
        _valueAbsoluteZoomPositionSpace.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAbsoluteZoomPositionSpace.setQualified(true);
        args.append(_valueAbsoluteZoomPositionSpace);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mRelativePanTiltTranslationSpace.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueRelativePanTiltTranslationSpace(d_ptr->mRelativePanTiltTranslationSpace.at(i).serialize(QString::fromLatin1("RelativePanTiltTranslationSpace")));// elementargumentserializer.cpp:102
        _valueRelativePanTiltTranslationSpace.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueRelativePanTiltTranslationSpace.setQualified(true);
        args.append(_valueRelativePanTiltTranslationSpace);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mRelativeZoomTranslationSpace.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueRelativeZoomTranslationSpace(d_ptr->mRelativeZoomTranslationSpace.at(i).serialize(QString::fromLatin1("RelativeZoomTranslationSpace")));// elementargumentserializer.cpp:102
        _valueRelativeZoomTranslationSpace.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueRelativeZoomTranslationSpace.setQualified(true);
        args.append(_valueRelativeZoomTranslationSpace);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mContinuousPanTiltVelocitySpace.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueContinuousPanTiltVelocitySpace(d_ptr->mContinuousPanTiltVelocitySpace.at(i).serialize(QString::fromLatin1("ContinuousPanTiltVelocitySpace")));// elementargumentserializer.cpp:102
        _valueContinuousPanTiltVelocitySpace.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueContinuousPanTiltVelocitySpace.setQualified(true);
        args.append(_valueContinuousPanTiltVelocitySpace);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mContinuousZoomVelocitySpace.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueContinuousZoomVelocitySpace(d_ptr->mContinuousZoomVelocitySpace.at(i).serialize(QString::fromLatin1("ContinuousZoomVelocitySpace")));// elementargumentserializer.cpp:102
        _valueContinuousZoomVelocitySpace.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueContinuousZoomVelocitySpace.setQualified(true);
        args.append(_valueContinuousZoomVelocitySpace);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mPanTiltSpeedSpace.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valuePanTiltSpeedSpace(d_ptr->mPanTiltSpeedSpace.at(i).serialize(QString::fromLatin1("PanTiltSpeedSpace")));// elementargumentserializer.cpp:102
        _valuePanTiltSpeedSpace.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePanTiltSpeedSpace.setQualified(true);
        args.append(_valuePanTiltSpeedSpace);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mZoomSpeedSpace.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueZoomSpeedSpace(d_ptr->mZoomSpeedSpace.at(i).serialize(QString::fromLatin1("ZoomSpeedSpace")));// elementargumentserializer.cpp:102
        _valueZoomSpeedSpace.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueZoomSpeedSpace.setQualified(true);
        args.append(_valueZoomSpeedSpace);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__PTZSpaces::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("AbsolutePanTiltPositionSpace")) {// converter_complextype.cpp:354
            dm::TT__Space2DDescription mAbsolutePanTiltPositionSpaceTemp;// converter_complextype.cpp:412
            mAbsolutePanTiltPositionSpaceTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mAbsolutePanTiltPositionSpace.append(mAbsolutePanTiltPositionSpaceTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("AbsoluteZoomPositionSpace")) {// converter_complextype.cpp:354
            dm::TT__Space1DDescription mAbsoluteZoomPositionSpaceTemp;// converter_complextype.cpp:412
            mAbsoluteZoomPositionSpaceTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mAbsoluteZoomPositionSpace.append(mAbsoluteZoomPositionSpaceTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("RelativePanTiltTranslationSpace")) {// converter_complextype.cpp:354
            dm::TT__Space2DDescription mRelativePanTiltTranslationSpaceTemp;// converter_complextype.cpp:412
            mRelativePanTiltTranslationSpaceTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mRelativePanTiltTranslationSpace.append(mRelativePanTiltTranslationSpaceTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("RelativeZoomTranslationSpace")) {// converter_complextype.cpp:354
            dm::TT__Space1DDescription mRelativeZoomTranslationSpaceTemp;// converter_complextype.cpp:412
            mRelativeZoomTranslationSpaceTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mRelativeZoomTranslationSpace.append(mRelativeZoomTranslationSpaceTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("ContinuousPanTiltVelocitySpace")) {// converter_complextype.cpp:354
            dm::TT__Space2DDescription mContinuousPanTiltVelocitySpaceTemp;// converter_complextype.cpp:412
            mContinuousPanTiltVelocitySpaceTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mContinuousPanTiltVelocitySpace.append(mContinuousPanTiltVelocitySpaceTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("ContinuousZoomVelocitySpace")) {// converter_complextype.cpp:354
            dm::TT__Space1DDescription mContinuousZoomVelocitySpaceTemp;// converter_complextype.cpp:412
            mContinuousZoomVelocitySpaceTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mContinuousZoomVelocitySpace.append(mContinuousZoomVelocitySpaceTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("PanTiltSpeedSpace")) {// converter_complextype.cpp:354
            dm::TT__Space1DDescription mPanTiltSpeedSpaceTemp;// converter_complextype.cpp:412
            mPanTiltSpeedSpaceTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mPanTiltSpeedSpace.append(mPanTiltSpeedSpaceTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("ZoomSpeedSpace")) {// converter_complextype.cpp:354
            dm::TT__Space1DDescription mZoomSpeedSpaceTemp;// converter_complextype.cpp:412
            mZoomSpeedSpaceTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mZoomSpeedSpace.append(mZoomSpeedSpaceTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__PTZSpaces::TT__PTZSpaces()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__PTZSpaces::~TT__PTZSpaces()
{
}

dm::TT__PTZSpaces::TT__PTZSpaces( const dm::TT__PTZSpaces& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__PTZSpaces&  dm::TT__PTZSpaces::operator=( const dm::TT__PTZSpaces& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__SystemLogUriList::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__SystemLogUri > mSystemLog;
    bool mSystemLog_nil;
};

dm::TT__SystemLogUriList::PrivateDPtr::PrivateDPtr()
    : mSystemLog_nil(true)
{
}


void dm::TT__SystemLogUriList::setSystemLog( const QList< dm::TT__SystemLogUri >& _systemLog )
{
    d_ptr->mSystemLog_nil = false;// converter_complextype.cpp:277
    d_ptr->mSystemLog = _systemLog;
}

QList< dm::TT__SystemLogUri > dm::TT__SystemLogUriList::systemLog() const
{
    return d_ptr->mSystemLog;
}

KDSoapValue dm::TT__SystemLogUriList::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SystemLogUriList"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mSystemLog.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueSystemLog(d_ptr->mSystemLog.at(i).serialize(QString::fromLatin1("SystemLog")));// elementargumentserializer.cpp:102
        _valueSystemLog.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSystemLog.setQualified(true);
        args.append(_valueSystemLog);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__SystemLogUriList::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("SystemLog")) {// converter_complextype.cpp:354
            dm::TT__SystemLogUri mSystemLogTemp;// converter_complextype.cpp:412
            mSystemLogTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mSystemLog.append(mSystemLogTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TT__SystemLogUriList::TT__SystemLogUriList()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SystemLogUriList::~TT__SystemLogUriList()
{
}

dm::TT__SystemLogUriList::TT__SystemLogUriList( const dm::TT__SystemLogUriList& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SystemLogUriList&  dm::TT__SystemLogUriList::operator=( const dm::TT__SystemLogUriList& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__DynamicDNSInformation::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__DynamicDNSType mType;
    dm::TT__DNSName mName;
    bool mName_nil;
    QString mTTL;
    bool mTTL_nil;
    dm::TT__DynamicDNSInformationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__DynamicDNSInformation::PrivateDPtr::PrivateDPtr()
    : mName_nil(true), mTTL_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__DynamicDNSInformation::setType( const dm::TT__DynamicDNSType& _type )
{
    d_ptr->mType = _type;
}

dm::TT__DynamicDNSType dm::TT__DynamicDNSInformation::type() const
{
    return d_ptr->mType;
}

void dm::TT__DynamicDNSInformation::setName( const dm::TT__DNSName& _name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:277
    d_ptr->mName = _name;
}

dm::TT__DNSName dm::TT__DynamicDNSInformation::name() const
{
    return d_ptr->mName;
}

void dm::TT__DynamicDNSInformation::setTTL( const QString& _tTL )
{
    d_ptr->mTTL_nil = false;// converter_complextype.cpp:277
    d_ptr->mTTL = _tTL;
}

QString dm::TT__DynamicDNSInformation::tTL() const
{
    return d_ptr->mTTL;
}

void dm::TT__DynamicDNSInformation::setExtension( const dm::TT__DynamicDNSInformationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__DynamicDNSInformationExtension dm::TT__DynamicDNSInformation::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__DynamicDNSInformation::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__DynamicDNSInformation::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__DynamicDNSInformation::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DynamicDNSInformation"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueType(QString::fromLatin1("Type"), d_ptr->mType.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DynamicDNSType"));// elementargumentserializer.cpp:110
    _valueType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueType.setQualified(true);
    args.append(_valueType);// elementargumentserializer.cpp:122
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("Name"), d_ptr->mName.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DNSName"));// elementargumentserializer.cpp:110
        _valueName.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueName.setQualified(true);
        if (!_valueName.isNil())
        args.append(_valueName);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mTTL_nil) {
        KDSoapValue _valueTTL(QString::fromLatin1("TTL"), QVariant::fromValue(d_ptr->mTTL), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// elementargumentserializer.cpp:108
        _valueTTL.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueTTL.setQualified(true);
        if (!_valueTTL.isNil())
        args.append(_valueTTL);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__DynamicDNSInformation::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Type")) {// converter_complextype.cpp:354
            d_ptr->mType.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Name")) {// converter_complextype.cpp:354
            d_ptr->mName.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mName_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("TTL")) {// converter_complextype.cpp:354
            d_ptr->mTTL = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mTTL_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__DynamicDNSInformation::TT__DynamicDNSInformation()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DynamicDNSInformation::~TT__DynamicDNSInformation()
{
}

dm::TT__DynamicDNSInformation::TT__DynamicDNSInformation( const dm::TT__DynamicDNSInformation& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__DynamicDNSInformation&  dm::TT__DynamicDNSInformation::operator=( const dm::TT__DynamicDNSInformation& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__SystemDateTime::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__SetDateTimeType mDateTimeType;
    bool mDaylightSavings;
    dm::TT__TimeZone mTimeZone;
    bool mTimeZone_nil;
    dm::TT__DateTime mUTCDateTime;
    bool mUTCDateTime_nil;
    dm::TT__DateTime mLocalDateTime;
    bool mLocalDateTime_nil;
    dm::TT__SystemDateTimeExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__SystemDateTime::PrivateDPtr::PrivateDPtr()
    : mDaylightSavings(false), mTimeZone_nil(true), mUTCDateTime_nil(true), mLocalDateTime_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__SystemDateTime::setDateTimeType( const dm::TT__SetDateTimeType& _dateTimeType )
{
    d_ptr->mDateTimeType = _dateTimeType;
}

dm::TT__SetDateTimeType dm::TT__SystemDateTime::dateTimeType() const
{
    return d_ptr->mDateTimeType;
}

void dm::TT__SystemDateTime::setDaylightSavings( bool _daylightSavings )
{
    d_ptr->mDaylightSavings = _daylightSavings;
}

bool dm::TT__SystemDateTime::daylightSavings() const
{
    return d_ptr->mDaylightSavings;
}

void dm::TT__SystemDateTime::setTimeZone( const dm::TT__TimeZone& _timeZone )
{
    d_ptr->mTimeZone_nil = false;// converter_complextype.cpp:277
    d_ptr->mTimeZone = _timeZone;
}

dm::TT__TimeZone dm::TT__SystemDateTime::timeZone() const
{
    return d_ptr->mTimeZone;
}

void dm::TT__SystemDateTime::setUTCDateTime( const dm::TT__DateTime& _uTCDateTime )
{
    d_ptr->mUTCDateTime_nil = false;// converter_complextype.cpp:277
    d_ptr->mUTCDateTime = _uTCDateTime;
}

dm::TT__DateTime dm::TT__SystemDateTime::uTCDateTime() const
{
    return d_ptr->mUTCDateTime;
}

void dm::TT__SystemDateTime::setLocalDateTime( const dm::TT__DateTime& _localDateTime )
{
    d_ptr->mLocalDateTime_nil = false;// converter_complextype.cpp:277
    d_ptr->mLocalDateTime = _localDateTime;
}

dm::TT__DateTime dm::TT__SystemDateTime::localDateTime() const
{
    return d_ptr->mLocalDateTime;
}

void dm::TT__SystemDateTime::setExtension( const dm::TT__SystemDateTimeExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__SystemDateTimeExtension dm::TT__SystemDateTime::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__SystemDateTime::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__SystemDateTime::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__SystemDateTime::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SystemDateTime"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDateTimeType(QString::fromLatin1("DateTimeType"), d_ptr->mDateTimeType.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SetDateTimeType"));// elementargumentserializer.cpp:110
    _valueDateTimeType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDateTimeType.setQualified(true);
    args.append(_valueDateTimeType);// elementargumentserializer.cpp:122
    KDSoapValue _valueDaylightSavings(QString::fromLatin1("DaylightSavings"), QVariant::fromValue(d_ptr->mDaylightSavings), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueDaylightSavings.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDaylightSavings.setQualified(true);
    args.append(_valueDaylightSavings);// elementargumentserializer.cpp:122
    if (!d_ptr->mTimeZone_nil) {
        KDSoapValue _valueTimeZone(d_ptr->mTimeZone.serialize(QString::fromLatin1("TimeZone")));// elementargumentserializer.cpp:102
        _valueTimeZone.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueTimeZone.setQualified(true);
        if (!_valueTimeZone.isNil())
        args.append(_valueTimeZone);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mUTCDateTime_nil) {
        KDSoapValue _valueUTCDateTime(d_ptr->mUTCDateTime.serialize(QString::fromLatin1("UTCDateTime")));// elementargumentserializer.cpp:102
        _valueUTCDateTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueUTCDateTime.setQualified(true);
        if (!_valueUTCDateTime.isNil())
        args.append(_valueUTCDateTime);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mLocalDateTime_nil) {
        KDSoapValue _valueLocalDateTime(d_ptr->mLocalDateTime.serialize(QString::fromLatin1("LocalDateTime")));// elementargumentserializer.cpp:102
        _valueLocalDateTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueLocalDateTime.setQualified(true);
        if (!_valueLocalDateTime.isNil())
        args.append(_valueLocalDateTime);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__SystemDateTime::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DateTimeType")) {// converter_complextype.cpp:354
            d_ptr->mDateTimeType.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("DaylightSavings")) {// converter_complextype.cpp:354
            d_ptr->mDaylightSavings = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("TimeZone")) {// converter_complextype.cpp:354
            d_ptr->mTimeZone.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("UTCDateTime")) {// converter_complextype.cpp:354
            d_ptr->mUTCDateTime.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("LocalDateTime")) {// converter_complextype.cpp:354
            d_ptr->mLocalDateTime.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__SystemDateTime::TT__SystemDateTime()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SystemDateTime::~TT__SystemDateTime()
{
}

dm::TT__SystemDateTime::TT__SystemDateTime( const dm::TT__SystemDateTime& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SystemDateTime&  dm::TT__SystemDateTime::operator=( const dm::TT__SystemDateTime& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__User::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mUsername;
    QString mPassword;
    bool mPassword_nil;
    dm::TT__UserLevel mUserLevel;
    dm::TT__UserExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__User::PrivateDPtr::PrivateDPtr()
    : mPassword_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__User::setUsername( const QString& _username )
{
    d_ptr->mUsername = _username;
}

QString dm::TT__User::username() const
{
    return d_ptr->mUsername;
}

void dm::TT__User::setPassword( const QString& _password )
{
    d_ptr->mPassword_nil = false;// converter_complextype.cpp:277
    d_ptr->mPassword = _password;
}

QString dm::TT__User::password() const
{
    return d_ptr->mPassword;
}

void dm::TT__User::setUserLevel( const dm::TT__UserLevel& _userLevel )
{
    d_ptr->mUserLevel = _userLevel;
}

dm::TT__UserLevel dm::TT__User::userLevel() const
{
    return d_ptr->mUserLevel;
}

void dm::TT__User::setExtension( const dm::TT__UserExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__UserExtension dm::TT__User::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__User::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__User::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__User::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("User"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueUsername(QString::fromLatin1("Username"), QVariant::fromValue(d_ptr->mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueUsername.setQualified(true);
    args.append(_valueUsername);// elementargumentserializer.cpp:122
    if (!d_ptr->mPassword_nil) {
        KDSoapValue _valuePassword(QString::fromLatin1("Password"), QVariant::fromValue(d_ptr->mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valuePassword.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePassword.setQualified(true);
        if (!_valuePassword.isNil())
        args.append(_valuePassword);// elementargumentserializer.cpp:122
    }
    KDSoapValue _valueUserLevel(QString::fromLatin1("UserLevel"), d_ptr->mUserLevel.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("UserLevel"));// elementargumentserializer.cpp:110
    _valueUserLevel.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueUserLevel.setQualified(true);
    args.append(_valueUserLevel);// elementargumentserializer.cpp:122
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__User::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Username")) {// converter_complextype.cpp:354
            d_ptr->mUsername = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Password")) {// converter_complextype.cpp:354
            d_ptr->mPassword = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mPassword_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("UserLevel")) {// converter_complextype.cpp:354
            d_ptr->mUserLevel.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__User::TT__User()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__User::~TT__User()
{
}

dm::TT__User::TT__User( const dm::TT__User& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__User&  dm::TT__User::operator=( const dm::TT__User& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetClientCertificateModeResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mEnabled;
};

dm::TDS__GetClientCertificateModeResponse::PrivateDPtr::PrivateDPtr()
    : mEnabled(false)
{
}


void dm::TDS__GetClientCertificateModeResponse::setEnabled( bool _enabled )
{
    d_ptr->mEnabled = _enabled;
}

bool dm::TDS__GetClientCertificateModeResponse::enabled() const
{
    return d_ptr->mEnabled;
}

KDSoapValue dm::TDS__GetClientCertificateModeResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetClientCertificateModeResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueEnabled(QString::fromLatin1("Enabled"), QVariant::fromValue(d_ptr->mEnabled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueEnabled.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueEnabled.setQualified(true);
    args.append(_valueEnabled);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetClientCertificateModeResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Enabled")) {// converter_complextype.cpp:354
            d_ptr->mEnabled = val.value().value<bool>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__GetClientCertificateModeResponse::TDS__GetClientCertificateModeResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetClientCertificateModeResponse::~TDS__GetClientCertificateModeResponse()
{
}

dm::TDS__GetClientCertificateModeResponse::TDS__GetClientCertificateModeResponse( const dm::TDS__GetClientCertificateModeResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetClientCertificateModeResponse&  dm::TDS__GetClientCertificateModeResponse::operator=( const dm::TDS__GetClientCertificateModeResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Space1DDescription::PrivateDPtr : public QSharedData
{
public:
    QString mURI;
    dm::TT__FloatRange mXRange;
};

void dm::TT__Space1DDescription::setURI( const QString& _uRI )
{
    d_ptr->mURI = _uRI;
}

QString dm::TT__Space1DDescription::uRI() const
{
    return d_ptr->mURI;
}

void dm::TT__Space1DDescription::setXRange( const dm::TT__FloatRange& _xRange )
{
    d_ptr->mXRange = _xRange;
}

dm::TT__FloatRange dm::TT__Space1DDescription::xRange() const
{
    return d_ptr->mXRange;
}

KDSoapValue dm::TT__Space1DDescription::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Space1DDescription"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueURI(QString::fromLatin1("URI"), QVariant::fromValue(d_ptr->mURI), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueURI.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueURI.setQualified(true);
    args.append(_valueURI);// elementargumentserializer.cpp:122
    KDSoapValue _valueXRange(d_ptr->mXRange.serialize(QString::fromLatin1("XRange")));// elementargumentserializer.cpp:102
    _valueXRange.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXRange.setQualified(true);
    args.append(_valueXRange);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__Space1DDescription::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("URI")) {// converter_complextype.cpp:354
            d_ptr->mURI = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("XRange")) {// converter_complextype.cpp:354
            d_ptr->mXRange.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TT__Space1DDescription::TT__Space1DDescription()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Space1DDescription::~TT__Space1DDescription()
{
}

dm::TT__Space1DDescription::TT__Space1DDescription( const dm::TT__Space1DDescription& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Space1DDescription&  dm::TT__Space1DDescription::operator=( const dm::TT__Space1DDescription& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__PTZPresetTourSupportedExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__PTZPresetTourSupportedExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__PTZPresetTourSupportedExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__PTZPresetTourSupportedExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__PTZPresetTourSupportedExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("PTZPresetTourSupportedExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__PTZPresetTourSupportedExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__PTZPresetTourSupportedExtension::TT__PTZPresetTourSupportedExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__PTZPresetTourSupportedExtension::~TT__PTZPresetTourSupportedExtension()
{
}

dm::TT__PTZPresetTourSupportedExtension::TT__PTZPresetTourSupportedExtension( const dm::TT__PTZPresetTourSupportedExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__PTZPresetTourSupportedExtension&  dm::TT__PTZPresetTourSupportedExtension::operator=( const dm::TT__PTZPresetTourSupportedExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__CreateDot1XConfiguration::PrivateDPtr : public QSharedData
{
public:
    dm::TT__Dot1XConfiguration mDot1XConfiguration;
};

void dm::TDS__CreateDot1XConfiguration::setDot1XConfiguration( const dm::TT__Dot1XConfiguration& _dot1XConfiguration )
{
    d_ptr->mDot1XConfiguration = _dot1XConfiguration;
}

dm::TT__Dot1XConfiguration dm::TDS__CreateDot1XConfiguration::dot1XConfiguration() const
{
    return d_ptr->mDot1XConfiguration;
}

KDSoapValue dm::TDS__CreateDot1XConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("CreateDot1XConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDot1XConfiguration(d_ptr->mDot1XConfiguration.serialize(QString::fromLatin1("Dot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDot1XConfiguration.setQualified(true);
    args.append(_valueDot1XConfiguration);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__CreateDot1XConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Dot1XConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mDot1XConfiguration.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__CreateDot1XConfiguration::TDS__CreateDot1XConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__CreateDot1XConfiguration::~TDS__CreateDot1XConfiguration()
{
}

dm::TDS__CreateDot1XConfiguration::TDS__CreateDot1XConfiguration( const dm::TDS__CreateDot1XConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__CreateDot1XConfiguration&  dm::TDS__CreateDot1XConfiguration::operator=( const dm::TDS__CreateDot1XConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__HostnameInformation::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mFromDHCP;
    QString mName;
    bool mName_nil;
    dm::TT__HostnameInformationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__HostnameInformation::PrivateDPtr::PrivateDPtr()
    : mFromDHCP(false), mName_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__HostnameInformation::setFromDHCP( bool _fromDHCP )
{
    d_ptr->mFromDHCP = _fromDHCP;
}

bool dm::TT__HostnameInformation::fromDHCP() const
{
    return d_ptr->mFromDHCP;
}

void dm::TT__HostnameInformation::setName( const QString& _name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:277
    d_ptr->mName = _name;
}

QString dm::TT__HostnameInformation::name() const
{
    return d_ptr->mName;
}

void dm::TT__HostnameInformation::setExtension( const dm::TT__HostnameInformationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__HostnameInformationExtension dm::TT__HostnameInformation::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__HostnameInformation::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__HostnameInformation::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__HostnameInformation::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("HostnameInformation"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueFromDHCP(QString::fromLatin1("FromDHCP"), QVariant::fromValue(d_ptr->mFromDHCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueFromDHCP.setQualified(true);
    args.append(_valueFromDHCP);// elementargumentserializer.cpp:122
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
        _valueName.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueName.setQualified(true);
        if (!_valueName.isNil())
        args.append(_valueName);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__HostnameInformation::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("FromDHCP")) {// converter_complextype.cpp:354
            d_ptr->mFromDHCP = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Name")) {// converter_complextype.cpp:354
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mName_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__HostnameInformation::TT__HostnameInformation()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__HostnameInformation::~TT__HostnameInformation()
{
}

dm::TT__HostnameInformation::TT__HostnameInformation( const dm::TT__HostnameInformation& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__HostnameInformation&  dm::TT__HostnameInformation::operator=( const dm::TT__HostnameInformation& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__ImagingSettingsExtension202::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__IrCutFilterAutoAdjustment > mIrCutFilterAutoAdjustment;
    bool mIrCutFilterAutoAdjustment_nil;
    dm::TT__ImagingSettingsExtension203 mExtension;
    bool mExtension_nil;
};

dm::TT__ImagingSettingsExtension202::PrivateDPtr::PrivateDPtr()
    : mIrCutFilterAutoAdjustment_nil(true), mExtension_nil(true)
{
}


void dm::TT__ImagingSettingsExtension202::setIrCutFilterAutoAdjustment( const QList< dm::TT__IrCutFilterAutoAdjustment >& _irCutFilterAutoAdjustment )
{
    d_ptr->mIrCutFilterAutoAdjustment_nil = false;// converter_complextype.cpp:277
    d_ptr->mIrCutFilterAutoAdjustment = _irCutFilterAutoAdjustment;
}

QList< dm::TT__IrCutFilterAutoAdjustment > dm::TT__ImagingSettingsExtension202::irCutFilterAutoAdjustment() const
{
    return d_ptr->mIrCutFilterAutoAdjustment;
}

void dm::TT__ImagingSettingsExtension202::setExtension( const dm::TT__ImagingSettingsExtension203& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__ImagingSettingsExtension203 dm::TT__ImagingSettingsExtension202::extension() const
{
    return d_ptr->mExtension;
}

KDSoapValue dm::TT__ImagingSettingsExtension202::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ImagingSettingsExtension202"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mIrCutFilterAutoAdjustment.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueIrCutFilterAutoAdjustment(d_ptr->mIrCutFilterAutoAdjustment.at(i).serialize(QString::fromLatin1("IrCutFilterAutoAdjustment")));// elementargumentserializer.cpp:102
        _valueIrCutFilterAutoAdjustment.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIrCutFilterAutoAdjustment.setQualified(true);
        args.append(_valueIrCutFilterAutoAdjustment);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__ImagingSettingsExtension202::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("IrCutFilterAutoAdjustment")) {// converter_complextype.cpp:354
            dm::TT__IrCutFilterAutoAdjustment mIrCutFilterAutoAdjustmentTemp;// converter_complextype.cpp:412
            mIrCutFilterAutoAdjustmentTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mIrCutFilterAutoAdjustment.append(mIrCutFilterAutoAdjustmentTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TT__ImagingSettingsExtension202::TT__ImagingSettingsExtension202()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ImagingSettingsExtension202::~TT__ImagingSettingsExtension202()
{
}

dm::TT__ImagingSettingsExtension202::TT__ImagingSettingsExtension202( const dm::TT__ImagingSettingsExtension202& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ImagingSettingsExtension202&  dm::TT__ImagingSettingsExtension202::operator=( const dm::TT__ImagingSettingsExtension202& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetPkcs10RequestResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__BinaryData mPkcs10Request;
};

void dm::TDS__GetPkcs10RequestResponse::setPkcs10Request( const dm::TT__BinaryData& _pkcs10Request )
{
    d_ptr->mPkcs10Request = _pkcs10Request;
}

dm::TT__BinaryData dm::TDS__GetPkcs10RequestResponse::pkcs10Request() const
{
    return d_ptr->mPkcs10Request;
}

KDSoapValue dm::TDS__GetPkcs10RequestResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetPkcs10RequestResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valuePkcs10Request(d_ptr->mPkcs10Request.serialize(QString::fromLatin1("Pkcs10Request")));// elementargumentserializer.cpp:102
    _valuePkcs10Request.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valuePkcs10Request.setQualified(true);
    args.append(_valuePkcs10Request);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetPkcs10RequestResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Pkcs10Request")) {// converter_complextype.cpp:354
            d_ptr->mPkcs10Request.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetPkcs10RequestResponse::TDS__GetPkcs10RequestResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetPkcs10RequestResponse::~TDS__GetPkcs10RequestResponse()
{
}

dm::TDS__GetPkcs10RequestResponse::TDS__GetPkcs10RequestResponse( const dm::TDS__GetPkcs10RequestResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetPkcs10RequestResponse&  dm::TDS__GetPkcs10RequestResponse::operator=( const dm::TDS__GetPkcs10RequestResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__PrefixedIPv6Address::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__IPv6Address mAddress;
    int mPrefixLength;
};

dm::TT__PrefixedIPv6Address::PrivateDPtr::PrivateDPtr()
    : mPrefixLength(0)
{
}


void dm::TT__PrefixedIPv6Address::setAddress( const dm::TT__IPv6Address& _address )
{
    d_ptr->mAddress = _address;
}

dm::TT__IPv6Address dm::TT__PrefixedIPv6Address::address() const
{
    return d_ptr->mAddress;
}

void dm::TT__PrefixedIPv6Address::setPrefixLength( int _prefixLength )
{
    d_ptr->mPrefixLength = _prefixLength;
}

int dm::TT__PrefixedIPv6Address::prefixLength() const
{
    return d_ptr->mPrefixLength;
}

KDSoapValue dm::TT__PrefixedIPv6Address::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("PrefixedIPv6Address"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueAddress(QString::fromLatin1("Address"), d_ptr->mAddress.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv6Address"));// elementargumentserializer.cpp:110
    _valueAddress.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueAddress.setQualified(true);
    args.append(_valueAddress);// elementargumentserializer.cpp:122
    KDSoapValue _valuePrefixLength(QString::fromLatin1("PrefixLength"), QVariant::fromValue(d_ptr->mPrefixLength), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valuePrefixLength.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valuePrefixLength.setQualified(true);
    args.append(_valuePrefixLength);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__PrefixedIPv6Address::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Address")) {// converter_complextype.cpp:354
            d_ptr->mAddress.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("PrefixLength")) {// converter_complextype.cpp:354
            d_ptr->mPrefixLength = val.value().value<int>();// converter_complextype.cpp:367
        }
    }
}

dm::TT__PrefixedIPv6Address::TT__PrefixedIPv6Address()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__PrefixedIPv6Address::~TT__PrefixedIPv6Address()
{
}

dm::TT__PrefixedIPv6Address::TT__PrefixedIPv6Address( const dm::TT__PrefixedIPv6Address& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__PrefixedIPv6Address&  dm::TT__PrefixedIPv6Address::operator=( const dm::TT__PrefixedIPv6Address& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__StorageConfigurationData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mLocalPath;
    bool mLocalPath_nil;
    QString mStorageUri;
    bool mStorageUri_nil;
    dm::TDS__UserCredential mUser;
    bool mUser_nil;
    dm::TDS__Extension mExtension;
    bool mExtension_nil;
    QString mType;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TDS__StorageConfigurationData::PrivateDPtr::PrivateDPtr()
    : mLocalPath_nil(true), mStorageUri_nil(true), mUser_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TDS__StorageConfigurationData::setLocalPath( const QString& _localPath )
{
    d_ptr->mLocalPath_nil = false;// converter_complextype.cpp:277
    d_ptr->mLocalPath = _localPath;
}

QString dm::TDS__StorageConfigurationData::localPath() const
{
    return d_ptr->mLocalPath;
}

void dm::TDS__StorageConfigurationData::setStorageUri( const QString& _storageUri )
{
    d_ptr->mStorageUri_nil = false;// converter_complextype.cpp:277
    d_ptr->mStorageUri = _storageUri;
}

QString dm::TDS__StorageConfigurationData::storageUri() const
{
    return d_ptr->mStorageUri;
}

void dm::TDS__StorageConfigurationData::setUser( const dm::TDS__UserCredential& _user )
{
    d_ptr->mUser_nil = false;// converter_complextype.cpp:277
    d_ptr->mUser = _user;
}

dm::TDS__UserCredential dm::TDS__StorageConfigurationData::user() const
{
    return d_ptr->mUser;
}

void dm::TDS__StorageConfigurationData::setExtension( const dm::TDS__Extension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TDS__Extension dm::TDS__StorageConfigurationData::extension() const
{
    return d_ptr->mExtension;
}

void dm::TDS__StorageConfigurationData::setType( const QString& _type )
{
    d_ptr->mType = _type;
}

QString dm::TDS__StorageConfigurationData::type() const
{
    return d_ptr->mType;
}

void dm::TDS__StorageConfigurationData::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TDS__StorageConfigurationData::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TDS__StorageConfigurationData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("StorageConfigurationData"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mLocalPath_nil) {
        KDSoapValue _valueLocalPath(QString::fromLatin1("LocalPath"), QVariant::fromValue(d_ptr->mLocalPath), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
        _valueLocalPath.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueLocalPath.setQualified(true);
        if (!_valueLocalPath.isNil())
        args.append(_valueLocalPath);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mStorageUri_nil) {
        KDSoapValue _valueStorageUri(QString::fromLatin1("StorageUri"), QVariant::fromValue(d_ptr->mStorageUri), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
        _valueStorageUri.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueStorageUri.setQualified(true);
        if (!_valueStorageUri.isNil())
        args.append(_valueStorageUri);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mUser_nil) {
        KDSoapValue _valueUser(d_ptr->mUser.serialize(QString::fromLatin1("User")));// elementargumentserializer.cpp:102
        _valueUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueUser.setQualified(true);
        if (!_valueUser.isNil())
        args.append(_valueUser);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    KDSoapValue _valueType(QString::fromLatin1("type"), QVariant::fromValue(d_ptr->mType), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    attribs.append(_valueType);// elementargumentserializer.cpp:122
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TDS__StorageConfigurationData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("LocalPath")) {// converter_complextype.cpp:354
            d_ptr->mLocalPath = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mLocalPath_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("StorageUri")) {// converter_complextype.cpp:354
            d_ptr->mStorageUri = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mStorageUri_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("User")) {// converter_complextype.cpp:354
            d_ptr->mUser.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("type")) {// converter_complextype.cpp:354
            d_ptr->mType = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TDS__StorageConfigurationData::TDS__StorageConfigurationData()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__StorageConfigurationData::~TDS__StorageConfigurationData()
{
}

dm::TDS__StorageConfigurationData::TDS__StorageConfigurationData( const dm::TDS__StorageConfigurationData& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__StorageConfigurationData&  dm::TDS__StorageConfigurationData::operator=( const dm::TDS__StorageConfigurationData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetCACertificates::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetCACertificates"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetCACertificates::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetCACertificates::TDS__GetCACertificates()
{
}

dm::TDS__GetCACertificates::~TDS__GetCACertificates()
{
}


class dm::TT__IPv6ConfigurationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__IPv6ConfigurationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__IPv6ConfigurationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__IPv6ConfigurationExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__IPv6ConfigurationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv6ConfigurationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__IPv6ConfigurationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__IPv6ConfigurationExtension::TT__IPv6ConfigurationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IPv6ConfigurationExtension::~TT__IPv6ConfigurationExtension()
{
}

dm::TT__IPv6ConfigurationExtension::TT__IPv6ConfigurationExtension( const dm::TT__IPv6ConfigurationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IPv6ConfigurationExtension&  dm::TT__IPv6ConfigurationExtension::operator=( const dm::TT__IPv6ConfigurationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__CreateStorageConfiguration::PrivateDPtr : public QSharedData
{
public:
    dm::TDS__StorageConfigurationData mStorageConfiguration;
};

void dm::TDS__CreateStorageConfiguration::setStorageConfiguration( const dm::TDS__StorageConfigurationData& _storageConfiguration )
{
    d_ptr->mStorageConfiguration = _storageConfiguration;
}

dm::TDS__StorageConfigurationData dm::TDS__CreateStorageConfiguration::storageConfiguration() const
{
    return d_ptr->mStorageConfiguration;
}

KDSoapValue dm::TDS__CreateStorageConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("CreateStorageConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueStorageConfiguration(d_ptr->mStorageConfiguration.serialize(QString::fromLatin1("StorageConfiguration")));// elementargumentserializer.cpp:102
    _valueStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueStorageConfiguration.setQualified(true);
    args.append(_valueStorageConfiguration);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__CreateStorageConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("StorageConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mStorageConfiguration.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__CreateStorageConfiguration::TDS__CreateStorageConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__CreateStorageConfiguration::~TDS__CreateStorageConfiguration()
{
}

dm::TDS__CreateStorageConfiguration::TDS__CreateStorageConfiguration( const dm::TDS__CreateStorageConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__CreateStorageConfiguration&  dm::TDS__CreateStorageConfiguration::operator=( const dm::TDS__CreateStorageConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__CertificateInformation::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCertificateID;
    QString mIssuerDN;
    bool mIssuerDN_nil;
    QString mSubjectDN;
    bool mSubjectDN_nil;
    dm::TT__CertificateUsage mKeyUsage;
    bool mKeyUsage_nil;
    dm::TT__CertificateUsage mExtendedKeyUsage;
    bool mExtendedKeyUsage_nil;
    int mKeyLength;
    bool mKeyLength_nil;
    QString mVersion;
    bool mVersion_nil;
    QString mSerialNum;
    bool mSerialNum_nil;
    QString mSignatureAlgorithm;
    bool mSignatureAlgorithm_nil;
    dm::TT__DateTimeRange mValidity;
    bool mValidity_nil;
    dm::TT__CertificateInformationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__CertificateInformation::PrivateDPtr::PrivateDPtr()
    : mIssuerDN_nil(true), mSubjectDN_nil(true), mKeyUsage_nil(true), mExtendedKeyUsage_nil(true), mKeyLength(0), mKeyLength_nil(true), mVersion_nil(true), mSerialNum_nil(true), mSignatureAlgorithm_nil(true), mValidity_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__CertificateInformation::setCertificateID( const QString& _certificateID )
{
    d_ptr->mCertificateID = _certificateID;
}

QString dm::TT__CertificateInformation::certificateID() const
{
    return d_ptr->mCertificateID;
}

void dm::TT__CertificateInformation::setIssuerDN( const QString& _issuerDN )
{
    d_ptr->mIssuerDN_nil = false;// converter_complextype.cpp:277
    d_ptr->mIssuerDN = _issuerDN;
}

QString dm::TT__CertificateInformation::issuerDN() const
{
    return d_ptr->mIssuerDN;
}

void dm::TT__CertificateInformation::setSubjectDN( const QString& _subjectDN )
{
    d_ptr->mSubjectDN_nil = false;// converter_complextype.cpp:277
    d_ptr->mSubjectDN = _subjectDN;
}

QString dm::TT__CertificateInformation::subjectDN() const
{
    return d_ptr->mSubjectDN;
}

void dm::TT__CertificateInformation::setKeyUsage( const dm::TT__CertificateUsage& _keyUsage )
{
    d_ptr->mKeyUsage_nil = false;// converter_complextype.cpp:277
    d_ptr->mKeyUsage = _keyUsage;
}

dm::TT__CertificateUsage dm::TT__CertificateInformation::keyUsage() const
{
    return d_ptr->mKeyUsage;
}

void dm::TT__CertificateInformation::setExtendedKeyUsage( const dm::TT__CertificateUsage& _extendedKeyUsage )
{
    d_ptr->mExtendedKeyUsage_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtendedKeyUsage = _extendedKeyUsage;
}

dm::TT__CertificateUsage dm::TT__CertificateInformation::extendedKeyUsage() const
{
    return d_ptr->mExtendedKeyUsage;
}

void dm::TT__CertificateInformation::setKeyLength( int _keyLength )
{
    d_ptr->mKeyLength_nil = false;// converter_complextype.cpp:277
    d_ptr->mKeyLength = _keyLength;
}

int dm::TT__CertificateInformation::keyLength() const
{
    return d_ptr->mKeyLength;
}

void dm::TT__CertificateInformation::setVersion( const QString& _version )
{
    d_ptr->mVersion_nil = false;// converter_complextype.cpp:277
    d_ptr->mVersion = _version;
}

QString dm::TT__CertificateInformation::version() const
{
    return d_ptr->mVersion;
}

void dm::TT__CertificateInformation::setSerialNum( const QString& _serialNum )
{
    d_ptr->mSerialNum_nil = false;// converter_complextype.cpp:277
    d_ptr->mSerialNum = _serialNum;
}

QString dm::TT__CertificateInformation::serialNum() const
{
    return d_ptr->mSerialNum;
}

void dm::TT__CertificateInformation::setSignatureAlgorithm( const QString& _signatureAlgorithm )
{
    d_ptr->mSignatureAlgorithm_nil = false;// converter_complextype.cpp:277
    d_ptr->mSignatureAlgorithm = _signatureAlgorithm;
}

QString dm::TT__CertificateInformation::signatureAlgorithm() const
{
    return d_ptr->mSignatureAlgorithm;
}

void dm::TT__CertificateInformation::setValidity( const dm::TT__DateTimeRange& _validity )
{
    d_ptr->mValidity_nil = false;// converter_complextype.cpp:277
    d_ptr->mValidity = _validity;
}

dm::TT__DateTimeRange dm::TT__CertificateInformation::validity() const
{
    return d_ptr->mValidity;
}

void dm::TT__CertificateInformation::setExtension( const dm::TT__CertificateInformationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__CertificateInformationExtension dm::TT__CertificateInformation::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__CertificateInformation::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__CertificateInformation::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__CertificateInformation::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("CertificateInformation"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueCertificateID(QString::fromLatin1("CertificateID"), QVariant::fromValue(d_ptr->mCertificateID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
    _valueCertificateID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueCertificateID.setQualified(true);
    args.append(_valueCertificateID);// elementargumentserializer.cpp:122
    if (!d_ptr->mIssuerDN_nil) {
        KDSoapValue _valueIssuerDN(QString::fromLatin1("IssuerDN"), QVariant::fromValue(d_ptr->mIssuerDN), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueIssuerDN.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIssuerDN.setQualified(true);
        if (!_valueIssuerDN.isNil())
        args.append(_valueIssuerDN);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSubjectDN_nil) {
        KDSoapValue _valueSubjectDN(QString::fromLatin1("SubjectDN"), QVariant::fromValue(d_ptr->mSubjectDN), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueSubjectDN.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSubjectDN.setQualified(true);
        if (!_valueSubjectDN.isNil())
        args.append(_valueSubjectDN);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mKeyUsage_nil) {
        KDSoapValue _valueKeyUsage(d_ptr->mKeyUsage.serialize(QString::fromLatin1("KeyUsage")));// elementargumentserializer.cpp:102
        _valueKeyUsage.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueKeyUsage.setQualified(true);
        if (!_valueKeyUsage.isNil())
        args.append(_valueKeyUsage);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtendedKeyUsage_nil) {
        KDSoapValue _valueExtendedKeyUsage(d_ptr->mExtendedKeyUsage.serialize(QString::fromLatin1("ExtendedKeyUsage")));// elementargumentserializer.cpp:102
        _valueExtendedKeyUsage.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtendedKeyUsage.setQualified(true);
        if (!_valueExtendedKeyUsage.isNil())
        args.append(_valueExtendedKeyUsage);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mKeyLength_nil) {
        KDSoapValue _valueKeyLength(QString::fromLatin1("KeyLength"), QVariant::fromValue(d_ptr->mKeyLength), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueKeyLength.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueKeyLength.setQualified(true);
        if (!_valueKeyLength.isNil())
        args.append(_valueKeyLength);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mVersion_nil) {
        KDSoapValue _valueVersion(QString::fromLatin1("Version"), QVariant::fromValue(d_ptr->mVersion), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueVersion.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueVersion.setQualified(true);
        if (!_valueVersion.isNil())
        args.append(_valueVersion);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSerialNum_nil) {
        KDSoapValue _valueSerialNum(QString::fromLatin1("SerialNum"), QVariant::fromValue(d_ptr->mSerialNum), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueSerialNum.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSerialNum.setQualified(true);
        if (!_valueSerialNum.isNil())
        args.append(_valueSerialNum);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSignatureAlgorithm_nil) {
        KDSoapValue _valueSignatureAlgorithm(QString::fromLatin1("SignatureAlgorithm"), QVariant::fromValue(d_ptr->mSignatureAlgorithm), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueSignatureAlgorithm.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSignatureAlgorithm.setQualified(true);
        if (!_valueSignatureAlgorithm.isNil())
        args.append(_valueSignatureAlgorithm);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mValidity_nil) {
        KDSoapValue _valueValidity(d_ptr->mValidity.serialize(QString::fromLatin1("Validity")));// elementargumentserializer.cpp:102
        _valueValidity.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueValidity.setQualified(true);
        if (!_valueValidity.isNil())
        args.append(_valueValidity);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__CertificateInformation::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateID")) {// converter_complextype.cpp:354
            d_ptr->mCertificateID = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("IssuerDN")) {// converter_complextype.cpp:354
            d_ptr->mIssuerDN = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mIssuerDN_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("SubjectDN")) {// converter_complextype.cpp:354
            d_ptr->mSubjectDN = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mSubjectDN_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("KeyUsage")) {// converter_complextype.cpp:354
            d_ptr->mKeyUsage.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("ExtendedKeyUsage")) {// converter_complextype.cpp:354
            d_ptr->mExtendedKeyUsage.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("KeyLength")) {// converter_complextype.cpp:354
            d_ptr->mKeyLength = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mKeyLength_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Version")) {// converter_complextype.cpp:354
            d_ptr->mVersion = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mVersion_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("SerialNum")) {// converter_complextype.cpp:354
            d_ptr->mSerialNum = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mSerialNum_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("SignatureAlgorithm")) {// converter_complextype.cpp:354
            d_ptr->mSignatureAlgorithm = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mSignatureAlgorithm_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Validity")) {// converter_complextype.cpp:354
            d_ptr->mValidity.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__CertificateInformation::TT__CertificateInformation()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__CertificateInformation::~TT__CertificateInformation()
{
}

dm::TT__CertificateInformation::TT__CertificateInformation( const dm::TT__CertificateInformation& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__CertificateInformation&  dm::TT__CertificateInformation::operator=( const dm::TT__CertificateInformation& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkZeroConfigurationExtension2::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__NetworkZeroConfigurationExtension2::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__NetworkZeroConfigurationExtension2::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__NetworkZeroConfigurationExtension2::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__NetworkZeroConfigurationExtension2::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkZeroConfigurationExtension2"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__NetworkZeroConfigurationExtension2::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__NetworkZeroConfigurationExtension2::TT__NetworkZeroConfigurationExtension2()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkZeroConfigurationExtension2::~TT__NetworkZeroConfigurationExtension2()
{
}

dm::TT__NetworkZeroConfigurationExtension2::TT__NetworkZeroConfigurationExtension2( const dm::TT__NetworkZeroConfigurationExtension2& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkZeroConfigurationExtension2&  dm::TT__NetworkZeroConfigurationExtension2::operator=( const dm::TT__NetworkZeroConfigurationExtension2& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__ReplayCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__ReplayCapabilities::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__ReplayCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__ReplayCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__ReplayCapabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__ReplayCapabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__ReplayCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__ReplayCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__ReplayCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReplayCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__ReplayCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__ReplayCapabilities::TT__ReplayCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ReplayCapabilities::~TT__ReplayCapabilities()
{
}

dm::TT__ReplayCapabilities::TT__ReplayCapabilities( const dm::TT__ReplayCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ReplayCapabilities&  dm::TT__ReplayCapabilities::operator=( const dm::TT__ReplayCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__SecurityCapabilitiesExtension2::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mDot1X;
    QList< int > mSupportedEAPMethod;
    bool mSupportedEAPMethod_nil;
    bool mRemoteUserHandling;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__SecurityCapabilitiesExtension2::PrivateDPtr::PrivateDPtr()
    : mDot1X(false), mSupportedEAPMethod_nil(true), mRemoteUserHandling(false), mAny_nil(true)
{
}


void dm::TT__SecurityCapabilitiesExtension2::setDot1X( bool _dot1X )
{
    d_ptr->mDot1X = _dot1X;
}

bool dm::TT__SecurityCapabilitiesExtension2::dot1X() const
{
    return d_ptr->mDot1X;
}

void dm::TT__SecurityCapabilitiesExtension2::setSupportedEAPMethod( const QList< int >& _supportedEAPMethod )
{
    d_ptr->mSupportedEAPMethod_nil = false;// converter_complextype.cpp:277
    d_ptr->mSupportedEAPMethod = _supportedEAPMethod;
}

QList< int > dm::TT__SecurityCapabilitiesExtension2::supportedEAPMethod() const
{
    return d_ptr->mSupportedEAPMethod;
}

void dm::TT__SecurityCapabilitiesExtension2::setRemoteUserHandling( bool _remoteUserHandling )
{
    d_ptr->mRemoteUserHandling = _remoteUserHandling;
}

bool dm::TT__SecurityCapabilitiesExtension2::remoteUserHandling() const
{
    return d_ptr->mRemoteUserHandling;
}

void dm::TT__SecurityCapabilitiesExtension2::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__SecurityCapabilitiesExtension2::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__SecurityCapabilitiesExtension2::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SecurityCapabilitiesExtension2"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDot1X(QString::fromLatin1("Dot1X"), QVariant::fromValue(d_ptr->mDot1X), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueDot1X.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDot1X.setQualified(true);
    args.append(_valueDot1X);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mSupportedEAPMethod.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueSupportedEAPMethod(QString::fromLatin1("SupportedEAPMethod"), QVariant::fromValue(d_ptr->mSupportedEAPMethod.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueSupportedEAPMethod.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSupportedEAPMethod.setQualified(true);
        args.append(_valueSupportedEAPMethod);// elementargumentserializer.cpp:122
    }
    KDSoapValue _valueRemoteUserHandling(QString::fromLatin1("RemoteUserHandling"), QVariant::fromValue(d_ptr->mRemoteUserHandling), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueRemoteUserHandling.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueRemoteUserHandling.setQualified(true);
    args.append(_valueRemoteUserHandling);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__SecurityCapabilitiesExtension2::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Dot1X")) {// converter_complextype.cpp:354
            d_ptr->mDot1X = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("SupportedEAPMethod")) {// converter_complextype.cpp:354
            int mSupportedEAPMethodTemp;// converter_complextype.cpp:412
            mSupportedEAPMethodTemp = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mSupportedEAPMethod.append(mSupportedEAPMethodTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("RemoteUserHandling")) {// converter_complextype.cpp:354
            d_ptr->mRemoteUserHandling = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__SecurityCapabilitiesExtension2::TT__SecurityCapabilitiesExtension2()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SecurityCapabilitiesExtension2::~TT__SecurityCapabilitiesExtension2()
{
}

dm::TT__SecurityCapabilitiesExtension2::TT__SecurityCapabilitiesExtension2( const dm::TT__SecurityCapabilitiesExtension2& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SecurityCapabilitiesExtension2&  dm::TT__SecurityCapabilitiesExtension2::operator=( const dm::TT__SecurityCapabilitiesExtension2& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__StartFirmwareUpgrade::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("StartFirmwareUpgrade"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__StartFirmwareUpgrade::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__StartFirmwareUpgrade::TDS__StartFirmwareUpgrade()
{
}

dm::TDS__StartFirmwareUpgrade::~TDS__StartFirmwareUpgrade()
{
}


KDSoapValue dm::TDS__GetDynamicDNS::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDynamicDNS"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetDynamicDNS::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetDynamicDNS::TDS__GetDynamicDNS()
{
}

dm::TDS__GetDynamicDNS::~TDS__GetDynamicDNS()
{
}


KDSoapValue dm::TDS__SetNetworkDefaultGatewayResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetNetworkDefaultGatewayResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetNetworkDefaultGatewayResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetNetworkDefaultGatewayResponse::TDS__SetNetworkDefaultGatewayResponse()
{
}

dm::TDS__SetNetworkDefaultGatewayResponse::~TDS__SetNetworkDefaultGatewayResponse()
{
}


class dm::TT__ReceiverCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    bool mRTP_Multicast;
    bool mRTP_TCP;
    bool mRTP_RTSP_TCP;
    int mSupportedReceivers;
    int mMaximumRTSPURILength;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__ReceiverCapabilities::PrivateDPtr::PrivateDPtr()
    : mRTP_Multicast(false), mRTP_TCP(false), mRTP_RTSP_TCP(false), mSupportedReceivers(0), mMaximumRTSPURILength(0), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__ReceiverCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__ReceiverCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__ReceiverCapabilities::setRTP_Multicast( bool _rTP_Multicast )
{
    d_ptr->mRTP_Multicast = _rTP_Multicast;
}

bool dm::TT__ReceiverCapabilities::rTP_Multicast() const
{
    return d_ptr->mRTP_Multicast;
}

void dm::TT__ReceiverCapabilities::setRTP_TCP( bool _rTP_TCP )
{
    d_ptr->mRTP_TCP = _rTP_TCP;
}

bool dm::TT__ReceiverCapabilities::rTP_TCP() const
{
    return d_ptr->mRTP_TCP;
}

void dm::TT__ReceiverCapabilities::setRTP_RTSP_TCP( bool _rTP_RTSP_TCP )
{
    d_ptr->mRTP_RTSP_TCP = _rTP_RTSP_TCP;
}

bool dm::TT__ReceiverCapabilities::rTP_RTSP_TCP() const
{
    return d_ptr->mRTP_RTSP_TCP;
}

void dm::TT__ReceiverCapabilities::setSupportedReceivers( int _supportedReceivers )
{
    d_ptr->mSupportedReceivers = _supportedReceivers;
}

int dm::TT__ReceiverCapabilities::supportedReceivers() const
{
    return d_ptr->mSupportedReceivers;
}

void dm::TT__ReceiverCapabilities::setMaximumRTSPURILength( int _maximumRTSPURILength )
{
    d_ptr->mMaximumRTSPURILength = _maximumRTSPURILength;
}

int dm::TT__ReceiverCapabilities::maximumRTSPURILength() const
{
    return d_ptr->mMaximumRTSPURILength;
}

void dm::TT__ReceiverCapabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__ReceiverCapabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__ReceiverCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__ReceiverCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__ReceiverCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReceiverCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    KDSoapValue _valueRTP_Multicast(QString::fromLatin1("RTP_Multicast"), QVariant::fromValue(d_ptr->mRTP_Multicast), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueRTP_Multicast.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueRTP_Multicast.setQualified(true);
    args.append(_valueRTP_Multicast);// elementargumentserializer.cpp:122
    KDSoapValue _valueRTP_TCP(QString::fromLatin1("RTP_TCP"), QVariant::fromValue(d_ptr->mRTP_TCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueRTP_TCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueRTP_TCP.setQualified(true);
    args.append(_valueRTP_TCP);// elementargumentserializer.cpp:122
    KDSoapValue _valueRTP_RTSP_TCP(QString::fromLatin1("RTP_RTSP_TCP"), QVariant::fromValue(d_ptr->mRTP_RTSP_TCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueRTP_RTSP_TCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueRTP_RTSP_TCP.setQualified(true);
    args.append(_valueRTP_RTSP_TCP);// elementargumentserializer.cpp:122
    KDSoapValue _valueSupportedReceivers(QString::fromLatin1("SupportedReceivers"), QVariant::fromValue(d_ptr->mSupportedReceivers), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueSupportedReceivers.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueSupportedReceivers.setQualified(true);
    args.append(_valueSupportedReceivers);// elementargumentserializer.cpp:122
    KDSoapValue _valueMaximumRTSPURILength(QString::fromLatin1("MaximumRTSPURILength"), QVariant::fromValue(d_ptr->mMaximumRTSPURILength), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueMaximumRTSPURILength.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMaximumRTSPURILength.setQualified(true);
    args.append(_valueMaximumRTSPURILength);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__ReceiverCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("RTP_Multicast")) {// converter_complextype.cpp:354
            d_ptr->mRTP_Multicast = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("RTP_TCP")) {// converter_complextype.cpp:354
            d_ptr->mRTP_TCP = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("RTP_RTSP_TCP")) {// converter_complextype.cpp:354
            d_ptr->mRTP_RTSP_TCP = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("SupportedReceivers")) {// converter_complextype.cpp:354
            d_ptr->mSupportedReceivers = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("MaximumRTSPURILength")) {// converter_complextype.cpp:354
            d_ptr->mMaximumRTSPURILength = val.value().value<int>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__ReceiverCapabilities::TT__ReceiverCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ReceiverCapabilities::~TT__ReceiverCapabilities()
{
}

dm::TT__ReceiverCapabilities::TT__ReceiverCapabilities( const dm::TT__ReceiverCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ReceiverCapabilities&  dm::TT__ReceiverCapabilities::operator=( const dm::TT__ReceiverCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__DeviceCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    dm::TT__NetworkCapabilities mNetwork;
    bool mNetwork_nil;
    dm::TT__SystemCapabilities mSystem;
    bool mSystem_nil;
    dm::TT__IOCapabilities mIO;
    bool mIO_nil;
    dm::TT__SecurityCapabilities mSecurity;
    bool mSecurity_nil;
    dm::TT__DeviceCapabilitiesExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__DeviceCapabilities::PrivateDPtr::PrivateDPtr()
    : mNetwork_nil(true), mSystem_nil(true), mIO_nil(true), mSecurity_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__DeviceCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__DeviceCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__DeviceCapabilities::setNetwork( const dm::TT__NetworkCapabilities& _network )
{
    d_ptr->mNetwork_nil = false;// converter_complextype.cpp:277
    d_ptr->mNetwork = _network;
}

dm::TT__NetworkCapabilities dm::TT__DeviceCapabilities::network() const
{
    return d_ptr->mNetwork;
}

void dm::TT__DeviceCapabilities::setSystem( const dm::TT__SystemCapabilities& _system )
{
    d_ptr->mSystem_nil = false;// converter_complextype.cpp:277
    d_ptr->mSystem = _system;
}

dm::TT__SystemCapabilities dm::TT__DeviceCapabilities::system() const
{
    return d_ptr->mSystem;
}

void dm::TT__DeviceCapabilities::setIO( const dm::TT__IOCapabilities& _iO )
{
    d_ptr->mIO_nil = false;// converter_complextype.cpp:277
    d_ptr->mIO = _iO;
}

dm::TT__IOCapabilities dm::TT__DeviceCapabilities::iO() const
{
    return d_ptr->mIO;
}

void dm::TT__DeviceCapabilities::setSecurity( const dm::TT__SecurityCapabilities& _security )
{
    d_ptr->mSecurity_nil = false;// converter_complextype.cpp:277
    d_ptr->mSecurity = _security;
}

dm::TT__SecurityCapabilities dm::TT__DeviceCapabilities::security() const
{
    return d_ptr->mSecurity;
}

void dm::TT__DeviceCapabilities::setExtension( const dm::TT__DeviceCapabilitiesExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__DeviceCapabilitiesExtension dm::TT__DeviceCapabilities::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__DeviceCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__DeviceCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__DeviceCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DeviceCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    if (!d_ptr->mNetwork_nil) {
        KDSoapValue _valueNetwork(d_ptr->mNetwork.serialize(QString::fromLatin1("Network")));// elementargumentserializer.cpp:102
        _valueNetwork.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueNetwork.setQualified(true);
        if (!_valueNetwork.isNil())
        args.append(_valueNetwork);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSystem_nil) {
        KDSoapValue _valueSystem(d_ptr->mSystem.serialize(QString::fromLatin1("System")));// elementargumentserializer.cpp:102
        _valueSystem.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSystem.setQualified(true);
        if (!_valueSystem.isNil())
        args.append(_valueSystem);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mIO_nil) {
        KDSoapValue _valueIO(d_ptr->mIO.serialize(QString::fromLatin1("IO")));// elementargumentserializer.cpp:102
        _valueIO.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIO.setQualified(true);
        if (!_valueIO.isNil())
        args.append(_valueIO);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSecurity_nil) {
        KDSoapValue _valueSecurity(d_ptr->mSecurity.serialize(QString::fromLatin1("Security")));// elementargumentserializer.cpp:102
        _valueSecurity.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueSecurity.setQualified(true);
        if (!_valueSecurity.isNil())
        args.append(_valueSecurity);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__DeviceCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Network")) {// converter_complextype.cpp:354
            d_ptr->mNetwork.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("System")) {// converter_complextype.cpp:354
            d_ptr->mSystem.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("IO")) {// converter_complextype.cpp:354
            d_ptr->mIO.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Security")) {// converter_complextype.cpp:354
            d_ptr->mSecurity.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__DeviceCapabilities::TT__DeviceCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DeviceCapabilities::~TT__DeviceCapabilities()
{
}

dm::TT__DeviceCapabilities::TT__DeviceCapabilities( const dm::TT__DeviceCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__DeviceCapabilities&  dm::TT__DeviceCapabilities::operator=( const dm::TT__DeviceCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NTPInformation::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mFromDHCP;
    QList< dm::TT__NetworkHost > mNTPFromDHCP;
    bool mNTPFromDHCP_nil;
    QList< dm::TT__NetworkHost > mNTPManual;
    bool mNTPManual_nil;
    dm::TT__NTPInformationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__NTPInformation::PrivateDPtr::PrivateDPtr()
    : mFromDHCP(false), mNTPFromDHCP_nil(true), mNTPManual_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__NTPInformation::setFromDHCP( bool _fromDHCP )
{
    d_ptr->mFromDHCP = _fromDHCP;
}

bool dm::TT__NTPInformation::fromDHCP() const
{
    return d_ptr->mFromDHCP;
}

void dm::TT__NTPInformation::setNTPFromDHCP( const QList< dm::TT__NetworkHost >& _nTPFromDHCP )
{
    d_ptr->mNTPFromDHCP_nil = false;// converter_complextype.cpp:277
    d_ptr->mNTPFromDHCP = _nTPFromDHCP;
}

QList< dm::TT__NetworkHost > dm::TT__NTPInformation::nTPFromDHCP() const
{
    return d_ptr->mNTPFromDHCP;
}

void dm::TT__NTPInformation::setNTPManual( const QList< dm::TT__NetworkHost >& _nTPManual )
{
    d_ptr->mNTPManual_nil = false;// converter_complextype.cpp:277
    d_ptr->mNTPManual = _nTPManual;
}

QList< dm::TT__NetworkHost > dm::TT__NTPInformation::nTPManual() const
{
    return d_ptr->mNTPManual;
}

void dm::TT__NTPInformation::setExtension( const dm::TT__NTPInformationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__NTPInformationExtension dm::TT__NTPInformation::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__NTPInformation::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__NTPInformation::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__NTPInformation::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NTPInformation"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueFromDHCP(QString::fromLatin1("FromDHCP"), QVariant::fromValue(d_ptr->mFromDHCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueFromDHCP.setQualified(true);
    args.append(_valueFromDHCP);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mNTPFromDHCP.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueNTPFromDHCP(d_ptr->mNTPFromDHCP.at(i).serialize(QString::fromLatin1("NTPFromDHCP")));// elementargumentserializer.cpp:102
        _valueNTPFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueNTPFromDHCP.setQualified(true);
        args.append(_valueNTPFromDHCP);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mNTPManual.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueNTPManual(d_ptr->mNTPManual.at(i).serialize(QString::fromLatin1("NTPManual")));// elementargumentserializer.cpp:102
        _valueNTPManual.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueNTPManual.setQualified(true);
        args.append(_valueNTPManual);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__NTPInformation::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("FromDHCP")) {// converter_complextype.cpp:354
            d_ptr->mFromDHCP = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("NTPFromDHCP")) {// converter_complextype.cpp:354
            dm::TT__NetworkHost mNTPFromDHCPTemp;// converter_complextype.cpp:412
            mNTPFromDHCPTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mNTPFromDHCP.append(mNTPFromDHCPTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("NTPManual")) {// converter_complextype.cpp:354
            dm::TT__NetworkHost mNTPManualTemp;// converter_complextype.cpp:412
            mNTPManualTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mNTPManual.append(mNTPManualTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__NTPInformation::TT__NTPInformation()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NTPInformation::~TT__NTPInformation()
{
}

dm::TT__NTPInformation::TT__NTPInformation( const dm::TT__NTPInformation& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NTPInformation&  dm::TT__NTPInformation::operator=( const dm::TT__NTPInformation& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetNetworkInterfaces::PrivateDPtr : public QSharedData
{
public:
    dm::TT__ReferenceToken mInterfaceToken;
    dm::TT__NetworkInterfaceSetConfiguration mNetworkInterface;
};

void dm::TDS__SetNetworkInterfaces::setInterfaceToken( const dm::TT__ReferenceToken& _interfaceToken )
{
    d_ptr->mInterfaceToken = _interfaceToken;
}

dm::TT__ReferenceToken dm::TDS__SetNetworkInterfaces::interfaceToken() const
{
    return d_ptr->mInterfaceToken;
}

void dm::TDS__SetNetworkInterfaces::setNetworkInterface( const dm::TT__NetworkInterfaceSetConfiguration& _networkInterface )
{
    d_ptr->mNetworkInterface = _networkInterface;
}

dm::TT__NetworkInterfaceSetConfiguration dm::TDS__SetNetworkInterfaces::networkInterface() const
{
    return d_ptr->mNetworkInterface;
}

KDSoapValue dm::TDS__SetNetworkInterfaces::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetNetworkInterfaces"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueInterfaceToken(QString::fromLatin1("InterfaceToken"), d_ptr->mInterfaceToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueInterfaceToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueInterfaceToken.setQualified(true);
    args.append(_valueInterfaceToken);// elementargumentserializer.cpp:122
    KDSoapValue _valueNetworkInterface(d_ptr->mNetworkInterface.serialize(QString::fromLatin1("NetworkInterface")));// elementargumentserializer.cpp:102
    _valueNetworkInterface.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueNetworkInterface.setQualified(true);
    args.append(_valueNetworkInterface);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetNetworkInterfaces::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("InterfaceToken")) {// converter_complextype.cpp:354
            d_ptr->mInterfaceToken.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("NetworkInterface")) {// converter_complextype.cpp:354
            d_ptr->mNetworkInterface.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__SetNetworkInterfaces::TDS__SetNetworkInterfaces()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetNetworkInterfaces::~TDS__SetNetworkInterfaces()
{
}

dm::TDS__SetNetworkInterfaces::TDS__SetNetworkInterfaces( const dm::TDS__SetNetworkInterfaces& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetNetworkInterfaces&  dm::TDS__SetNetworkInterfaces::operator=( const dm::TDS__SetNetworkInterfaces& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SendAuxiliaryCommandResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__AuxiliaryData mAuxiliaryCommandResponse;
    bool mAuxiliaryCommandResponse_nil;
};

dm::TDS__SendAuxiliaryCommandResponse::PrivateDPtr::PrivateDPtr()
    : mAuxiliaryCommandResponse_nil(true)
{
}


void dm::TDS__SendAuxiliaryCommandResponse::setAuxiliaryCommandResponse( const dm::TT__AuxiliaryData& _auxiliaryCommandResponse )
{
    d_ptr->mAuxiliaryCommandResponse_nil = false;// converter_complextype.cpp:277
    d_ptr->mAuxiliaryCommandResponse = _auxiliaryCommandResponse;
}

dm::TT__AuxiliaryData dm::TDS__SendAuxiliaryCommandResponse::auxiliaryCommandResponse() const
{
    return d_ptr->mAuxiliaryCommandResponse;
}

KDSoapValue dm::TDS__SendAuxiliaryCommandResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SendAuxiliaryCommandResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mAuxiliaryCommandResponse_nil) {
        KDSoapValue _valueAuxiliaryCommandResponse(QString::fromLatin1("AuxiliaryCommandResponse"), d_ptr->mAuxiliaryCommandResponse.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("AuxiliaryData"));// elementargumentserializer.cpp:110
        _valueAuxiliaryCommandResponse.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueAuxiliaryCommandResponse.setQualified(true);
        if (!_valueAuxiliaryCommandResponse.isNil())
        args.append(_valueAuxiliaryCommandResponse);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__SendAuxiliaryCommandResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("AuxiliaryCommandResponse")) {// converter_complextype.cpp:354
            d_ptr->mAuxiliaryCommandResponse.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mAuxiliaryCommandResponse_nil = false;// converter_complextype.cpp:375
        }
    }
}

dm::TDS__SendAuxiliaryCommandResponse::TDS__SendAuxiliaryCommandResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SendAuxiliaryCommandResponse::~TDS__SendAuxiliaryCommandResponse()
{
}

dm::TDS__SendAuxiliaryCommandResponse::TDS__SendAuxiliaryCommandResponse( const dm::TDS__SendAuxiliaryCommandResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SendAuxiliaryCommandResponse&  dm::TDS__SendAuxiliaryCommandResponse::operator=( const dm::TDS__SendAuxiliaryCommandResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__OSDReference::PrivateDPtr : public QSharedData
{
public:
    dm::TT__ReferenceToken mValue;
};

void dm::TT__OSDReference::setValue( const dm::TT__ReferenceToken& _value )
{
    d_ptr->mValue = _value;
}

dm::TT__ReferenceToken dm::TT__OSDReference::value() const
{
    return d_ptr->mValue;
}

dm::TT__OSDReference::TT__OSDReference( const dm::TT__ReferenceToken& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

dm::TT__OSDReference::operator dm::TT__ReferenceToken() const
{
    return d_ptr->mValue;
}

KDSoapValue dm::TT__OSDReference::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, d_ptr->mValue.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("OSDReference"));// converter_complextype.cpp:466
    return mainValue;
}

void dm::TT__OSDReference::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue.deserialize(mainValue.value());// converter_complextype.cpp:373
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TT__OSDReference::TT__OSDReference()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__OSDReference::~TT__OSDReference()
{
}

dm::TT__OSDReference::TT__OSDReference( const dm::TT__OSDReference& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__OSDReference&  dm::TT__OSDReference::operator=( const dm::TT__OSDReference& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetRemoteUser::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetRemoteUser"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetRemoteUser::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetRemoteUser::TDS__GetRemoteUser()
{
}

dm::TDS__GetRemoteUser::~TDS__GetRemoteUser()
{
}


class dm::TDS__DeviceServiceCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TDS__NetworkCapabilities mNetwork;
    dm::TDS__SecurityCapabilities mSecurity;
    dm::TDS__SystemCapabilities mSystem;
    dm::TDS__MiscCapabilities mMisc;
    bool mMisc_nil;
};

dm::TDS__DeviceServiceCapabilities::PrivateDPtr::PrivateDPtr()
    : mMisc_nil(true)
{
}


void dm::TDS__DeviceServiceCapabilities::setNetwork( const dm::TDS__NetworkCapabilities& _network )
{
    d_ptr->mNetwork = _network;
}

dm::TDS__NetworkCapabilities dm::TDS__DeviceServiceCapabilities::network() const
{
    return d_ptr->mNetwork;
}

void dm::TDS__DeviceServiceCapabilities::setSecurity( const dm::TDS__SecurityCapabilities& _security )
{
    d_ptr->mSecurity = _security;
}

dm::TDS__SecurityCapabilities dm::TDS__DeviceServiceCapabilities::security() const
{
    return d_ptr->mSecurity;
}

void dm::TDS__DeviceServiceCapabilities::setSystem( const dm::TDS__SystemCapabilities& _system )
{
    d_ptr->mSystem = _system;
}

dm::TDS__SystemCapabilities dm::TDS__DeviceServiceCapabilities::system() const
{
    return d_ptr->mSystem;
}

void dm::TDS__DeviceServiceCapabilities::setMisc( const dm::TDS__MiscCapabilities& _misc )
{
    d_ptr->mMisc_nil = false;// converter_complextype.cpp:277
    d_ptr->mMisc = _misc;
}

dm::TDS__MiscCapabilities dm::TDS__DeviceServiceCapabilities::misc() const
{
    return d_ptr->mMisc;
}

KDSoapValue dm::TDS__DeviceServiceCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("DeviceServiceCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueNetwork(d_ptr->mNetwork.serialize(QString::fromLatin1("Network")));// elementargumentserializer.cpp:102
    _valueNetwork.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueNetwork.setQualified(true);
    args.append(_valueNetwork);// elementargumentserializer.cpp:122
    KDSoapValue _valueSecurity(d_ptr->mSecurity.serialize(QString::fromLatin1("Security")));// elementargumentserializer.cpp:102
    _valueSecurity.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSecurity.setQualified(true);
    args.append(_valueSecurity);// elementargumentserializer.cpp:122
    KDSoapValue _valueSystem(d_ptr->mSystem.serialize(QString::fromLatin1("System")));// elementargumentserializer.cpp:102
    _valueSystem.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSystem.setQualified(true);
    args.append(_valueSystem);// elementargumentserializer.cpp:122
    if (!d_ptr->mMisc_nil) {
        KDSoapValue _valueMisc(d_ptr->mMisc.serialize(QString::fromLatin1("Misc")));// elementargumentserializer.cpp:102
        _valueMisc.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueMisc.setQualified(true);
        if (!_valueMisc.isNil())
        args.append(_valueMisc);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__DeviceServiceCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Network")) {// converter_complextype.cpp:354
            d_ptr->mNetwork.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Security")) {// converter_complextype.cpp:354
            d_ptr->mSecurity.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("System")) {// converter_complextype.cpp:354
            d_ptr->mSystem.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Misc")) {// converter_complextype.cpp:354
            d_ptr->mMisc.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__DeviceServiceCapabilities::TDS__DeviceServiceCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__DeviceServiceCapabilities::~TDS__DeviceServiceCapabilities()
{
}

dm::TDS__DeviceServiceCapabilities::TDS__DeviceServiceCapabilities( const dm::TDS__DeviceServiceCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__DeviceServiceCapabilities&  dm::TDS__DeviceServiceCapabilities::operator=( const dm::TDS__DeviceServiceCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__OSDPosConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mType;
    dm::TT__Vector mPos;
    bool mPos_nil;
    dm::TT__OSDPosConfigurationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__OSDPosConfiguration::PrivateDPtr::PrivateDPtr()
    : mPos_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__OSDPosConfiguration::setType( const QString& _type )
{
    d_ptr->mType = _type;
}

QString dm::TT__OSDPosConfiguration::type() const
{
    return d_ptr->mType;
}

void dm::TT__OSDPosConfiguration::setPos( const dm::TT__Vector& _pos )
{
    d_ptr->mPos_nil = false;// converter_complextype.cpp:277
    d_ptr->mPos = _pos;
}

dm::TT__Vector dm::TT__OSDPosConfiguration::pos() const
{
    return d_ptr->mPos;
}

void dm::TT__OSDPosConfiguration::setExtension( const dm::TT__OSDPosConfigurationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__OSDPosConfigurationExtension dm::TT__OSDPosConfiguration::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__OSDPosConfiguration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__OSDPosConfiguration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__OSDPosConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("OSDPosConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueType(QString::fromLatin1("Type"), QVariant::fromValue(d_ptr->mType), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueType.setQualified(true);
    args.append(_valueType);// elementargumentserializer.cpp:122
    if (!d_ptr->mPos_nil) {
        KDSoapValue _valuePos(d_ptr->mPos.serialize(QString::fromLatin1("Pos")));// elementargumentserializer.cpp:102
        _valuePos.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePos.setQualified(true);
        if (!_valuePos.isNil())
        args.append(_valuePos);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__OSDPosConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Type")) {// converter_complextype.cpp:354
            d_ptr->mType = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Pos")) {// converter_complextype.cpp:354
            d_ptr->mPos.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__OSDPosConfiguration::TT__OSDPosConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__OSDPosConfiguration::~TT__OSDPosConfiguration()
{
}

dm::TT__OSDPosConfiguration::TT__OSDPosConfiguration( const dm::TT__OSDPosConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__OSDPosConfiguration&  dm::TT__OSDPosConfiguration::operator=( const dm::TT__OSDPosConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetHostname::PrivateDPtr : public QSharedData
{
public:
    QString mName;
};

void dm::TDS__SetHostname::setName( const QString& _name )
{
    d_ptr->mName = _name;
}

QString dm::TDS__SetHostname::name() const
{
    return d_ptr->mName;
}

KDSoapValue dm::TDS__SetHostname::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetHostname"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
    _valueName.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueName.setQualified(true);
    args.append(_valueName);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetHostname::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Name")) {// converter_complextype.cpp:354
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__SetHostname::TDS__SetHostname()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetHostname::~TDS__SetHostname()
{
}

dm::TDS__SetHostname::TDS__SetHostname( const dm::TDS__SetHostname& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetHostname&  dm::TDS__SetHostname::operator=( const dm::TDS__SetHostname& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__UpgradeSystemFirmwareResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mMessage;
    bool mMessage_nil;
};

dm::TDS__UpgradeSystemFirmwareResponse::PrivateDPtr::PrivateDPtr()
    : mMessage_nil(true)
{
}


void dm::TDS__UpgradeSystemFirmwareResponse::setMessage( const QString& _message )
{
    d_ptr->mMessage_nil = false;// converter_complextype.cpp:277
    d_ptr->mMessage = _message;
}

QString dm::TDS__UpgradeSystemFirmwareResponse::message() const
{
    return d_ptr->mMessage;
}

KDSoapValue dm::TDS__UpgradeSystemFirmwareResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("UpgradeSystemFirmwareResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mMessage_nil) {
        KDSoapValue _valueMessage(QString::fromLatin1("Message"), QVariant::fromValue(d_ptr->mMessage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueMessage.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueMessage.setQualified(true);
        if (!_valueMessage.isNil())
        args.append(_valueMessage);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__UpgradeSystemFirmwareResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Message")) {// converter_complextype.cpp:354
            d_ptr->mMessage = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mMessage_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TDS__UpgradeSystemFirmwareResponse::TDS__UpgradeSystemFirmwareResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__UpgradeSystemFirmwareResponse::~TDS__UpgradeSystemFirmwareResponse()
{
}

dm::TDS__UpgradeSystemFirmwareResponse::TDS__UpgradeSystemFirmwareResponse( const dm::TDS__UpgradeSystemFirmwareResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__UpgradeSystemFirmwareResponse&  dm::TDS__UpgradeSystemFirmwareResponse::operator=( const dm::TDS__UpgradeSystemFirmwareResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetDNS::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDNS"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetDNS::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetDNS::TDS__GetDNS()
{
}

dm::TDS__GetDNS::~TDS__GetDNS()
{
}


class dm::TT__MediaCapabilitiesExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__ProfileCapabilities mProfileCapabilities;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__MediaCapabilitiesExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__MediaCapabilitiesExtension::setProfileCapabilities( const dm::TT__ProfileCapabilities& _profileCapabilities )
{
    d_ptr->mProfileCapabilities = _profileCapabilities;
}

dm::TT__ProfileCapabilities dm::TT__MediaCapabilitiesExtension::profileCapabilities() const
{
    return d_ptr->mProfileCapabilities;
}

void dm::TT__MediaCapabilitiesExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__MediaCapabilitiesExtension::any() const
{
    return d_ptr->mAny;
}

void dm::TT__MediaCapabilitiesExtension::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__MediaCapabilitiesExtension::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__MediaCapabilitiesExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("MediaCapabilitiesExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueProfileCapabilities(d_ptr->mProfileCapabilities.serialize(QString::fromLatin1("ProfileCapabilities")));// elementargumentserializer.cpp:102
    _valueProfileCapabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueProfileCapabilities.setQualified(true);
    args.append(_valueProfileCapabilities);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__MediaCapabilitiesExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ProfileCapabilities")) {// converter_complextype.cpp:354
            d_ptr->mProfileCapabilities.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__MediaCapabilitiesExtension::TT__MediaCapabilitiesExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__MediaCapabilitiesExtension::~TT__MediaCapabilitiesExtension()
{
}

dm::TT__MediaCapabilitiesExtension::TT__MediaCapabilitiesExtension( const dm::TT__MediaCapabilitiesExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__MediaCapabilitiesExtension&  dm::TT__MediaCapabilitiesExtension::operator=( const dm::TT__MediaCapabilitiesExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__Capabilities::PrivateDPtr : public QSharedData
{
public:
    KDSoapValue mAny;
};

void dm::TDS__Capabilities::setAny( const KDSoapValue& _any )
{
    d_ptr->mAny = _any;
}

KDSoapValue dm::TDS__Capabilities::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TDS__Capabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("Capabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    if (!d_ptr->mAny.isNull()) {
        args.append(d_ptr->mAny);// elementargumentserializer.cpp:82
    }
    return mainValue;
}

void dm::TDS__Capabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny = val;// converter_complextype.cpp:365
        }
    }
}

dm::TDS__Capabilities::TDS__Capabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__Capabilities::~TDS__Capabilities()
{
}

dm::TDS__Capabilities::TDS__Capabilities( const dm::TDS__Capabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__Capabilities&  dm::TDS__Capabilities::operator=( const dm::TDS__Capabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Layout::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__PaneLayout > mPaneLayout;
    dm::TT__LayoutExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__Layout::PrivateDPtr::PrivateDPtr()
    : mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__Layout::setPaneLayout( const QList< dm::TT__PaneLayout >& _paneLayout )
{
    d_ptr->mPaneLayout = _paneLayout;
}

QList< dm::TT__PaneLayout > dm::TT__Layout::paneLayout() const
{
    return d_ptr->mPaneLayout;
}

void dm::TT__Layout::setExtension( const dm::TT__LayoutExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__LayoutExtension dm::TT__Layout::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__Layout::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__Layout::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__Layout::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Layout"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mPaneLayout.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valuePaneLayout(d_ptr->mPaneLayout.at(i).serialize(QString::fromLatin1("PaneLayout")));// elementargumentserializer.cpp:102
        _valuePaneLayout.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePaneLayout.setQualified(true);
        args.append(_valuePaneLayout);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Layout::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("PaneLayout")) {// converter_complextype.cpp:354
            dm::TT__PaneLayout mPaneLayoutTemp;// converter_complextype.cpp:412
            mPaneLayoutTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mPaneLayout.append(mPaneLayoutTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__Layout::TT__Layout()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Layout::~TT__Layout()
{
}

dm::TT__Layout::TT__Layout( const dm::TT__Layout& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Layout&  dm::TT__Layout::operator=( const dm::TT__Layout& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__RemoteUser::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mUsername;
    QString mPassword;
    bool mPassword_nil;
    bool mUseDerivedPassword;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__RemoteUser::PrivateDPtr::PrivateDPtr()
    : mPassword_nil(true), mUseDerivedPassword(false), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__RemoteUser::setUsername( const QString& _username )
{
    d_ptr->mUsername = _username;
}

QString dm::TT__RemoteUser::username() const
{
    return d_ptr->mUsername;
}

void dm::TT__RemoteUser::setPassword( const QString& _password )
{
    d_ptr->mPassword_nil = false;// converter_complextype.cpp:277
    d_ptr->mPassword = _password;
}

QString dm::TT__RemoteUser::password() const
{
    return d_ptr->mPassword;
}

void dm::TT__RemoteUser::setUseDerivedPassword( bool _useDerivedPassword )
{
    d_ptr->mUseDerivedPassword = _useDerivedPassword;
}

bool dm::TT__RemoteUser::useDerivedPassword() const
{
    return d_ptr->mUseDerivedPassword;
}

void dm::TT__RemoteUser::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__RemoteUser::any() const
{
    return d_ptr->mAny;
}

void dm::TT__RemoteUser::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__RemoteUser::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__RemoteUser::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("RemoteUser"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueUsername(QString::fromLatin1("Username"), QVariant::fromValue(d_ptr->mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueUsername.setQualified(true);
    args.append(_valueUsername);// elementargumentserializer.cpp:122
    if (!d_ptr->mPassword_nil) {
        KDSoapValue _valuePassword(QString::fromLatin1("Password"), QVariant::fromValue(d_ptr->mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valuePassword.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePassword.setQualified(true);
        if (!_valuePassword.isNil())
        args.append(_valuePassword);// elementargumentserializer.cpp:122
    }
    KDSoapValue _valueUseDerivedPassword(QString::fromLatin1("UseDerivedPassword"), QVariant::fromValue(d_ptr->mUseDerivedPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueUseDerivedPassword.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueUseDerivedPassword.setQualified(true);
    args.append(_valueUseDerivedPassword);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__RemoteUser::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Username")) {// converter_complextype.cpp:354
            d_ptr->mUsername = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Password")) {// converter_complextype.cpp:354
            d_ptr->mPassword = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mPassword_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("UseDerivedPassword")) {// converter_complextype.cpp:354
            d_ptr->mUseDerivedPassword = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__RemoteUser::TT__RemoteUser()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__RemoteUser::~TT__RemoteUser()
{
}

dm::TT__RemoteUser::TT__RemoteUser( const dm::TT__RemoteUser& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__RemoteUser&  dm::TT__RemoteUser::operator=( const dm::TT__RemoteUser& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SendAuxiliaryCommand::PrivateDPtr : public QSharedData
{
public:
    dm::TT__AuxiliaryData mAuxiliaryCommand;
};

void dm::TDS__SendAuxiliaryCommand::setAuxiliaryCommand( const dm::TT__AuxiliaryData& _auxiliaryCommand )
{
    d_ptr->mAuxiliaryCommand = _auxiliaryCommand;
}

dm::TT__AuxiliaryData dm::TDS__SendAuxiliaryCommand::auxiliaryCommand() const
{
    return d_ptr->mAuxiliaryCommand;
}

KDSoapValue dm::TDS__SendAuxiliaryCommand::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SendAuxiliaryCommand"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueAuxiliaryCommand(QString::fromLatin1("AuxiliaryCommand"), d_ptr->mAuxiliaryCommand.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("AuxiliaryData"));// elementargumentserializer.cpp:110
    _valueAuxiliaryCommand.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueAuxiliaryCommand.setQualified(true);
    args.append(_valueAuxiliaryCommand);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SendAuxiliaryCommand::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("AuxiliaryCommand")) {// converter_complextype.cpp:354
            d_ptr->mAuxiliaryCommand.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__SendAuxiliaryCommand::TDS__SendAuxiliaryCommand()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SendAuxiliaryCommand::~TDS__SendAuxiliaryCommand()
{
}

dm::TDS__SendAuxiliaryCommand::TDS__SendAuxiliaryCommand( const dm::TDS__SendAuxiliaryCommand& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SendAuxiliaryCommand&  dm::TDS__SendAuxiliaryCommand::operator=( const dm::TDS__SendAuxiliaryCommand& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Dot11PSKSetExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__Dot11PSKSetExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__Dot11PSKSetExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__Dot11PSKSetExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__Dot11PSKSetExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11PSKSetExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__Dot11PSKSetExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__Dot11PSKSetExtension::TT__Dot11PSKSetExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Dot11PSKSetExtension::~TT__Dot11PSKSetExtension()
{
}

dm::TT__Dot11PSKSetExtension::TT__Dot11PSKSetExtension( const dm::TT__Dot11PSKSetExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Dot11PSKSetExtension&  dm::TT__Dot11PSKSetExtension::operator=( const dm::TT__Dot11PSKSetExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetStorageConfigurationsResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TDS__StorageConfiguration > mStorageConfigurations;
    bool mStorageConfigurations_nil;
};

dm::TDS__GetStorageConfigurationsResponse::PrivateDPtr::PrivateDPtr()
    : mStorageConfigurations_nil(true)
{
}


void dm::TDS__GetStorageConfigurationsResponse::setStorageConfigurations( const QList< dm::TDS__StorageConfiguration >& _storageConfigurations )
{
    d_ptr->mStorageConfigurations_nil = false;// converter_complextype.cpp:277
    d_ptr->mStorageConfigurations = _storageConfigurations;
}

QList< dm::TDS__StorageConfiguration > dm::TDS__GetStorageConfigurationsResponse::storageConfigurations() const
{
    return d_ptr->mStorageConfigurations;
}

KDSoapValue dm::TDS__GetStorageConfigurationsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetStorageConfigurationsResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mStorageConfigurations.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueStorageConfigurations(d_ptr->mStorageConfigurations.at(i).serialize(QString::fromLatin1("StorageConfigurations")));// elementargumentserializer.cpp:102
        _valueStorageConfigurations.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueStorageConfigurations.setQualified(true);
        args.append(_valueStorageConfigurations);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetStorageConfigurationsResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("StorageConfigurations")) {// converter_complextype.cpp:354
            dm::TDS__StorageConfiguration mStorageConfigurationsTemp;// converter_complextype.cpp:412
            mStorageConfigurationsTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mStorageConfigurations.append(mStorageConfigurationsTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetStorageConfigurationsResponse::TDS__GetStorageConfigurationsResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetStorageConfigurationsResponse::~TDS__GetStorageConfigurationsResponse()
{
}

dm::TDS__GetStorageConfigurationsResponse::TDS__GetStorageConfigurationsResponse( const dm::TDS__GetStorageConfigurationsResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetStorageConfigurationsResponse&  dm::TDS__GetStorageConfigurationsResponse::operator=( const dm::TDS__GetStorageConfigurationsResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkInterfaceSetConfigurationExtension2::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__NetworkInterfaceSetConfigurationExtension2::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__NetworkInterfaceSetConfigurationExtension2::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__NetworkInterfaceSetConfigurationExtension2::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__NetworkInterfaceSetConfigurationExtension2::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkInterfaceSetConfigurationExtension2"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__NetworkInterfaceSetConfigurationExtension2::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__NetworkInterfaceSetConfigurationExtension2::TT__NetworkInterfaceSetConfigurationExtension2()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkInterfaceSetConfigurationExtension2::~TT__NetworkInterfaceSetConfigurationExtension2()
{
}

dm::TT__NetworkInterfaceSetConfigurationExtension2::TT__NetworkInterfaceSetConfigurationExtension2( const dm::TT__NetworkInterfaceSetConfigurationExtension2& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkInterfaceSetConfigurationExtension2&  dm::TT__NetworkInterfaceSetConfigurationExtension2::operator=( const dm::TT__NetworkInterfaceSetConfigurationExtension2& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__SystemCapabilitiesExtension2::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__SystemCapabilitiesExtension2::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__SystemCapabilitiesExtension2::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__SystemCapabilitiesExtension2::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__SystemCapabilitiesExtension2::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SystemCapabilitiesExtension2"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__SystemCapabilitiesExtension2::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__SystemCapabilitiesExtension2::TT__SystemCapabilitiesExtension2()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SystemCapabilitiesExtension2::~TT__SystemCapabilitiesExtension2()
{
}

dm::TT__SystemCapabilitiesExtension2::TT__SystemCapabilitiesExtension2( const dm::TT__SystemCapabilitiesExtension2& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SystemCapabilitiesExtension2&  dm::TT__SystemCapabilitiesExtension2::operator=( const dm::TT__SystemCapabilitiesExtension2& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__VideoSourceExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__ImagingSettings20 mImaging;
    bool mImaging_nil;
    dm::TT__VideoSourceExtension2 mExtension;
    bool mExtension_nil;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__VideoSourceExtension::PrivateDPtr::PrivateDPtr()
    : mImaging_nil(true), mExtension_nil(true), mAny_nil(true)
{
}


void dm::TT__VideoSourceExtension::setImaging( const dm::TT__ImagingSettings20& _imaging )
{
    d_ptr->mImaging_nil = false;// converter_complextype.cpp:277
    d_ptr->mImaging = _imaging;
}

dm::TT__ImagingSettings20 dm::TT__VideoSourceExtension::imaging() const
{
    return d_ptr->mImaging;
}

void dm::TT__VideoSourceExtension::setExtension( const dm::TT__VideoSourceExtension2& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__VideoSourceExtension2 dm::TT__VideoSourceExtension::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__VideoSourceExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__VideoSourceExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__VideoSourceExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("VideoSourceExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mImaging_nil) {
        KDSoapValue _valueImaging(d_ptr->mImaging.serialize(QString::fromLatin1("Imaging")));// elementargumentserializer.cpp:102
        _valueImaging.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueImaging.setQualified(true);
        if (!_valueImaging.isNil())
        args.append(_valueImaging);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__VideoSourceExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Imaging")) {// converter_complextype.cpp:354
            d_ptr->mImaging.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__VideoSourceExtension::TT__VideoSourceExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__VideoSourceExtension::~TT__VideoSourceExtension()
{
}

dm::TT__VideoSourceExtension::TT__VideoSourceExtension( const dm::TT__VideoSourceExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__VideoSourceExtension&  dm::TT__VideoSourceExtension::operator=( const dm::TT__VideoSourceExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__CertificateInformationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__CertificateInformationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__CertificateInformationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__CertificateInformationExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__CertificateInformationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("CertificateInformationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__CertificateInformationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__CertificateInformationExtension::TT__CertificateInformationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__CertificateInformationExtension::~TT__CertificateInformationExtension()
{
}

dm::TT__CertificateInformationExtension::TT__CertificateInformationExtension( const dm::TT__CertificateInformationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__CertificateInformationExtension&  dm::TT__CertificateInformationExtension::operator=( const dm::TT__CertificateInformationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__DeleteCertificates::PrivateDPtr : public QSharedData
{
public:
    QStringList mCertificateID;
};

void dm::TDS__DeleteCertificates::setCertificateID( const QStringList& _certificateID )
{
    d_ptr->mCertificateID = _certificateID;
}

QStringList dm::TDS__DeleteCertificates::certificateID() const
{
    return d_ptr->mCertificateID;
}

KDSoapValue dm::TDS__DeleteCertificates::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("DeleteCertificates"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mCertificateID.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueCertificateID(QString::fromLatin1("CertificateID"), QVariant::fromValue(d_ptr->mCertificateID.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
        _valueCertificateID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueCertificateID.setQualified(true);
        args.append(_valueCertificateID);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__DeleteCertificates::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateID")) {// converter_complextype.cpp:354
            QString mCertificateIDTemp;// converter_complextype.cpp:412
            mCertificateIDTemp = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mCertificateID.append(mCertificateIDTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__DeleteCertificates::TDS__DeleteCertificates()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__DeleteCertificates::~TDS__DeleteCertificates()
{
}

dm::TDS__DeleteCertificates::TDS__DeleteCertificates( const dm::TDS__DeleteCertificates& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__DeleteCertificates&  dm::TDS__DeleteCertificates::operator=( const dm::TDS__DeleteCertificates& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetServices::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mIncludeCapability;
};

dm::TDS__GetServices::PrivateDPtr::PrivateDPtr()
    : mIncludeCapability(false)
{
}


void dm::TDS__GetServices::setIncludeCapability( bool _includeCapability )
{
    d_ptr->mIncludeCapability = _includeCapability;
}

bool dm::TDS__GetServices::includeCapability() const
{
    return d_ptr->mIncludeCapability;
}

KDSoapValue dm::TDS__GetServices::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetServices"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueIncludeCapability(QString::fromLatin1("IncludeCapability"), QVariant::fromValue(d_ptr->mIncludeCapability), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueIncludeCapability.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueIncludeCapability.setQualified(true);
    args.append(_valueIncludeCapability);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetServices::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("IncludeCapability")) {// converter_complextype.cpp:354
            d_ptr->mIncludeCapability = val.value().value<bool>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__GetServices::TDS__GetServices()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetServices::~TDS__GetServices()
{
}

dm::TDS__GetServices::TDS__GetServices( const dm::TDS__GetServices& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetServices&  dm::TDS__GetServices::operator=( const dm::TDS__GetServices& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetNetworkDefaultGateway::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__IPv4Address > mIPv4Address;
    bool mIPv4Address_nil;
    QList< dm::TT__IPv6Address > mIPv6Address;
    bool mIPv6Address_nil;
};

dm::TDS__SetNetworkDefaultGateway::PrivateDPtr::PrivateDPtr()
    : mIPv4Address_nil(true), mIPv6Address_nil(true)
{
}


void dm::TDS__SetNetworkDefaultGateway::setIPv4Address( const QList< dm::TT__IPv4Address >& _iPv4Address )
{
    d_ptr->mIPv4Address_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv4Address = _iPv4Address;
}

QList< dm::TT__IPv4Address > dm::TDS__SetNetworkDefaultGateway::iPv4Address() const
{
    return d_ptr->mIPv4Address;
}

void dm::TDS__SetNetworkDefaultGateway::setIPv6Address( const QList< dm::TT__IPv6Address >& _iPv6Address )
{
    d_ptr->mIPv6Address_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv6Address = _iPv6Address;
}

QList< dm::TT__IPv6Address > dm::TDS__SetNetworkDefaultGateway::iPv6Address() const
{
    return d_ptr->mIPv6Address;
}

KDSoapValue dm::TDS__SetNetworkDefaultGateway::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetNetworkDefaultGateway"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mIPv4Address.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueIPv4Address(QString::fromLatin1("IPv4Address"), d_ptr->mIPv4Address.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv4Address"));// elementargumentserializer.cpp:110
        _valueIPv4Address.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueIPv4Address.setQualified(true);
        args.append(_valueIPv4Address);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mIPv6Address.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueIPv6Address(QString::fromLatin1("IPv6Address"), d_ptr->mIPv6Address.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv6Address"));// elementargumentserializer.cpp:110
        _valueIPv6Address.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueIPv6Address.setQualified(true);
        args.append(_valueIPv6Address);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__SetNetworkDefaultGateway::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("IPv4Address")) {// converter_complextype.cpp:354
            dm::TT__IPv4Address mIPv4AddressTemp;// converter_complextype.cpp:412
            mIPv4AddressTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mIPv4Address.append(mIPv4AddressTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("IPv6Address")) {// converter_complextype.cpp:354
            dm::TT__IPv6Address mIPv6AddressTemp;// converter_complextype.cpp:412
            mIPv6AddressTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mIPv6Address.append(mIPv6AddressTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__SetNetworkDefaultGateway::TDS__SetNetworkDefaultGateway()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetNetworkDefaultGateway::~TDS__SetNetworkDefaultGateway()
{
}

dm::TDS__SetNetworkDefaultGateway::TDS__SetNetworkDefaultGateway( const dm::TDS__SetNetworkDefaultGateway& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetNetworkDefaultGateway&  dm::TDS__SetNetworkDefaultGateway::operator=( const dm::TDS__SetNetworkDefaultGateway& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetRelayOutputSettings::PrivateDPtr : public QSharedData
{
public:
    dm::TT__ReferenceToken mRelayOutputToken;
    dm::TT__RelayOutputSettings mProperties;
};

void dm::TDS__SetRelayOutputSettings::setRelayOutputToken( const dm::TT__ReferenceToken& _relayOutputToken )
{
    d_ptr->mRelayOutputToken = _relayOutputToken;
}

dm::TT__ReferenceToken dm::TDS__SetRelayOutputSettings::relayOutputToken() const
{
    return d_ptr->mRelayOutputToken;
}

void dm::TDS__SetRelayOutputSettings::setProperties( const dm::TT__RelayOutputSettings& _properties )
{
    d_ptr->mProperties = _properties;
}

dm::TT__RelayOutputSettings dm::TDS__SetRelayOutputSettings::properties() const
{
    return d_ptr->mProperties;
}

KDSoapValue dm::TDS__SetRelayOutputSettings::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetRelayOutputSettings"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueRelayOutputToken(QString::fromLatin1("RelayOutputToken"), d_ptr->mRelayOutputToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueRelayOutputToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRelayOutputToken.setQualified(true);
    args.append(_valueRelayOutputToken);// elementargumentserializer.cpp:122
    KDSoapValue _valueProperties(d_ptr->mProperties.serialize(QString::fromLatin1("Properties")));// elementargumentserializer.cpp:102
    _valueProperties.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueProperties.setQualified(true);
    args.append(_valueProperties);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetRelayOutputSettings::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("RelayOutputToken")) {// converter_complextype.cpp:354
            d_ptr->mRelayOutputToken.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Properties")) {// converter_complextype.cpp:354
            d_ptr->mProperties.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__SetRelayOutputSettings::TDS__SetRelayOutputSettings()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetRelayOutputSettings::~TDS__SetRelayOutputSettings()
{
}

dm::TDS__SetRelayOutputSettings::TDS__SetRelayOutputSettings( const dm::TDS__SetRelayOutputSettings& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetRelayOutputSettings&  dm::TDS__SetRelayOutputSettings::operator=( const dm::TDS__SetRelayOutputSettings& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetSystemUrisResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__SystemLogUriList mSystemLogUris;
    bool mSystemLogUris_nil;
    QString mSupportInfoUri;
    bool mSupportInfoUri_nil;
    QString mSystemBackupUri;
    bool mSystemBackupUri_nil;
    dm::TDS__Extension mExtension;
    bool mExtension_nil;
};

dm::TDS__GetSystemUrisResponse::PrivateDPtr::PrivateDPtr()
    : mSystemLogUris_nil(true), mSupportInfoUri_nil(true), mSystemBackupUri_nil(true), mExtension_nil(true)
{
}


void dm::TDS__GetSystemUrisResponse::setSystemLogUris( const dm::TT__SystemLogUriList& _systemLogUris )
{
    d_ptr->mSystemLogUris_nil = false;// converter_complextype.cpp:277
    d_ptr->mSystemLogUris = _systemLogUris;
}

dm::TT__SystemLogUriList dm::TDS__GetSystemUrisResponse::systemLogUris() const
{
    return d_ptr->mSystemLogUris;
}

void dm::TDS__GetSystemUrisResponse::setSupportInfoUri( const QString& _supportInfoUri )
{
    d_ptr->mSupportInfoUri_nil = false;// converter_complextype.cpp:277
    d_ptr->mSupportInfoUri = _supportInfoUri;
}

QString dm::TDS__GetSystemUrisResponse::supportInfoUri() const
{
    return d_ptr->mSupportInfoUri;
}

void dm::TDS__GetSystemUrisResponse::setSystemBackupUri( const QString& _systemBackupUri )
{
    d_ptr->mSystemBackupUri_nil = false;// converter_complextype.cpp:277
    d_ptr->mSystemBackupUri = _systemBackupUri;
}

QString dm::TDS__GetSystemUrisResponse::systemBackupUri() const
{
    return d_ptr->mSystemBackupUri;
}

void dm::TDS__GetSystemUrisResponse::setExtension( const dm::TDS__Extension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TDS__Extension dm::TDS__GetSystemUrisResponse::extension() const
{
    return d_ptr->mExtension;
}

KDSoapValue dm::TDS__GetSystemUrisResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetSystemUrisResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mSystemLogUris_nil) {
        KDSoapValue _valueSystemLogUris(d_ptr->mSystemLogUris.serialize(QString::fromLatin1("SystemLogUris")));// elementargumentserializer.cpp:102
        _valueSystemLogUris.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueSystemLogUris.setQualified(true);
        if (!_valueSystemLogUris.isNil())
        args.append(_valueSystemLogUris);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSupportInfoUri_nil) {
        KDSoapValue _valueSupportInfoUri(QString::fromLatin1("SupportInfoUri"), QVariant::fromValue(d_ptr->mSupportInfoUri), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
        _valueSupportInfoUri.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueSupportInfoUri.setQualified(true);
        if (!_valueSupportInfoUri.isNil())
        args.append(_valueSupportInfoUri);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSystemBackupUri_nil) {
        KDSoapValue _valueSystemBackupUri(QString::fromLatin1("SystemBackupUri"), QVariant::fromValue(d_ptr->mSystemBackupUri), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
        _valueSystemBackupUri.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueSystemBackupUri.setQualified(true);
        if (!_valueSystemBackupUri.isNil())
        args.append(_valueSystemBackupUri);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetSystemUrisResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("SystemLogUris")) {// converter_complextype.cpp:354
            d_ptr->mSystemLogUris.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("SupportInfoUri")) {// converter_complextype.cpp:354
            d_ptr->mSupportInfoUri = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mSupportInfoUri_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("SystemBackupUri")) {// converter_complextype.cpp:354
            d_ptr->mSystemBackupUri = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mSystemBackupUri_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetSystemUrisResponse::TDS__GetSystemUrisResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetSystemUrisResponse::~TDS__GetSystemUrisResponse()
{
}

dm::TDS__GetSystemUrisResponse::TDS__GetSystemUrisResponse( const dm::TDS__GetSystemUrisResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetSystemUrisResponse&  dm::TDS__GetSystemUrisResponse::operator=( const dm::TDS__GetSystemUrisResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__DateTimeRange::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    KDDateTime mFrom;
    KDDateTime mUntil;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__DateTimeRange::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__DateTimeRange::setFrom( const KDDateTime& _from )
{
    d_ptr->mFrom = _from;
}

KDDateTime dm::TT__DateTimeRange::from() const
{
    return d_ptr->mFrom;
}

void dm::TT__DateTimeRange::setUntil( const KDDateTime& _until )
{
    d_ptr->mUntil = _until;
}

KDDateTime dm::TT__DateTimeRange::until() const
{
    return d_ptr->mUntil;
}

void dm::TT__DateTimeRange::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__DateTimeRange::any() const
{
    return d_ptr->mAny;
}

void dm::TT__DateTimeRange::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__DateTimeRange::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__DateTimeRange::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DateTimeRange"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueFrom(QString::fromLatin1("From"), d_ptr->mFrom.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:108
    _valueFrom.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueFrom.setQualified(true);
    args.append(_valueFrom);// elementargumentserializer.cpp:122
    KDSoapValue _valueUntil(QString::fromLatin1("Until"), d_ptr->mUntil.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:108
    _valueUntil.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueUntil.setQualified(true);
    args.append(_valueUntil);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__DateTimeRange::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("From")) {// converter_complextype.cpp:354
            d_ptr->mFrom = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Until")) {// converter_complextype.cpp:354
            d_ptr->mUntil = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__DateTimeRange::TT__DateTimeRange()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DateTimeRange::~TT__DateTimeRange()
{
}

dm::TT__DateTimeRange::TT__DateTimeRange( const dm::TT__DateTimeRange& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__DateTimeRange&  dm::TT__DateTimeRange::operator=( const dm::TT__DateTimeRange& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetDeviceInformationResponse::PrivateDPtr : public QSharedData
{
public:
    QString mManufacturer;
    QString mModel;
    QString mFirmwareVersion;
    QString mSerialNumber;
    QString mHardwareId;
};

void dm::TDS__GetDeviceInformationResponse::setManufacturer( const QString& _manufacturer )
{
    d_ptr->mManufacturer = _manufacturer;
}

QString dm::TDS__GetDeviceInformationResponse::manufacturer() const
{
    return d_ptr->mManufacturer;
}

void dm::TDS__GetDeviceInformationResponse::setModel( const QString& _model )
{
    d_ptr->mModel = _model;
}

QString dm::TDS__GetDeviceInformationResponse::model() const
{
    return d_ptr->mModel;
}

void dm::TDS__GetDeviceInformationResponse::setFirmwareVersion( const QString& _firmwareVersion )
{
    d_ptr->mFirmwareVersion = _firmwareVersion;
}

QString dm::TDS__GetDeviceInformationResponse::firmwareVersion() const
{
    return d_ptr->mFirmwareVersion;
}

void dm::TDS__GetDeviceInformationResponse::setSerialNumber( const QString& _serialNumber )
{
    d_ptr->mSerialNumber = _serialNumber;
}

QString dm::TDS__GetDeviceInformationResponse::serialNumber() const
{
    return d_ptr->mSerialNumber;
}

void dm::TDS__GetDeviceInformationResponse::setHardwareId( const QString& _hardwareId )
{
    d_ptr->mHardwareId = _hardwareId;
}

QString dm::TDS__GetDeviceInformationResponse::hardwareId() const
{
    return d_ptr->mHardwareId;
}

KDSoapValue dm::TDS__GetDeviceInformationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDeviceInformationResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueManufacturer(QString::fromLatin1("Manufacturer"), QVariant::fromValue(d_ptr->mManufacturer), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueManufacturer.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueManufacturer.setQualified(true);
    args.append(_valueManufacturer);// elementargumentserializer.cpp:122
    KDSoapValue _valueModel(QString::fromLatin1("Model"), QVariant::fromValue(d_ptr->mModel), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueModel.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueModel.setQualified(true);
    args.append(_valueModel);// elementargumentserializer.cpp:122
    KDSoapValue _valueFirmwareVersion(QString::fromLatin1("FirmwareVersion"), QVariant::fromValue(d_ptr->mFirmwareVersion), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueFirmwareVersion.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueFirmwareVersion.setQualified(true);
    args.append(_valueFirmwareVersion);// elementargumentserializer.cpp:122
    KDSoapValue _valueSerialNumber(QString::fromLatin1("SerialNumber"), QVariant::fromValue(d_ptr->mSerialNumber), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueSerialNumber.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSerialNumber.setQualified(true);
    args.append(_valueSerialNumber);// elementargumentserializer.cpp:122
    KDSoapValue _valueHardwareId(QString::fromLatin1("HardwareId"), QVariant::fromValue(d_ptr->mHardwareId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueHardwareId.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueHardwareId.setQualified(true);
    args.append(_valueHardwareId);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetDeviceInformationResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Manufacturer")) {// converter_complextype.cpp:354
            d_ptr->mManufacturer = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Model")) {// converter_complextype.cpp:354
            d_ptr->mModel = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("FirmwareVersion")) {// converter_complextype.cpp:354
            d_ptr->mFirmwareVersion = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("SerialNumber")) {// converter_complextype.cpp:354
            d_ptr->mSerialNumber = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("HardwareId")) {// converter_complextype.cpp:354
            d_ptr->mHardwareId = val.value().value<QString>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__GetDeviceInformationResponse::TDS__GetDeviceInformationResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetDeviceInformationResponse::~TDS__GetDeviceInformationResponse()
{
}

dm::TDS__GetDeviceInformationResponse::TDS__GetDeviceInformationResponse( const dm::TDS__GetDeviceInformationResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetDeviceInformationResponse&  dm::TDS__GetDeviceInformationResponse::operator=( const dm::TDS__GetDeviceInformationResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__MediaCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    dm::TT__RealTimeStreamingCapabilities mStreamingCapabilities;
    dm::TT__MediaCapabilitiesExtension mExtension;
    bool mExtension_nil;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__MediaCapabilities::PrivateDPtr::PrivateDPtr()
    : mExtension_nil(true), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__MediaCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__MediaCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__MediaCapabilities::setStreamingCapabilities( const dm::TT__RealTimeStreamingCapabilities& _streamingCapabilities )
{
    d_ptr->mStreamingCapabilities = _streamingCapabilities;
}

dm::TT__RealTimeStreamingCapabilities dm::TT__MediaCapabilities::streamingCapabilities() const
{
    return d_ptr->mStreamingCapabilities;
}

void dm::TT__MediaCapabilities::setExtension( const dm::TT__MediaCapabilitiesExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__MediaCapabilitiesExtension dm::TT__MediaCapabilities::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__MediaCapabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__MediaCapabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__MediaCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__MediaCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__MediaCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("MediaCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    KDSoapValue _valueStreamingCapabilities(d_ptr->mStreamingCapabilities.serialize(QString::fromLatin1("StreamingCapabilities")));// elementargumentserializer.cpp:102
    _valueStreamingCapabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueStreamingCapabilities.setQualified(true);
    args.append(_valueStreamingCapabilities);// elementargumentserializer.cpp:122
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__MediaCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("StreamingCapabilities")) {// converter_complextype.cpp:354
            d_ptr->mStreamingCapabilities.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__MediaCapabilities::TT__MediaCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__MediaCapabilities::~TT__MediaCapabilities()
{
}

dm::TT__MediaCapabilities::TT__MediaCapabilities( const dm::TT__MediaCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__MediaCapabilities&  dm::TT__MediaCapabilities::operator=( const dm::TT__MediaCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetAccessPolicyResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetAccessPolicyResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetAccessPolicyResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetAccessPolicyResponse::TDS__SetAccessPolicyResponse()
{
}

dm::TDS__SetAccessPolicyResponse::~TDS__SetAccessPolicyResponse()
{
}


KDSoapValue dm::TDS__GetNetworkProtocols::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetNetworkProtocols"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetNetworkProtocols::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetNetworkProtocols::TDS__GetNetworkProtocols()
{
}

dm::TDS__GetNetworkProtocols::~TDS__GetNetworkProtocols()
{
}


class dm::TDS__GetCertificatesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__Certificate > mNvtCertificate;
    bool mNvtCertificate_nil;
};

dm::TDS__GetCertificatesResponse::PrivateDPtr::PrivateDPtr()
    : mNvtCertificate_nil(true)
{
}


void dm::TDS__GetCertificatesResponse::setNvtCertificate( const QList< dm::TT__Certificate >& _nvtCertificate )
{
    d_ptr->mNvtCertificate_nil = false;// converter_complextype.cpp:277
    d_ptr->mNvtCertificate = _nvtCertificate;
}

QList< dm::TT__Certificate > dm::TDS__GetCertificatesResponse::nvtCertificate() const
{
    return d_ptr->mNvtCertificate;
}

KDSoapValue dm::TDS__GetCertificatesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetCertificatesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mNvtCertificate.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueNvtCertificate(d_ptr->mNvtCertificate.at(i).serialize(QString::fromLatin1("NvtCertificate")));// elementargumentserializer.cpp:102
        _valueNvtCertificate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueNvtCertificate.setQualified(true);
        args.append(_valueNvtCertificate);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetCertificatesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("NvtCertificate")) {// converter_complextype.cpp:354
            dm::TT__Certificate mNvtCertificateTemp;// converter_complextype.cpp:412
            mNvtCertificateTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mNvtCertificate.append(mNvtCertificateTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetCertificatesResponse::TDS__GetCertificatesResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetCertificatesResponse::~TDS__GetCertificatesResponse()
{
}

dm::TDS__GetCertificatesResponse::TDS__GetCertificatesResponse( const dm::TDS__GetCertificatesResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetCertificatesResponse&  dm::TDS__GetCertificatesResponse::operator=( const dm::TDS__GetCertificatesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetUserResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetUserResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetUserResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetUserResponse::TDS__SetUserResponse()
{
}

dm::TDS__SetUserResponse::~TDS__SetUserResponse()
{
}


class dm::TDS__SecurityCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mTLS1_0;
    bool mTLS1_0_nil;
    bool mTLS1_1;
    bool mTLS1_1_nil;
    bool mTLS1_2;
    bool mTLS1_2_nil;
    bool mOnboardKeyGeneration;
    bool mOnboardKeyGeneration_nil;
    bool mAccessPolicyConfig;
    bool mAccessPolicyConfig_nil;
    bool mDefaultAccessPolicy;
    bool mDefaultAccessPolicy_nil;
    bool mDot1X;
    bool mDot1X_nil;
    bool mRemoteUserHandling;
    bool mRemoteUserHandling_nil;
    bool mX_509Token;
    bool mX_509Token_nil;
    bool mSAMLToken;
    bool mSAMLToken_nil;
    bool mKerberosToken;
    bool mKerberosToken_nil;
    bool mUsernameToken;
    bool mUsernameToken_nil;
    bool mHttpDigest;
    bool mHttpDigest_nil;
    bool mRELToken;
    bool mRELToken_nil;
    dm::TDS__EAPMethodTypes mSupportedEAPMethods;
    bool mSupportedEAPMethods_nil;
    int mMaxUsers;
    bool mMaxUsers_nil;
    int mMaxUserNameLength;
    bool mMaxUserNameLength_nil;
    int mMaxPasswordLength;
    bool mMaxPasswordLength_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TDS__SecurityCapabilities::PrivateDPtr::PrivateDPtr()
    : mTLS1_0(false), mTLS1_0_nil(true), mTLS1_1(false), mTLS1_1_nil(true), mTLS1_2(false), mTLS1_2_nil(true), mOnboardKeyGeneration(false), mOnboardKeyGeneration_nil(true), mAccessPolicyConfig(false), mAccessPolicyConfig_nil(true), mDefaultAccessPolicy(false), mDefaultAccessPolicy_nil(true), mDot1X(false), mDot1X_nil(true), mRemoteUserHandling(false), mRemoteUserHandling_nil(true), mX_509Token(false), mX_509Token_nil(true), mSAMLToken(false), mSAMLToken_nil(true), mKerberosToken(false), mKerberosToken_nil(true), mUsernameToken(false), mUsernameToken_nil(true), mHttpDigest(false), mHttpDigest_nil(true), mRELToken(false), mRELToken_nil(true), mSupportedEAPMethods_nil(true), mMaxUsers(0), mMaxUsers_nil(true), mMaxUserNameLength(0), mMaxUserNameLength_nil(true), mMaxPasswordLength(0), mMaxPasswordLength_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TDS__SecurityCapabilities::setTLS1_0( bool _tLS1_0 )
{
    d_ptr->mTLS1_0_nil = false;// converter_complextype.cpp:277
    d_ptr->mTLS1_0 = _tLS1_0;
}

bool dm::TDS__SecurityCapabilities::tLS1_0() const
{
    return d_ptr->mTLS1_0;
}

void dm::TDS__SecurityCapabilities::setTLS1_1( bool _tLS1_1 )
{
    d_ptr->mTLS1_1_nil = false;// converter_complextype.cpp:277
    d_ptr->mTLS1_1 = _tLS1_1;
}

bool dm::TDS__SecurityCapabilities::tLS1_1() const
{
    return d_ptr->mTLS1_1;
}

void dm::TDS__SecurityCapabilities::setTLS1_2( bool _tLS1_2 )
{
    d_ptr->mTLS1_2_nil = false;// converter_complextype.cpp:277
    d_ptr->mTLS1_2 = _tLS1_2;
}

bool dm::TDS__SecurityCapabilities::tLS1_2() const
{
    return d_ptr->mTLS1_2;
}

void dm::TDS__SecurityCapabilities::setOnboardKeyGeneration( bool _onboardKeyGeneration )
{
    d_ptr->mOnboardKeyGeneration_nil = false;// converter_complextype.cpp:277
    d_ptr->mOnboardKeyGeneration = _onboardKeyGeneration;
}

bool dm::TDS__SecurityCapabilities::onboardKeyGeneration() const
{
    return d_ptr->mOnboardKeyGeneration;
}

void dm::TDS__SecurityCapabilities::setAccessPolicyConfig( bool _accessPolicyConfig )
{
    d_ptr->mAccessPolicyConfig_nil = false;// converter_complextype.cpp:277
    d_ptr->mAccessPolicyConfig = _accessPolicyConfig;
}

bool dm::TDS__SecurityCapabilities::accessPolicyConfig() const
{
    return d_ptr->mAccessPolicyConfig;
}

void dm::TDS__SecurityCapabilities::setDefaultAccessPolicy( bool _defaultAccessPolicy )
{
    d_ptr->mDefaultAccessPolicy_nil = false;// converter_complextype.cpp:277
    d_ptr->mDefaultAccessPolicy = _defaultAccessPolicy;
}

bool dm::TDS__SecurityCapabilities::defaultAccessPolicy() const
{
    return d_ptr->mDefaultAccessPolicy;
}

void dm::TDS__SecurityCapabilities::setDot1X( bool _dot1X )
{
    d_ptr->mDot1X_nil = false;// converter_complextype.cpp:277
    d_ptr->mDot1X = _dot1X;
}

bool dm::TDS__SecurityCapabilities::dot1X() const
{
    return d_ptr->mDot1X;
}

void dm::TDS__SecurityCapabilities::setRemoteUserHandling( bool _remoteUserHandling )
{
    d_ptr->mRemoteUserHandling_nil = false;// converter_complextype.cpp:277
    d_ptr->mRemoteUserHandling = _remoteUserHandling;
}

bool dm::TDS__SecurityCapabilities::remoteUserHandling() const
{
    return d_ptr->mRemoteUserHandling;
}

void dm::TDS__SecurityCapabilities::setX_509Token( bool _x_509Token )
{
    d_ptr->mX_509Token_nil = false;// converter_complextype.cpp:277
    d_ptr->mX_509Token = _x_509Token;
}

bool dm::TDS__SecurityCapabilities::x_509Token() const
{
    return d_ptr->mX_509Token;
}

void dm::TDS__SecurityCapabilities::setSAMLToken( bool _sAMLToken )
{
    d_ptr->mSAMLToken_nil = false;// converter_complextype.cpp:277
    d_ptr->mSAMLToken = _sAMLToken;
}

bool dm::TDS__SecurityCapabilities::sAMLToken() const
{
    return d_ptr->mSAMLToken;
}

void dm::TDS__SecurityCapabilities::setKerberosToken( bool _kerberosToken )
{
    d_ptr->mKerberosToken_nil = false;// converter_complextype.cpp:277
    d_ptr->mKerberosToken = _kerberosToken;
}

bool dm::TDS__SecurityCapabilities::kerberosToken() const
{
    return d_ptr->mKerberosToken;
}

void dm::TDS__SecurityCapabilities::setUsernameToken( bool _usernameToken )
{
    d_ptr->mUsernameToken_nil = false;// converter_complextype.cpp:277
    d_ptr->mUsernameToken = _usernameToken;
}

bool dm::TDS__SecurityCapabilities::usernameToken() const
{
    return d_ptr->mUsernameToken;
}

void dm::TDS__SecurityCapabilities::setHttpDigest( bool _httpDigest )
{
    d_ptr->mHttpDigest_nil = false;// converter_complextype.cpp:277
    d_ptr->mHttpDigest = _httpDigest;
}

bool dm::TDS__SecurityCapabilities::httpDigest() const
{
    return d_ptr->mHttpDigest;
}

void dm::TDS__SecurityCapabilities::setRELToken( bool _rELToken )
{
    d_ptr->mRELToken_nil = false;// converter_complextype.cpp:277
    d_ptr->mRELToken = _rELToken;
}

bool dm::TDS__SecurityCapabilities::rELToken() const
{
    return d_ptr->mRELToken;
}

void dm::TDS__SecurityCapabilities::setSupportedEAPMethods( const dm::TDS__EAPMethodTypes& _supportedEAPMethods )
{
    d_ptr->mSupportedEAPMethods_nil = false;// converter_complextype.cpp:277
    d_ptr->mSupportedEAPMethods = _supportedEAPMethods;
}

dm::TDS__EAPMethodTypes dm::TDS__SecurityCapabilities::supportedEAPMethods() const
{
    return d_ptr->mSupportedEAPMethods;
}

void dm::TDS__SecurityCapabilities::setMaxUsers( int _maxUsers )
{
    d_ptr->mMaxUsers_nil = false;// converter_complextype.cpp:277
    d_ptr->mMaxUsers = _maxUsers;
}

int dm::TDS__SecurityCapabilities::maxUsers() const
{
    return d_ptr->mMaxUsers;
}

void dm::TDS__SecurityCapabilities::setMaxUserNameLength( int _maxUserNameLength )
{
    d_ptr->mMaxUserNameLength_nil = false;// converter_complextype.cpp:277
    d_ptr->mMaxUserNameLength = _maxUserNameLength;
}

int dm::TDS__SecurityCapabilities::maxUserNameLength() const
{
    return d_ptr->mMaxUserNameLength;
}

void dm::TDS__SecurityCapabilities::setMaxPasswordLength( int _maxPasswordLength )
{
    d_ptr->mMaxPasswordLength_nil = false;// converter_complextype.cpp:277
    d_ptr->mMaxPasswordLength = _maxPasswordLength;
}

int dm::TDS__SecurityCapabilities::maxPasswordLength() const
{
    return d_ptr->mMaxPasswordLength;
}

void dm::TDS__SecurityCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TDS__SecurityCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TDS__SecurityCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SecurityCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList attribs;
    if (!d_ptr->mTLS1_0_nil) {
        KDSoapValue _valueTLS1_0(QString::fromLatin1("TLS1.0"), QVariant::fromValue(d_ptr->mTLS1_0), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueTLS1_0.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueTLS1_0.isNil())
        attribs.append(_valueTLS1_0);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mTLS1_1_nil) {
        KDSoapValue _valueTLS1_1(QString::fromLatin1("TLS1.1"), QVariant::fromValue(d_ptr->mTLS1_1), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueTLS1_1.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueTLS1_1.isNil())
        attribs.append(_valueTLS1_1);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mTLS1_2_nil) {
        KDSoapValue _valueTLS1_2(QString::fromLatin1("TLS1.2"), QVariant::fromValue(d_ptr->mTLS1_2), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueTLS1_2.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueTLS1_2.isNil())
        attribs.append(_valueTLS1_2);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mOnboardKeyGeneration_nil) {
        KDSoapValue _valueOnboardKeyGeneration(QString::fromLatin1("OnboardKeyGeneration"), QVariant::fromValue(d_ptr->mOnboardKeyGeneration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueOnboardKeyGeneration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueOnboardKeyGeneration.isNil())
        attribs.append(_valueOnboardKeyGeneration);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mAccessPolicyConfig_nil) {
        KDSoapValue _valueAccessPolicyConfig(QString::fromLatin1("AccessPolicyConfig"), QVariant::fromValue(d_ptr->mAccessPolicyConfig), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueAccessPolicyConfig.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueAccessPolicyConfig.isNil())
        attribs.append(_valueAccessPolicyConfig);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDefaultAccessPolicy_nil) {
        KDSoapValue _valueDefaultAccessPolicy(QString::fromLatin1("DefaultAccessPolicy"), QVariant::fromValue(d_ptr->mDefaultAccessPolicy), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueDefaultAccessPolicy.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueDefaultAccessPolicy.isNil())
        attribs.append(_valueDefaultAccessPolicy);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDot1X_nil) {
        KDSoapValue _valueDot1X(QString::fromLatin1("Dot1X"), QVariant::fromValue(d_ptr->mDot1X), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueDot1X.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueDot1X.isNil())
        attribs.append(_valueDot1X);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mRemoteUserHandling_nil) {
        KDSoapValue _valueRemoteUserHandling(QString::fromLatin1("RemoteUserHandling"), QVariant::fromValue(d_ptr->mRemoteUserHandling), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueRemoteUserHandling.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueRemoteUserHandling.isNil())
        attribs.append(_valueRemoteUserHandling);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mX_509Token_nil) {
        KDSoapValue _valueX_509Token(QString::fromLatin1("X.509Token"), QVariant::fromValue(d_ptr->mX_509Token), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueX_509Token.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueX_509Token.isNil())
        attribs.append(_valueX_509Token);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSAMLToken_nil) {
        KDSoapValue _valueSAMLToken(QString::fromLatin1("SAMLToken"), QVariant::fromValue(d_ptr->mSAMLToken), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueSAMLToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueSAMLToken.isNil())
        attribs.append(_valueSAMLToken);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mKerberosToken_nil) {
        KDSoapValue _valueKerberosToken(QString::fromLatin1("KerberosToken"), QVariant::fromValue(d_ptr->mKerberosToken), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueKerberosToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueKerberosToken.isNil())
        attribs.append(_valueKerberosToken);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mUsernameToken_nil) {
        KDSoapValue _valueUsernameToken(QString::fromLatin1("UsernameToken"), QVariant::fromValue(d_ptr->mUsernameToken), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueUsernameToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueUsernameToken.isNil())
        attribs.append(_valueUsernameToken);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mHttpDigest_nil) {
        KDSoapValue _valueHttpDigest(QString::fromLatin1("HttpDigest"), QVariant::fromValue(d_ptr->mHttpDigest), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueHttpDigest.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueHttpDigest.isNil())
        attribs.append(_valueHttpDigest);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mRELToken_nil) {
        KDSoapValue _valueRELToken(QString::fromLatin1("RELToken"), QVariant::fromValue(d_ptr->mRELToken), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueRELToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueRELToken.isNil())
        attribs.append(_valueRELToken);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSupportedEAPMethods_nil) {
        KDSoapValue _valueSupportedEAPMethods(QString::fromLatin1("SupportedEAPMethods"), d_ptr->mSupportedEAPMethods.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("EAPMethodTypes"));// elementargumentserializer.cpp:110
        _valueSupportedEAPMethods.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueSupportedEAPMethods.isNil())
        attribs.append(_valueSupportedEAPMethods);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mMaxUsers_nil) {
        KDSoapValue _valueMaxUsers(QString::fromLatin1("MaxUsers"), QVariant::fromValue(d_ptr->mMaxUsers), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueMaxUsers.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueMaxUsers.isNil())
        attribs.append(_valueMaxUsers);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mMaxUserNameLength_nil) {
        KDSoapValue _valueMaxUserNameLength(QString::fromLatin1("MaxUserNameLength"), QVariant::fromValue(d_ptr->mMaxUserNameLength), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueMaxUserNameLength.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueMaxUserNameLength.isNil())
        attribs.append(_valueMaxUserNameLength);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mMaxPasswordLength_nil) {
        KDSoapValue _valueMaxPasswordLength(QString::fromLatin1("MaxPasswordLength"), QVariant::fromValue(d_ptr->mMaxPasswordLength), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueMaxPasswordLength.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        if (!_valueMaxPasswordLength.isNil())
        attribs.append(_valueMaxPasswordLength);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TDS__SecurityCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("TLS1.0")) {// converter_complextype.cpp:354
            d_ptr->mTLS1_0 = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mTLS1_0_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("TLS1.1")) {// converter_complextype.cpp:354
            d_ptr->mTLS1_1 = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mTLS1_1_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("TLS1.2")) {// converter_complextype.cpp:354
            d_ptr->mTLS1_2 = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mTLS1_2_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("OnboardKeyGeneration")) {// converter_complextype.cpp:354
            d_ptr->mOnboardKeyGeneration = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mOnboardKeyGeneration_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("AccessPolicyConfig")) {// converter_complextype.cpp:354
            d_ptr->mAccessPolicyConfig = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mAccessPolicyConfig_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("DefaultAccessPolicy")) {// converter_complextype.cpp:354
            d_ptr->mDefaultAccessPolicy = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mDefaultAccessPolicy_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Dot1X")) {// converter_complextype.cpp:354
            d_ptr->mDot1X = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mDot1X_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("RemoteUserHandling")) {// converter_complextype.cpp:354
            d_ptr->mRemoteUserHandling = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mRemoteUserHandling_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("X.509Token")) {// converter_complextype.cpp:354
            d_ptr->mX_509Token = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mX_509Token_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("SAMLToken")) {// converter_complextype.cpp:354
            d_ptr->mSAMLToken = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mSAMLToken_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("KerberosToken")) {// converter_complextype.cpp:354
            d_ptr->mKerberosToken = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mKerberosToken_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("UsernameToken")) {// converter_complextype.cpp:354
            d_ptr->mUsernameToken = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mUsernameToken_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("HttpDigest")) {// converter_complextype.cpp:354
            d_ptr->mHttpDigest = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mHttpDigest_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("RELToken")) {// converter_complextype.cpp:354
            d_ptr->mRELToken = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mRELToken_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("SupportedEAPMethods")) {// converter_complextype.cpp:354
            d_ptr->mSupportedEAPMethods.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mSupportedEAPMethods_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("MaxUsers")) {// converter_complextype.cpp:354
            d_ptr->mMaxUsers = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mMaxUsers_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("MaxUserNameLength")) {// converter_complextype.cpp:354
            d_ptr->mMaxUserNameLength = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mMaxUserNameLength_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("MaxPasswordLength")) {// converter_complextype.cpp:354
            d_ptr->mMaxPasswordLength = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mMaxPasswordLength_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TDS__SecurityCapabilities::TDS__SecurityCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SecurityCapabilities::~TDS__SecurityCapabilities()
{
}

dm::TDS__SecurityCapabilities::TDS__SecurityCapabilities( const dm::TDS__SecurityCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SecurityCapabilities&  dm::TDS__SecurityCapabilities::operator=( const dm::TDS__SecurityCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetServiceCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetServiceCapabilities"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetServiceCapabilities::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetServiceCapabilities::TDS__GetServiceCapabilities()
{
}

dm::TDS__GetServiceCapabilities::~TDS__GetServiceCapabilities()
{
}


class dm::TT__SystemLogUri::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__SystemLogType mType;
    QString mUri;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__SystemLogUri::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__SystemLogUri::setType( const dm::TT__SystemLogType& _type )
{
    d_ptr->mType = _type;
}

dm::TT__SystemLogType dm::TT__SystemLogUri::type() const
{
    return d_ptr->mType;
}

void dm::TT__SystemLogUri::setUri( const QString& _uri )
{
    d_ptr->mUri = _uri;
}

QString dm::TT__SystemLogUri::uri() const
{
    return d_ptr->mUri;
}

void dm::TT__SystemLogUri::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__SystemLogUri::any() const
{
    return d_ptr->mAny;
}

void dm::TT__SystemLogUri::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__SystemLogUri::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__SystemLogUri::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SystemLogUri"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueType(QString::fromLatin1("Type"), d_ptr->mType.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SystemLogType"));// elementargumentserializer.cpp:110
    _valueType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueType.setQualified(true);
    args.append(_valueType);// elementargumentserializer.cpp:122
    KDSoapValue _valueUri(QString::fromLatin1("Uri"), QVariant::fromValue(d_ptr->mUri), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueUri.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueUri.setQualified(true);
    args.append(_valueUri);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__SystemLogUri::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Type")) {// converter_complextype.cpp:354
            d_ptr->mType.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Uri")) {// converter_complextype.cpp:354
            d_ptr->mUri = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__SystemLogUri::TT__SystemLogUri()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SystemLogUri::~TT__SystemLogUri()
{
}

dm::TT__SystemLogUri::TT__SystemLogUri( const dm::TT__SystemLogUri& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SystemLogUri&  dm::TT__SystemLogUri::operator=( const dm::TT__SystemLogUri& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__OSDConfigurationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__OSDConfigurationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__OSDConfigurationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__OSDConfigurationExtension::any() const
{
    return d_ptr->mAny;
}

void dm::TT__OSDConfigurationExtension::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__OSDConfigurationExtension::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__OSDConfigurationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("OSDConfigurationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__OSDConfigurationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__OSDConfigurationExtension::TT__OSDConfigurationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__OSDConfigurationExtension::~TT__OSDConfigurationExtension()
{
}

dm::TT__OSDConfigurationExtension::TT__OSDConfigurationExtension( const dm::TT__OSDConfigurationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__OSDConfigurationExtension&  dm::TT__OSDConfigurationExtension::operator=( const dm::TT__OSDConfigurationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetHostnameResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__HostnameInformation mHostnameInformation;
};

void dm::TDS__GetHostnameResponse::setHostnameInformation( const dm::TT__HostnameInformation& _hostnameInformation )
{
    d_ptr->mHostnameInformation = _hostnameInformation;
}

dm::TT__HostnameInformation dm::TDS__GetHostnameResponse::hostnameInformation() const
{
    return d_ptr->mHostnameInformation;
}

KDSoapValue dm::TDS__GetHostnameResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetHostnameResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueHostnameInformation(d_ptr->mHostnameInformation.serialize(QString::fromLatin1("HostnameInformation")));// elementargumentserializer.cpp:102
    _valueHostnameInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueHostnameInformation.setQualified(true);
    args.append(_valueHostnameInformation);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetHostnameResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("HostnameInformation")) {// converter_complextype.cpp:354
            d_ptr->mHostnameInformation.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetHostnameResponse::TDS__GetHostnameResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetHostnameResponse::~TDS__GetHostnameResponse()
{
}

dm::TDS__GetHostnameResponse::TDS__GetHostnameResponse( const dm::TDS__GetHostnameResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetHostnameResponse&  dm::TDS__GetHostnameResponse::operator=( const dm::TDS__GetHostnameResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__IrCutFilterAutoAdjustment::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mBoundaryType;
    float mBoundaryOffset;
    bool mBoundaryOffset_nil;
    QString mResponseTime;
    bool mResponseTime_nil;
    dm::TT__IrCutFilterAutoAdjustmentExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__IrCutFilterAutoAdjustment::PrivateDPtr::PrivateDPtr()
    : mBoundaryOffset(0), mBoundaryOffset_nil(true), mResponseTime_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__IrCutFilterAutoAdjustment::setBoundaryType( const QString& _boundaryType )
{
    d_ptr->mBoundaryType = _boundaryType;
}

QString dm::TT__IrCutFilterAutoAdjustment::boundaryType() const
{
    return d_ptr->mBoundaryType;
}

void dm::TT__IrCutFilterAutoAdjustment::setBoundaryOffset( float _boundaryOffset )
{
    d_ptr->mBoundaryOffset_nil = false;// converter_complextype.cpp:277
    d_ptr->mBoundaryOffset = _boundaryOffset;
}

float dm::TT__IrCutFilterAutoAdjustment::boundaryOffset() const
{
    return d_ptr->mBoundaryOffset;
}

void dm::TT__IrCutFilterAutoAdjustment::setResponseTime( const QString& _responseTime )
{
    d_ptr->mResponseTime_nil = false;// converter_complextype.cpp:277
    d_ptr->mResponseTime = _responseTime;
}

QString dm::TT__IrCutFilterAutoAdjustment::responseTime() const
{
    return d_ptr->mResponseTime;
}

void dm::TT__IrCutFilterAutoAdjustment::setExtension( const dm::TT__IrCutFilterAutoAdjustmentExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__IrCutFilterAutoAdjustmentExtension dm::TT__IrCutFilterAutoAdjustment::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__IrCutFilterAutoAdjustment::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__IrCutFilterAutoAdjustment::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__IrCutFilterAutoAdjustment::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IrCutFilterAutoAdjustment"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueBoundaryType(QString::fromLatin1("BoundaryType"), QVariant::fromValue(d_ptr->mBoundaryType), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueBoundaryType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueBoundaryType.setQualified(true);
    args.append(_valueBoundaryType);// elementargumentserializer.cpp:122
    if (!d_ptr->mBoundaryOffset_nil) {
        KDSoapValue _valueBoundaryOffset(QString::fromLatin1("BoundaryOffset"), QVariant::fromValue(d_ptr->mBoundaryOffset), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueBoundaryOffset.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueBoundaryOffset.setQualified(true);
        if (!_valueBoundaryOffset.isNil())
        args.append(_valueBoundaryOffset);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mResponseTime_nil) {
        KDSoapValue _valueResponseTime(QString::fromLatin1("ResponseTime"), QVariant::fromValue(d_ptr->mResponseTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// elementargumentserializer.cpp:108
        _valueResponseTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueResponseTime.setQualified(true);
        if (!_valueResponseTime.isNil())
        args.append(_valueResponseTime);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__IrCutFilterAutoAdjustment::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("BoundaryType")) {// converter_complextype.cpp:354
            d_ptr->mBoundaryType = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("BoundaryOffset")) {// converter_complextype.cpp:354
            d_ptr->mBoundaryOffset = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mBoundaryOffset_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("ResponseTime")) {// converter_complextype.cpp:354
            d_ptr->mResponseTime = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mResponseTime_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__IrCutFilterAutoAdjustment::TT__IrCutFilterAutoAdjustment()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IrCutFilterAutoAdjustment::~TT__IrCutFilterAutoAdjustment()
{
}

dm::TT__IrCutFilterAutoAdjustment::TT__IrCutFilterAutoAdjustment( const dm::TT__IrCutFilterAutoAdjustment& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IrCutFilterAutoAdjustment&  dm::TT__IrCutFilterAutoAdjustment::operator=( const dm::TT__IrCutFilterAutoAdjustment& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__LoadCertificateWithPrivateKey::PrivateDPtr : public QSharedData
{
public:
    QList< dm::TT__CertificateWithPrivateKey > mCertificateWithPrivateKey;
};

void dm::TDS__LoadCertificateWithPrivateKey::setCertificateWithPrivateKey( const QList< dm::TT__CertificateWithPrivateKey >& _certificateWithPrivateKey )
{
    d_ptr->mCertificateWithPrivateKey = _certificateWithPrivateKey;
}

QList< dm::TT__CertificateWithPrivateKey > dm::TDS__LoadCertificateWithPrivateKey::certificateWithPrivateKey() const
{
    return d_ptr->mCertificateWithPrivateKey;
}

KDSoapValue dm::TDS__LoadCertificateWithPrivateKey::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("LoadCertificateWithPrivateKey"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mCertificateWithPrivateKey.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueCertificateWithPrivateKey(d_ptr->mCertificateWithPrivateKey.at(i).serialize(QString::fromLatin1("CertificateWithPrivateKey")));// elementargumentserializer.cpp:102
        _valueCertificateWithPrivateKey.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueCertificateWithPrivateKey.setQualified(true);
        args.append(_valueCertificateWithPrivateKey);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__LoadCertificateWithPrivateKey::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateWithPrivateKey")) {// converter_complextype.cpp:354
            dm::TT__CertificateWithPrivateKey mCertificateWithPrivateKeyTemp;// converter_complextype.cpp:412
            mCertificateWithPrivateKeyTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mCertificateWithPrivateKey.append(mCertificateWithPrivateKeyTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__LoadCertificateWithPrivateKey::TDS__LoadCertificateWithPrivateKey()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__LoadCertificateWithPrivateKey::~TDS__LoadCertificateWithPrivateKey()
{
}

dm::TDS__LoadCertificateWithPrivateKey::TDS__LoadCertificateWithPrivateKey( const dm::TDS__LoadCertificateWithPrivateKey& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__LoadCertificateWithPrivateKey&  dm::TDS__LoadCertificateWithPrivateKey::operator=( const dm::TDS__LoadCertificateWithPrivateKey& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__SecurityCapabilitiesExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mTLS1_0;
    dm::TT__SecurityCapabilitiesExtension2 mExtension;
    bool mExtension_nil;
};

dm::TT__SecurityCapabilitiesExtension::PrivateDPtr::PrivateDPtr()
    : mTLS1_0(false), mExtension_nil(true)
{
}


void dm::TT__SecurityCapabilitiesExtension::setTLS1_0( bool _tLS1_0 )
{
    d_ptr->mTLS1_0 = _tLS1_0;
}

bool dm::TT__SecurityCapabilitiesExtension::tLS1_0() const
{
    return d_ptr->mTLS1_0;
}

void dm::TT__SecurityCapabilitiesExtension::setExtension( const dm::TT__SecurityCapabilitiesExtension2& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__SecurityCapabilitiesExtension2 dm::TT__SecurityCapabilitiesExtension::extension() const
{
    return d_ptr->mExtension;
}

KDSoapValue dm::TT__SecurityCapabilitiesExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SecurityCapabilitiesExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueTLS1_0(QString::fromLatin1("TLS1.0"), QVariant::fromValue(d_ptr->mTLS1_0), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueTLS1_0.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueTLS1_0.setQualified(true);
    args.append(_valueTLS1_0);// elementargumentserializer.cpp:122
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__SecurityCapabilitiesExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("TLS1.0")) {// converter_complextype.cpp:354
            d_ptr->mTLS1_0 = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TT__SecurityCapabilitiesExtension::TT__SecurityCapabilitiesExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SecurityCapabilitiesExtension::~TT__SecurityCapabilitiesExtension()
{
}

dm::TT__SecurityCapabilitiesExtension::TT__SecurityCapabilitiesExtension( const dm::TT__SecurityCapabilitiesExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SecurityCapabilitiesExtension&  dm::TT__SecurityCapabilitiesExtension::operator=( const dm::TT__SecurityCapabilitiesExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetNetworkDefaultGateway::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetNetworkDefaultGateway"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetNetworkDefaultGateway::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetNetworkDefaultGateway::TDS__GetNetworkDefaultGateway()
{
}

dm::TDS__GetNetworkDefaultGateway::~TDS__GetNetworkDefaultGateway()
{
}


KDSoapValue dm::TDS__GetHostname::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetHostname"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetHostname::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetHostname::TDS__GetHostname()
{
}

dm::TDS__GetHostname::~TDS__GetHostname()
{
}


class dm::TDS__GetWsdlUrlResponse::PrivateDPtr : public QSharedData
{
public:
    QString mWsdlUrl;
};

void dm::TDS__GetWsdlUrlResponse::setWsdlUrl( const QString& _wsdlUrl )
{
    d_ptr->mWsdlUrl = _wsdlUrl;
}

QString dm::TDS__GetWsdlUrlResponse::wsdlUrl() const
{
    return d_ptr->mWsdlUrl;
}

KDSoapValue dm::TDS__GetWsdlUrlResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetWsdlUrlResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueWsdlUrl(QString::fromLatin1("WsdlUrl"), QVariant::fromValue(d_ptr->mWsdlUrl), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueWsdlUrl.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueWsdlUrl.setQualified(true);
    args.append(_valueWsdlUrl);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetWsdlUrlResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("WsdlUrl")) {// converter_complextype.cpp:354
            d_ptr->mWsdlUrl = val.value().value<QString>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__GetWsdlUrlResponse::TDS__GetWsdlUrlResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetWsdlUrlResponse::~TDS__GetWsdlUrlResponse()
{
}

dm::TDS__GetWsdlUrlResponse::TDS__GetWsdlUrlResponse( const dm::TDS__GetWsdlUrlResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetWsdlUrlResponse&  dm::TDS__GetWsdlUrlResponse::operator=( const dm::TDS__GetWsdlUrlResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Defogging::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mMode;
    float mLevel;
    bool mLevel_nil;
    dm::TT__DefoggingExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__Defogging::PrivateDPtr::PrivateDPtr()
    : mLevel(0), mLevel_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__Defogging::setMode( const QString& _mode )
{
    d_ptr->mMode = _mode;
}

QString dm::TT__Defogging::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__Defogging::setLevel( float _level )
{
    d_ptr->mLevel_nil = false;// converter_complextype.cpp:277
    d_ptr->mLevel = _level;
}

float dm::TT__Defogging::level() const
{
    return d_ptr->mLevel;
}

void dm::TT__Defogging::setExtension( const dm::TT__DefoggingExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__DefoggingExtension dm::TT__Defogging::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__Defogging::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__Defogging::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__Defogging::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Defogging"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), QVariant::fromValue(d_ptr->mMode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    if (!d_ptr->mLevel_nil) {
        KDSoapValue _valueLevel(QString::fromLatin1("Level"), QVariant::fromValue(d_ptr->mLevel), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueLevel.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueLevel.setQualified(true);
        if (!_valueLevel.isNil())
        args.append(_valueLevel);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Defogging::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Level")) {// converter_complextype.cpp:354
            d_ptr->mLevel = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mLevel_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__Defogging::TT__Defogging()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Defogging::~TT__Defogging()
{
}

dm::TT__Defogging::TT__Defogging( const dm::TT__Defogging& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Defogging&  dm::TT__Defogging::operator=( const dm::TT__Defogging& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetDot11StatusResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__Dot11Status mStatus;
};

void dm::TDS__GetDot11StatusResponse::setStatus( const dm::TT__Dot11Status& _status )
{
    d_ptr->mStatus = _status;
}

dm::TT__Dot11Status dm::TDS__GetDot11StatusResponse::status() const
{
    return d_ptr->mStatus;
}

KDSoapValue dm::TDS__GetDot11StatusResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDot11StatusResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueStatus(d_ptr->mStatus.serialize(QString::fromLatin1("Status")));// elementargumentserializer.cpp:102
    _valueStatus.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueStatus.setQualified(true);
    args.append(_valueStatus);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetDot11StatusResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Status")) {// converter_complextype.cpp:354
            d_ptr->mStatus.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetDot11StatusResponse::TDS__GetDot11StatusResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetDot11StatusResponse::~TDS__GetDot11StatusResponse()
{
}

dm::TDS__GetDot11StatusResponse::TDS__GetDot11StatusResponse( const dm::TDS__GetDot11StatusResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetDot11StatusResponse&  dm::TDS__GetDot11StatusResponse::operator=( const dm::TDS__GetDot11StatusResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__ProfileCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mMaximumNumberOfProfiles;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__ProfileCapabilities::PrivateDPtr::PrivateDPtr()
    : mMaximumNumberOfProfiles(0), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__ProfileCapabilities::setMaximumNumberOfProfiles( int _maximumNumberOfProfiles )
{
    d_ptr->mMaximumNumberOfProfiles = _maximumNumberOfProfiles;
}

int dm::TT__ProfileCapabilities::maximumNumberOfProfiles() const
{
    return d_ptr->mMaximumNumberOfProfiles;
}

void dm::TT__ProfileCapabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__ProfileCapabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__ProfileCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__ProfileCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__ProfileCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ProfileCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMaximumNumberOfProfiles(QString::fromLatin1("MaximumNumberOfProfiles"), QVariant::fromValue(d_ptr->mMaximumNumberOfProfiles), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueMaximumNumberOfProfiles.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMaximumNumberOfProfiles.setQualified(true);
    args.append(_valueMaximumNumberOfProfiles);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__ProfileCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("MaximumNumberOfProfiles")) {// converter_complextype.cpp:354
            d_ptr->mMaximumNumberOfProfiles = val.value().value<int>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__ProfileCapabilities::TT__ProfileCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ProfileCapabilities::~TT__ProfileCapabilities()
{
}

dm::TT__ProfileCapabilities::TT__ProfileCapabilities( const dm::TT__ProfileCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ProfileCapabilities&  dm::TT__ProfileCapabilities::operator=( const dm::TT__ProfileCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetDot1XConfiguration::PrivateDPtr : public QSharedData
{
public:
    dm::TT__ReferenceToken mDot1XConfigurationToken;
};

void dm::TDS__GetDot1XConfiguration::setDot1XConfigurationToken( const dm::TT__ReferenceToken& _dot1XConfigurationToken )
{
    d_ptr->mDot1XConfigurationToken = _dot1XConfigurationToken;
}

dm::TT__ReferenceToken dm::TDS__GetDot1XConfiguration::dot1XConfigurationToken() const
{
    return d_ptr->mDot1XConfigurationToken;
}

KDSoapValue dm::TDS__GetDot1XConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDot1XConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDot1XConfigurationToken(QString::fromLatin1("Dot1XConfigurationToken"), d_ptr->mDot1XConfigurationToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueDot1XConfigurationToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDot1XConfigurationToken.setQualified(true);
    args.append(_valueDot1XConfigurationToken);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetDot1XConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Dot1XConfigurationToken")) {// converter_complextype.cpp:354
            d_ptr->mDot1XConfigurationToken.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__GetDot1XConfiguration::TDS__GetDot1XConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetDot1XConfiguration::~TDS__GetDot1XConfiguration()
{
}

dm::TDS__GetDot1XConfiguration::TDS__GetDot1XConfiguration( const dm::TDS__GetDot1XConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetDot1XConfiguration&  dm::TDS__GetDot1XConfiguration::operator=( const dm::TDS__GetDot1XConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetRemoteDiscoveryMode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetRemoteDiscoveryMode"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetRemoteDiscoveryMode::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetRemoteDiscoveryMode::TDS__GetRemoteDiscoveryMode()
{
}

dm::TDS__GetRemoteDiscoveryMode::~TDS__GetRemoteDiscoveryMode()
{
}


class dm::TDS__DeleteUsers::PrivateDPtr : public QSharedData
{
public:
    QStringList mUsername;
};

void dm::TDS__DeleteUsers::setUsername( const QStringList& _username )
{
    d_ptr->mUsername = _username;
}

QStringList dm::TDS__DeleteUsers::username() const
{
    return d_ptr->mUsername;
}

KDSoapValue dm::TDS__DeleteUsers::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("DeleteUsers"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mUsername.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueUsername(QString::fromLatin1("Username"), QVariant::fromValue(d_ptr->mUsername.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueUsername.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueUsername.setQualified(true);
        args.append(_valueUsername);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__DeleteUsers::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Username")) {// converter_complextype.cpp:354
            QString mUsernameTemp;// converter_complextype.cpp:412
            mUsernameTemp = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mUsername.append(mUsernameTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__DeleteUsers::TDS__DeleteUsers()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__DeleteUsers::~TDS__DeleteUsers()
{
}

dm::TDS__DeleteUsers::TDS__DeleteUsers( const dm::TDS__DeleteUsers& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__DeleteUsers&  dm::TDS__DeleteUsers::operator=( const dm::TDS__DeleteUsers& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Exposure20::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__ExposureMode mMode;
    dm::TT__ExposurePriority mPriority;
    bool mPriority_nil;
    dm::TT__Rectangle mWindow;
    bool mWindow_nil;
    float mMinExposureTime;
    bool mMinExposureTime_nil;
    float mMaxExposureTime;
    bool mMaxExposureTime_nil;
    float mMinGain;
    bool mMinGain_nil;
    float mMaxGain;
    bool mMaxGain_nil;
    float mMinIris;
    bool mMinIris_nil;
    float mMaxIris;
    bool mMaxIris_nil;
    float mExposureTime;
    bool mExposureTime_nil;
    float mGain;
    bool mGain_nil;
    float mIris;
    bool mIris_nil;
};

dm::TT__Exposure20::PrivateDPtr::PrivateDPtr()
    : mPriority_nil(true), mWindow_nil(true), mMinExposureTime(0), mMinExposureTime_nil(true), mMaxExposureTime(0), mMaxExposureTime_nil(true), mMinGain(0), mMinGain_nil(true), mMaxGain(0), mMaxGain_nil(true), mMinIris(0), mMinIris_nil(true), mMaxIris(0), mMaxIris_nil(true), mExposureTime(0), mExposureTime_nil(true), mGain(0), mGain_nil(true), mIris(0), mIris_nil(true)
{
}


void dm::TT__Exposure20::setMode( const dm::TT__ExposureMode& _mode )
{
    d_ptr->mMode = _mode;
}

dm::TT__ExposureMode dm::TT__Exposure20::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__Exposure20::setPriority( const dm::TT__ExposurePriority& _priority )
{
    d_ptr->mPriority_nil = false;// converter_complextype.cpp:277
    d_ptr->mPriority = _priority;
}

dm::TT__ExposurePriority dm::TT__Exposure20::priority() const
{
    return d_ptr->mPriority;
}

void dm::TT__Exposure20::setWindow( const dm::TT__Rectangle& _window )
{
    d_ptr->mWindow_nil = false;// converter_complextype.cpp:277
    d_ptr->mWindow = _window;
}

dm::TT__Rectangle dm::TT__Exposure20::window() const
{
    return d_ptr->mWindow;
}

void dm::TT__Exposure20::setMinExposureTime( float _minExposureTime )
{
    d_ptr->mMinExposureTime_nil = false;// converter_complextype.cpp:277
    d_ptr->mMinExposureTime = _minExposureTime;
}

float dm::TT__Exposure20::minExposureTime() const
{
    return d_ptr->mMinExposureTime;
}

void dm::TT__Exposure20::setMaxExposureTime( float _maxExposureTime )
{
    d_ptr->mMaxExposureTime_nil = false;// converter_complextype.cpp:277
    d_ptr->mMaxExposureTime = _maxExposureTime;
}

float dm::TT__Exposure20::maxExposureTime() const
{
    return d_ptr->mMaxExposureTime;
}

void dm::TT__Exposure20::setMinGain( float _minGain )
{
    d_ptr->mMinGain_nil = false;// converter_complextype.cpp:277
    d_ptr->mMinGain = _minGain;
}

float dm::TT__Exposure20::minGain() const
{
    return d_ptr->mMinGain;
}

void dm::TT__Exposure20::setMaxGain( float _maxGain )
{
    d_ptr->mMaxGain_nil = false;// converter_complextype.cpp:277
    d_ptr->mMaxGain = _maxGain;
}

float dm::TT__Exposure20::maxGain() const
{
    return d_ptr->mMaxGain;
}

void dm::TT__Exposure20::setMinIris( float _minIris )
{
    d_ptr->mMinIris_nil = false;// converter_complextype.cpp:277
    d_ptr->mMinIris = _minIris;
}

float dm::TT__Exposure20::minIris() const
{
    return d_ptr->mMinIris;
}

void dm::TT__Exposure20::setMaxIris( float _maxIris )
{
    d_ptr->mMaxIris_nil = false;// converter_complextype.cpp:277
    d_ptr->mMaxIris = _maxIris;
}

float dm::TT__Exposure20::maxIris() const
{
    return d_ptr->mMaxIris;
}

void dm::TT__Exposure20::setExposureTime( float _exposureTime )
{
    d_ptr->mExposureTime_nil = false;// converter_complextype.cpp:277
    d_ptr->mExposureTime = _exposureTime;
}

float dm::TT__Exposure20::exposureTime() const
{
    return d_ptr->mExposureTime;
}

void dm::TT__Exposure20::setGain( float _gain )
{
    d_ptr->mGain_nil = false;// converter_complextype.cpp:277
    d_ptr->mGain = _gain;
}

float dm::TT__Exposure20::gain() const
{
    return d_ptr->mGain;
}

void dm::TT__Exposure20::setIris( float _iris )
{
    d_ptr->mIris_nil = false;// converter_complextype.cpp:277
    d_ptr->mIris = _iris;
}

float dm::TT__Exposure20::iris() const
{
    return d_ptr->mIris;
}

KDSoapValue dm::TT__Exposure20::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Exposure20"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), d_ptr->mMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ExposureMode"));// elementargumentserializer.cpp:110
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    if (!d_ptr->mPriority_nil) {
        KDSoapValue _valuePriority(QString::fromLatin1("Priority"), d_ptr->mPriority.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ExposurePriority"));// elementargumentserializer.cpp:110
        _valuePriority.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePriority.setQualified(true);
        if (!_valuePriority.isNil())
        args.append(_valuePriority);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mWindow_nil) {
        KDSoapValue _valueWindow(d_ptr->mWindow.serialize(QString::fromLatin1("Window")));// elementargumentserializer.cpp:102
        _valueWindow.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueWindow.setQualified(true);
        if (!_valueWindow.isNil())
        args.append(_valueWindow);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mMinExposureTime_nil) {
        KDSoapValue _valueMinExposureTime(QString::fromLatin1("MinExposureTime"), QVariant::fromValue(d_ptr->mMinExposureTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueMinExposureTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueMinExposureTime.setQualified(true);
        if (!_valueMinExposureTime.isNil())
        args.append(_valueMinExposureTime);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mMaxExposureTime_nil) {
        KDSoapValue _valueMaxExposureTime(QString::fromLatin1("MaxExposureTime"), QVariant::fromValue(d_ptr->mMaxExposureTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueMaxExposureTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueMaxExposureTime.setQualified(true);
        if (!_valueMaxExposureTime.isNil())
        args.append(_valueMaxExposureTime);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mMinGain_nil) {
        KDSoapValue _valueMinGain(QString::fromLatin1("MinGain"), QVariant::fromValue(d_ptr->mMinGain), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueMinGain.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueMinGain.setQualified(true);
        if (!_valueMinGain.isNil())
        args.append(_valueMinGain);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mMaxGain_nil) {
        KDSoapValue _valueMaxGain(QString::fromLatin1("MaxGain"), QVariant::fromValue(d_ptr->mMaxGain), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueMaxGain.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueMaxGain.setQualified(true);
        if (!_valueMaxGain.isNil())
        args.append(_valueMaxGain);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mMinIris_nil) {
        KDSoapValue _valueMinIris(QString::fromLatin1("MinIris"), QVariant::fromValue(d_ptr->mMinIris), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueMinIris.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueMinIris.setQualified(true);
        if (!_valueMinIris.isNil())
        args.append(_valueMinIris);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mMaxIris_nil) {
        KDSoapValue _valueMaxIris(QString::fromLatin1("MaxIris"), QVariant::fromValue(d_ptr->mMaxIris), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueMaxIris.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueMaxIris.setQualified(true);
        if (!_valueMaxIris.isNil())
        args.append(_valueMaxIris);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExposureTime_nil) {
        KDSoapValue _valueExposureTime(QString::fromLatin1("ExposureTime"), QVariant::fromValue(d_ptr->mExposureTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueExposureTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExposureTime.setQualified(true);
        if (!_valueExposureTime.isNil())
        args.append(_valueExposureTime);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mGain_nil) {
        KDSoapValue _valueGain(QString::fromLatin1("Gain"), QVariant::fromValue(d_ptr->mGain), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueGain.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueGain.setQualified(true);
        if (!_valueGain.isNil())
        args.append(_valueGain);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mIris_nil) {
        KDSoapValue _valueIris(QString::fromLatin1("Iris"), QVariant::fromValue(d_ptr->mIris), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueIris.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIris.setQualified(true);
        if (!_valueIris.isNil())
        args.append(_valueIris);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TT__Exposure20::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Priority")) {// converter_complextype.cpp:354
            d_ptr->mPriority.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mPriority_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("Window")) {// converter_complextype.cpp:354
            d_ptr->mWindow.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("MinExposureTime")) {// converter_complextype.cpp:354
            d_ptr->mMinExposureTime = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mMinExposureTime_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("MaxExposureTime")) {// converter_complextype.cpp:354
            d_ptr->mMaxExposureTime = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mMaxExposureTime_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("MinGain")) {// converter_complextype.cpp:354
            d_ptr->mMinGain = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mMinGain_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("MaxGain")) {// converter_complextype.cpp:354
            d_ptr->mMaxGain = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mMaxGain_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("MinIris")) {// converter_complextype.cpp:354
            d_ptr->mMinIris = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mMinIris_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("MaxIris")) {// converter_complextype.cpp:354
            d_ptr->mMaxIris = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mMaxIris_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("ExposureTime")) {// converter_complextype.cpp:354
            d_ptr->mExposureTime = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mExposureTime_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Gain")) {// converter_complextype.cpp:354
            d_ptr->mGain = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mGain_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Iris")) {// converter_complextype.cpp:354
            d_ptr->mIris = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mIris_nil = false;// converter_complextype.cpp:369
        }
    }
}

dm::TT__Exposure20::TT__Exposure20()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Exposure20::~TT__Exposure20()
{
}

dm::TT__Exposure20::TT__Exposure20( const dm::TT__Exposure20& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Exposure20&  dm::TT__Exposure20::operator=( const dm::TT__Exposure20& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__SystemDateTimeExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__SystemDateTimeExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__SystemDateTimeExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__SystemDateTimeExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__SystemDateTimeExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SystemDateTimeExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__SystemDateTimeExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__SystemDateTimeExtension::TT__SystemDateTimeExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SystemDateTimeExtension::~TT__SystemDateTimeExtension()
{
}

dm::TT__SystemDateTimeExtension::TT__SystemDateTimeExtension( const dm::TT__SystemDateTimeExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SystemDateTimeExtension&  dm::TT__SystemDateTimeExtension::operator=( const dm::TT__SystemDateTimeExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__DisplayCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mXAddr;
    bool mFixedLayout;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__DisplayCapabilities::PrivateDPtr::PrivateDPtr()
    : mFixedLayout(false), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__DisplayCapabilities::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TT__DisplayCapabilities::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TT__DisplayCapabilities::setFixedLayout( bool _fixedLayout )
{
    d_ptr->mFixedLayout = _fixedLayout;
}

bool dm::TT__DisplayCapabilities::fixedLayout() const
{
    return d_ptr->mFixedLayout;
}

void dm::TT__DisplayCapabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__DisplayCapabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__DisplayCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__DisplayCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__DisplayCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DisplayCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    KDSoapValue _valueFixedLayout(QString::fromLatin1("FixedLayout"), QVariant::fromValue(d_ptr->mFixedLayout), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueFixedLayout.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueFixedLayout.setQualified(true);
    args.append(_valueFixedLayout);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__DisplayCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("FixedLayout")) {// converter_complextype.cpp:354
            d_ptr->mFixedLayout = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__DisplayCapabilities::TT__DisplayCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DisplayCapabilities::~TT__DisplayCapabilities()
{
}

dm::TT__DisplayCapabilities::TT__DisplayCapabilities( const dm::TT__DisplayCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__DisplayCapabilities&  dm::TT__DisplayCapabilities::operator=( const dm::TT__DisplayCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetRemoteDiscoveryModeResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__DiscoveryMode mRemoteDiscoveryMode;
};

void dm::TDS__GetRemoteDiscoveryModeResponse::setRemoteDiscoveryMode( const dm::TT__DiscoveryMode& _remoteDiscoveryMode )
{
    d_ptr->mRemoteDiscoveryMode = _remoteDiscoveryMode;
}

dm::TT__DiscoveryMode dm::TDS__GetRemoteDiscoveryModeResponse::remoteDiscoveryMode() const
{
    return d_ptr->mRemoteDiscoveryMode;
}

KDSoapValue dm::TDS__GetRemoteDiscoveryModeResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetRemoteDiscoveryModeResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueRemoteDiscoveryMode(QString::fromLatin1("RemoteDiscoveryMode"), d_ptr->mRemoteDiscoveryMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DiscoveryMode"));// elementargumentserializer.cpp:110
    _valueRemoteDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRemoteDiscoveryMode.setQualified(true);
    args.append(_valueRemoteDiscoveryMode);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetRemoteDiscoveryModeResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("RemoteDiscoveryMode")) {// converter_complextype.cpp:354
            d_ptr->mRemoteDiscoveryMode.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TDS__GetRemoteDiscoveryModeResponse::TDS__GetRemoteDiscoveryModeResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetRemoteDiscoveryModeResponse::~TDS__GetRemoteDiscoveryModeResponse()
{
}

dm::TDS__GetRemoteDiscoveryModeResponse::TDS__GetRemoteDiscoveryModeResponse( const dm::TDS__GetRemoteDiscoveryModeResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetRemoteDiscoveryModeResponse&  dm::TDS__GetRemoteDiscoveryModeResponse::operator=( const dm::TDS__GetRemoteDiscoveryModeResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__DeleteStorageConfigurationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("DeleteStorageConfigurationResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__DeleteStorageConfigurationResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__DeleteStorageConfigurationResponse::TDS__DeleteStorageConfigurationResponse()
{
}

dm::TDS__DeleteStorageConfigurationResponse::~TDS__DeleteStorageConfigurationResponse()
{
}


KDSoapValue dm::TDS__GetSystemBackup::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetSystemBackup"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetSystemBackup::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetSystemBackup::TDS__GetSystemBackup()
{
}

dm::TDS__GetSystemBackup::~TDS__GetSystemBackup()
{
}


class dm::TT__IOCapabilitiesExtension2::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__IOCapabilitiesExtension2::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__IOCapabilitiesExtension2::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__IOCapabilitiesExtension2::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__IOCapabilitiesExtension2::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IOCapabilitiesExtension2"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__IOCapabilitiesExtension2::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__IOCapabilitiesExtension2::TT__IOCapabilitiesExtension2()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IOCapabilitiesExtension2::~TT__IOCapabilitiesExtension2()
{
}

dm::TT__IOCapabilitiesExtension2::TT__IOCapabilitiesExtension2( const dm::TT__IOCapabilitiesExtension2& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IOCapabilitiesExtension2&  dm::TT__IOCapabilitiesExtension2::operator=( const dm::TT__IOCapabilitiesExtension2& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__Service::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mNamespace;
    QString mXAddr;
    dm::TDS__Capabilities mCapabilities;
    bool mCapabilities_nil;
    dm::TT__OnvifVersion mVersion;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TDS__Service::PrivateDPtr::PrivateDPtr()
    : mCapabilities_nil(true), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TDS__Service::setNamespace( const QString& _namespace_ )
{
    d_ptr->mNamespace = _namespace_;
}

QString dm::TDS__Service::namespace_() const
{
    return d_ptr->mNamespace;
}

void dm::TDS__Service::setXAddr( const QString& _xAddr )
{
    d_ptr->mXAddr = _xAddr;
}

QString dm::TDS__Service::xAddr() const
{
    return d_ptr->mXAddr;
}

void dm::TDS__Service::setCapabilities( const dm::TDS__Capabilities& _capabilities )
{
    d_ptr->mCapabilities_nil = false;// converter_complextype.cpp:277
    d_ptr->mCapabilities = _capabilities;
}

dm::TDS__Capabilities dm::TDS__Service::capabilities() const
{
    return d_ptr->mCapabilities;
}

void dm::TDS__Service::setVersion( const dm::TT__OnvifVersion& _version )
{
    d_ptr->mVersion = _version;
}

dm::TT__OnvifVersion dm::TDS__Service::version() const
{
    return d_ptr->mVersion;
}

void dm::TDS__Service::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TDS__Service::any() const
{
    return d_ptr->mAny;
}

void dm::TDS__Service::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TDS__Service::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TDS__Service::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("Service"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueNamespace(QString::fromLatin1("Namespace"), QVariant::fromValue(d_ptr->mNamespace), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueNamespace.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueNamespace.setQualified(true);
    args.append(_valueNamespace);// elementargumentserializer.cpp:122
    KDSoapValue _valueXAddr(QString::fromLatin1("XAddr"), QVariant::fromValue(d_ptr->mXAddr), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
    _valueXAddr.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueXAddr.setQualified(true);
    args.append(_valueXAddr);// elementargumentserializer.cpp:122
    if (!d_ptr->mCapabilities_nil) {
        KDSoapValue _valueCapabilities(d_ptr->mCapabilities.serialize(QString::fromLatin1("Capabilities")));// elementargumentserializer.cpp:102
        _valueCapabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueCapabilities.setQualified(true);
        if (!_valueCapabilities.isNil())
        args.append(_valueCapabilities);// elementargumentserializer.cpp:122
    }
    KDSoapValue _valueVersion(d_ptr->mVersion.serialize(QString::fromLatin1("Version")));// elementargumentserializer.cpp:102
    _valueVersion.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueVersion.setQualified(true);
    args.append(_valueVersion);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TDS__Service::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Namespace")) {// converter_complextype.cpp:354
            d_ptr->mNamespace = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("XAddr")) {// converter_complextype.cpp:354
            d_ptr->mXAddr = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Capabilities")) {// converter_complextype.cpp:354
            d_ptr->mCapabilities.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Version")) {// converter_complextype.cpp:354
            d_ptr->mVersion.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TDS__Service::TDS__Service()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__Service::~TDS__Service()
{
}

dm::TDS__Service::TDS__Service( const dm::TDS__Service& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__Service&  dm::TDS__Service::operator=( const dm::TDS__Service& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__CreateUsers::PrivateDPtr : public QSharedData
{
public:
    QList< dm::TT__User > mUser;
};

void dm::TDS__CreateUsers::setUser( const QList< dm::TT__User >& _user )
{
    d_ptr->mUser = _user;
}

QList< dm::TT__User > dm::TDS__CreateUsers::user() const
{
    return d_ptr->mUser;
}

KDSoapValue dm::TDS__CreateUsers::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("CreateUsers"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mUser.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueUser(d_ptr->mUser.at(i).serialize(QString::fromLatin1("User")));// elementargumentserializer.cpp:102
        _valueUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueUser.setQualified(true);
        args.append(_valueUser);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__CreateUsers::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("User")) {// converter_complextype.cpp:354
            dm::TT__User mUserTemp;// converter_complextype.cpp:412
            mUserTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mUser.append(mUserTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__CreateUsers::TDS__CreateUsers()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__CreateUsers::~TDS__CreateUsers()
{
}

dm::TDS__CreateUsers::TDS__CreateUsers( const dm::TDS__CreateUsers& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__CreateUsers&  dm::TDS__CreateUsers::operator=( const dm::TDS__CreateUsers& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetSystemFactoryDefaultResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetSystemFactoryDefaultResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetSystemFactoryDefaultResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetSystemFactoryDefaultResponse::TDS__SetSystemFactoryDefaultResponse()
{
}

dm::TDS__SetSystemFactoryDefaultResponse::~TDS__SetSystemFactoryDefaultResponse()
{
}


class dm::TDS__GetNetworkDefaultGatewayResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__NetworkGateway mNetworkGateway;
};

void dm::TDS__GetNetworkDefaultGatewayResponse::setNetworkGateway( const dm::TT__NetworkGateway& _networkGateway )
{
    d_ptr->mNetworkGateway = _networkGateway;
}

dm::TT__NetworkGateway dm::TDS__GetNetworkDefaultGatewayResponse::networkGateway() const
{
    return d_ptr->mNetworkGateway;
}

KDSoapValue dm::TDS__GetNetworkDefaultGatewayResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetNetworkDefaultGatewayResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueNetworkGateway(d_ptr->mNetworkGateway.serialize(QString::fromLatin1("NetworkGateway")));// elementargumentserializer.cpp:102
    _valueNetworkGateway.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueNetworkGateway.setQualified(true);
    args.append(_valueNetworkGateway);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetNetworkDefaultGatewayResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("NetworkGateway")) {// converter_complextype.cpp:354
            d_ptr->mNetworkGateway.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetNetworkDefaultGatewayResponse::TDS__GetNetworkDefaultGatewayResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetNetworkDefaultGatewayResponse::~TDS__GetNetworkDefaultGatewayResponse()
{
}

dm::TDS__GetNetworkDefaultGatewayResponse::TDS__GetNetworkDefaultGatewayResponse( const dm::TDS__GetNetworkDefaultGatewayResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetNetworkDefaultGatewayResponse&  dm::TDS__GetNetworkDefaultGatewayResponse::operator=( const dm::TDS__GetNetworkDefaultGatewayResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetDeviceInformation::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDeviceInformation"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetDeviceInformation::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetDeviceInformation::TDS__GetDeviceInformation()
{
}

dm::TDS__GetDeviceInformation::~TDS__GetDeviceInformation()
{
}


class dm::TT__ToneCompensationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__ToneCompensationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__ToneCompensationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__ToneCompensationExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__ToneCompensationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ToneCompensationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__ToneCompensationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__ToneCompensationExtension::TT__ToneCompensationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__ToneCompensationExtension::~TT__ToneCompensationExtension()
{
}

dm::TT__ToneCompensationExtension::TT__ToneCompensationExtension( const dm::TT__ToneCompensationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__ToneCompensationExtension&  dm::TT__ToneCompensationExtension::operator=( const dm::TT__ToneCompensationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__AddIPAddressFilterResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("AddIPAddressFilterResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__AddIPAddressFilterResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__AddIPAddressFilterResponse::TDS__AddIPAddressFilterResponse()
{
}

dm::TDS__AddIPAddressFilterResponse::~TDS__AddIPAddressFilterResponse()
{
}


class dm::TT__WhiteBalance::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__WhiteBalanceMode mMode;
    float mCrGain;
    float mCbGain;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__WhiteBalance::PrivateDPtr::PrivateDPtr()
    : mCrGain(0), mCbGain(0), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__WhiteBalance::setMode( const dm::TT__WhiteBalanceMode& _mode )
{
    d_ptr->mMode = _mode;
}

dm::TT__WhiteBalanceMode dm::TT__WhiteBalance::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__WhiteBalance::setCrGain( float _crGain )
{
    d_ptr->mCrGain = _crGain;
}

float dm::TT__WhiteBalance::crGain() const
{
    return d_ptr->mCrGain;
}

void dm::TT__WhiteBalance::setCbGain( float _cbGain )
{
    d_ptr->mCbGain = _cbGain;
}

float dm::TT__WhiteBalance::cbGain() const
{
    return d_ptr->mCbGain;
}

void dm::TT__WhiteBalance::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__WhiteBalance::any() const
{
    return d_ptr->mAny;
}

void dm::TT__WhiteBalance::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__WhiteBalance::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__WhiteBalance::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("WhiteBalance"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), d_ptr->mMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("WhiteBalanceMode"));// elementargumentserializer.cpp:110
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    KDSoapValue _valueCrGain(QString::fromLatin1("CrGain"), QVariant::fromValue(d_ptr->mCrGain), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueCrGain.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueCrGain.setQualified(true);
    args.append(_valueCrGain);// elementargumentserializer.cpp:122
    KDSoapValue _valueCbGain(QString::fromLatin1("CbGain"), QVariant::fromValue(d_ptr->mCbGain), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueCbGain.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueCbGain.setQualified(true);
    args.append(_valueCbGain);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__WhiteBalance::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("CrGain")) {// converter_complextype.cpp:354
            d_ptr->mCrGain = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("CbGain")) {// converter_complextype.cpp:354
            d_ptr->mCbGain = val.value().value<float>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__WhiteBalance::TT__WhiteBalance()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__WhiteBalance::~TT__WhiteBalance()
{
}

dm::TT__WhiteBalance::TT__WhiteBalance( const dm::TT__WhiteBalance& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__WhiteBalance&  dm::TT__WhiteBalance::operator=( const dm::TT__WhiteBalance& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetDPAddressesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__NetworkHost > mDPAddress;
    bool mDPAddress_nil;
};

dm::TDS__GetDPAddressesResponse::PrivateDPtr::PrivateDPtr()
    : mDPAddress_nil(true)
{
}


void dm::TDS__GetDPAddressesResponse::setDPAddress( const QList< dm::TT__NetworkHost >& _dPAddress )
{
    d_ptr->mDPAddress_nil = false;// converter_complextype.cpp:277
    d_ptr->mDPAddress = _dPAddress;
}

QList< dm::TT__NetworkHost > dm::TDS__GetDPAddressesResponse::dPAddress() const
{
    return d_ptr->mDPAddress;
}

KDSoapValue dm::TDS__GetDPAddressesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDPAddressesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mDPAddress.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueDPAddress(d_ptr->mDPAddress.at(i).serialize(QString::fromLatin1("DPAddress")));// elementargumentserializer.cpp:102
        _valueDPAddress.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueDPAddress.setQualified(true);
        args.append(_valueDPAddress);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetDPAddressesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DPAddress")) {// converter_complextype.cpp:354
            dm::TT__NetworkHost mDPAddressTemp;// converter_complextype.cpp:412
            mDPAddressTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mDPAddress.append(mDPAddressTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetDPAddressesResponse::TDS__GetDPAddressesResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetDPAddressesResponse::~TDS__GetDPAddressesResponse()
{
}

dm::TDS__GetDPAddressesResponse::TDS__GetDPAddressesResponse( const dm::TDS__GetDPAddressesResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetDPAddressesResponse&  dm::TDS__GetDPAddressesResponse::operator=( const dm::TDS__GetDPAddressesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__DynamicDNSInformationExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__DynamicDNSInformationExtension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__DynamicDNSInformationExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__DynamicDNSInformationExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__DynamicDNSInformationExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DynamicDNSInformationExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__DynamicDNSInformationExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__DynamicDNSInformationExtension::TT__DynamicDNSInformationExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DynamicDNSInformationExtension::~TT__DynamicDNSInformationExtension()
{
}

dm::TT__DynamicDNSInformationExtension::TT__DynamicDNSInformationExtension( const dm::TT__DynamicDNSInformationExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__DynamicDNSInformationExtension&  dm::TT__DynamicDNSInformationExtension::operator=( const dm::TT__DynamicDNSInformationExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__FocusConfiguration20::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__AutoFocusMode mAutoFocusMode;
    float mDefaultSpeed;
    bool mDefaultSpeed_nil;
    float mNearLimit;
    bool mNearLimit_nil;
    float mFarLimit;
    bool mFarLimit_nil;
    dm::TT__FocusConfiguration20Extension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__FocusConfiguration20::PrivateDPtr::PrivateDPtr()
    : mDefaultSpeed(0), mDefaultSpeed_nil(true), mNearLimit(0), mNearLimit_nil(true), mFarLimit(0), mFarLimit_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__FocusConfiguration20::setAutoFocusMode( const dm::TT__AutoFocusMode& _autoFocusMode )
{
    d_ptr->mAutoFocusMode = _autoFocusMode;
}

dm::TT__AutoFocusMode dm::TT__FocusConfiguration20::autoFocusMode() const
{
    return d_ptr->mAutoFocusMode;
}

void dm::TT__FocusConfiguration20::setDefaultSpeed( float _defaultSpeed )
{
    d_ptr->mDefaultSpeed_nil = false;// converter_complextype.cpp:277
    d_ptr->mDefaultSpeed = _defaultSpeed;
}

float dm::TT__FocusConfiguration20::defaultSpeed() const
{
    return d_ptr->mDefaultSpeed;
}

void dm::TT__FocusConfiguration20::setNearLimit( float _nearLimit )
{
    d_ptr->mNearLimit_nil = false;// converter_complextype.cpp:277
    d_ptr->mNearLimit = _nearLimit;
}

float dm::TT__FocusConfiguration20::nearLimit() const
{
    return d_ptr->mNearLimit;
}

void dm::TT__FocusConfiguration20::setFarLimit( float _farLimit )
{
    d_ptr->mFarLimit_nil = false;// converter_complextype.cpp:277
    d_ptr->mFarLimit = _farLimit;
}

float dm::TT__FocusConfiguration20::farLimit() const
{
    return d_ptr->mFarLimit;
}

void dm::TT__FocusConfiguration20::setExtension( const dm::TT__FocusConfiguration20Extension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__FocusConfiguration20Extension dm::TT__FocusConfiguration20::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__FocusConfiguration20::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__FocusConfiguration20::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__FocusConfiguration20::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("FocusConfiguration20"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueAutoFocusMode(QString::fromLatin1("AutoFocusMode"), d_ptr->mAutoFocusMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("AutoFocusMode"));// elementargumentserializer.cpp:110
    _valueAutoFocusMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueAutoFocusMode.setQualified(true);
    args.append(_valueAutoFocusMode);// elementargumentserializer.cpp:122
    if (!d_ptr->mDefaultSpeed_nil) {
        KDSoapValue _valueDefaultSpeed(QString::fromLatin1("DefaultSpeed"), QVariant::fromValue(d_ptr->mDefaultSpeed), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueDefaultSpeed.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDefaultSpeed.setQualified(true);
        if (!_valueDefaultSpeed.isNil())
        args.append(_valueDefaultSpeed);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mNearLimit_nil) {
        KDSoapValue _valueNearLimit(QString::fromLatin1("NearLimit"), QVariant::fromValue(d_ptr->mNearLimit), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueNearLimit.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueNearLimit.setQualified(true);
        if (!_valueNearLimit.isNil())
        args.append(_valueNearLimit);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mFarLimit_nil) {
        KDSoapValue _valueFarLimit(QString::fromLatin1("FarLimit"), QVariant::fromValue(d_ptr->mFarLimit), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueFarLimit.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueFarLimit.setQualified(true);
        if (!_valueFarLimit.isNil())
        args.append(_valueFarLimit);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__FocusConfiguration20::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("AutoFocusMode")) {// converter_complextype.cpp:354
            d_ptr->mAutoFocusMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("DefaultSpeed")) {// converter_complextype.cpp:354
            d_ptr->mDefaultSpeed = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mDefaultSpeed_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("NearLimit")) {// converter_complextype.cpp:354
            d_ptr->mNearLimit = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mNearLimit_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("FarLimit")) {// converter_complextype.cpp:354
            d_ptr->mFarLimit = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mFarLimit_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__FocusConfiguration20::TT__FocusConfiguration20()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__FocusConfiguration20::~TT__FocusConfiguration20()
{
}

dm::TT__FocusConfiguration20::TT__FocusConfiguration20( const dm::TT__FocusConfiguration20& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__FocusConfiguration20&  dm::TT__FocusConfiguration20::operator=( const dm::TT__FocusConfiguration20& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__DeleteUsersResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("DeleteUsersResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__DeleteUsersResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__DeleteUsersResponse::TDS__DeleteUsersResponse()
{
}

dm::TDS__DeleteUsersResponse::~TDS__DeleteUsersResponse()
{
}


class dm::TT__NetworkProtocol::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__NetworkProtocolType mName;
    bool mEnabled;
    QList< int > mPort;
    dm::TT__NetworkProtocolExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__NetworkProtocol::PrivateDPtr::PrivateDPtr()
    : mEnabled(false), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__NetworkProtocol::setName( const dm::TT__NetworkProtocolType& _name )
{
    d_ptr->mName = _name;
}

dm::TT__NetworkProtocolType dm::TT__NetworkProtocol::name() const
{
    return d_ptr->mName;
}

void dm::TT__NetworkProtocol::setEnabled( bool _enabled )
{
    d_ptr->mEnabled = _enabled;
}

bool dm::TT__NetworkProtocol::enabled() const
{
    return d_ptr->mEnabled;
}

void dm::TT__NetworkProtocol::setPort( const QList< int >& _port )
{
    d_ptr->mPort = _port;
}

QList< int > dm::TT__NetworkProtocol::port() const
{
    return d_ptr->mPort;
}

void dm::TT__NetworkProtocol::setExtension( const dm::TT__NetworkProtocolExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__NetworkProtocolExtension dm::TT__NetworkProtocol::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__NetworkProtocol::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__NetworkProtocol::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__NetworkProtocol::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkProtocol"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueName(QString::fromLatin1("Name"), d_ptr->mName.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkProtocolType"));// elementargumentserializer.cpp:110
    _valueName.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueName.setQualified(true);
    args.append(_valueName);// elementargumentserializer.cpp:122
    KDSoapValue _valueEnabled(QString::fromLatin1("Enabled"), QVariant::fromValue(d_ptr->mEnabled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueEnabled.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueEnabled.setQualified(true);
    args.append(_valueEnabled);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mPort.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valuePort(QString::fromLatin1("Port"), QVariant::fromValue(d_ptr->mPort.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valuePort.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valuePort.setQualified(true);
        args.append(_valuePort);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__NetworkProtocol::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Name")) {// converter_complextype.cpp:354
            d_ptr->mName.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Enabled")) {// converter_complextype.cpp:354
            d_ptr->mEnabled = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Port")) {// converter_complextype.cpp:354
            int mPortTemp;// converter_complextype.cpp:412
            mPortTemp = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mPort.append(mPortTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__NetworkProtocol::TT__NetworkProtocol()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkProtocol::~TT__NetworkProtocol()
{
}

dm::TT__NetworkProtocol::TT__NetworkProtocol( const dm::TT__NetworkProtocol& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkProtocol&  dm::TT__NetworkProtocol::operator=( const dm::TT__NetworkProtocol& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetEndpointReferenceResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mGUID;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TDS__GetEndpointReferenceResponse::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TDS__GetEndpointReferenceResponse::setGUID( const QString& _gUID )
{
    d_ptr->mGUID = _gUID;
}

QString dm::TDS__GetEndpointReferenceResponse::gUID() const
{
    return d_ptr->mGUID;
}

void dm::TDS__GetEndpointReferenceResponse::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TDS__GetEndpointReferenceResponse::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TDS__GetEndpointReferenceResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetEndpointReferenceResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueGUID(QString::fromLatin1("GUID"), QVariant::fromValue(d_ptr->mGUID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueGUID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGUID.setQualified(true);
    args.append(_valueGUID);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TDS__GetEndpointReferenceResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GUID")) {// converter_complextype.cpp:354
            d_ptr->mGUID = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TDS__GetEndpointReferenceResponse::TDS__GetEndpointReferenceResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetEndpointReferenceResponse::~TDS__GetEndpointReferenceResponse()
{
}

dm::TDS__GetEndpointReferenceResponse::TDS__GetEndpointReferenceResponse( const dm::TDS__GetEndpointReferenceResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetEndpointReferenceResponse&  dm::TDS__GetEndpointReferenceResponse::operator=( const dm::TDS__GetEndpointReferenceResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetStorageConfigurationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetStorageConfigurationResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetStorageConfigurationResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetStorageConfigurationResponse::TDS__SetStorageConfigurationResponse()
{
}

dm::TDS__SetStorageConfigurationResponse::~TDS__SetStorageConfigurationResponse()
{
}


class dm::TDS__RemoveScopes::PrivateDPtr : public QSharedData
{
public:
    QStringList mScopeItem;
};

void dm::TDS__RemoveScopes::setScopeItem( const QStringList& _scopeItem )
{
    d_ptr->mScopeItem = _scopeItem;
}

QStringList dm::TDS__RemoveScopes::scopeItem() const
{
    return d_ptr->mScopeItem;
}

KDSoapValue dm::TDS__RemoveScopes::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("RemoveScopes"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mScopeItem.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueScopeItem(QString::fromLatin1("ScopeItem"), QVariant::fromValue(d_ptr->mScopeItem.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
        _valueScopeItem.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueScopeItem.setQualified(true);
        args.append(_valueScopeItem);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__RemoveScopes::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ScopeItem")) {// converter_complextype.cpp:354
            QString mScopeItemTemp;// converter_complextype.cpp:412
            mScopeItemTemp = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mScopeItem.append(mScopeItemTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__RemoveScopes::TDS__RemoveScopes()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__RemoveScopes::~TDS__RemoveScopes()
{
}

dm::TDS__RemoveScopes::TDS__RemoveScopes( const dm::TDS__RemoveScopes& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__RemoveScopes&  dm::TDS__RemoveScopes::operator=( const dm::TDS__RemoveScopes& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetDiscoveryModeResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetDiscoveryModeResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetDiscoveryModeResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetDiscoveryModeResponse::TDS__SetDiscoveryModeResponse()
{
}

dm::TDS__SetDiscoveryModeResponse::~TDS__SetDiscoveryModeResponse()
{
}


class dm::TT__WhiteBalance20Extension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__WhiteBalance20Extension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__WhiteBalance20Extension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__WhiteBalance20Extension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__WhiteBalance20Extension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("WhiteBalance20Extension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__WhiteBalance20Extension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__WhiteBalance20Extension::TT__WhiteBalance20Extension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__WhiteBalance20Extension::~TT__WhiteBalance20Extension()
{
}

dm::TT__WhiteBalance20Extension::TT__WhiteBalance20Extension( const dm::TT__WhiteBalance20Extension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__WhiteBalance20Extension&  dm::TT__WhiteBalance20Extension::operator=( const dm::TT__WhiteBalance20Extension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Dot1XConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__ReferenceToken mDot1XConfigurationToken;
    QString mIdentity;
    QString mAnonymousID;
    bool mAnonymousID_nil;
    int mEAPMethod;
    QStringList mCACertificateID;
    bool mCACertificateID_nil;
    dm::TT__EAPMethodConfiguration mEAPMethodConfiguration;
    bool mEAPMethodConfiguration_nil;
    dm::TT__Dot1XConfigurationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__Dot1XConfiguration::PrivateDPtr::PrivateDPtr()
    : mAnonymousID_nil(true), mEAPMethod(0), mCACertificateID_nil(true), mEAPMethodConfiguration_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__Dot1XConfiguration::setDot1XConfigurationToken( const dm::TT__ReferenceToken& _dot1XConfigurationToken )
{
    d_ptr->mDot1XConfigurationToken = _dot1XConfigurationToken;
}

dm::TT__ReferenceToken dm::TT__Dot1XConfiguration::dot1XConfigurationToken() const
{
    return d_ptr->mDot1XConfigurationToken;
}

void dm::TT__Dot1XConfiguration::setIdentity( const QString& _identity )
{
    d_ptr->mIdentity = _identity;
}

QString dm::TT__Dot1XConfiguration::identity() const
{
    return d_ptr->mIdentity;
}

void dm::TT__Dot1XConfiguration::setAnonymousID( const QString& _anonymousID )
{
    d_ptr->mAnonymousID_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnonymousID = _anonymousID;
}

QString dm::TT__Dot1XConfiguration::anonymousID() const
{
    return d_ptr->mAnonymousID;
}

void dm::TT__Dot1XConfiguration::setEAPMethod( int _eAPMethod )
{
    d_ptr->mEAPMethod = _eAPMethod;
}

int dm::TT__Dot1XConfiguration::eAPMethod() const
{
    return d_ptr->mEAPMethod;
}

void dm::TT__Dot1XConfiguration::setCACertificateID( const QStringList& _cACertificateID )
{
    d_ptr->mCACertificateID_nil = false;// converter_complextype.cpp:277
    d_ptr->mCACertificateID = _cACertificateID;
}

QStringList dm::TT__Dot1XConfiguration::cACertificateID() const
{
    return d_ptr->mCACertificateID;
}

void dm::TT__Dot1XConfiguration::setEAPMethodConfiguration( const dm::TT__EAPMethodConfiguration& _eAPMethodConfiguration )
{
    d_ptr->mEAPMethodConfiguration_nil = false;// converter_complextype.cpp:277
    d_ptr->mEAPMethodConfiguration = _eAPMethodConfiguration;
}

dm::TT__EAPMethodConfiguration dm::TT__Dot1XConfiguration::eAPMethodConfiguration() const
{
    return d_ptr->mEAPMethodConfiguration;
}

void dm::TT__Dot1XConfiguration::setExtension( const dm::TT__Dot1XConfigurationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__Dot1XConfigurationExtension dm::TT__Dot1XConfiguration::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__Dot1XConfiguration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__Dot1XConfiguration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__Dot1XConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot1XConfiguration"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueDot1XConfigurationToken(QString::fromLatin1("Dot1XConfigurationToken"), d_ptr->mDot1XConfigurationToken.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("ReferenceToken"));// elementargumentserializer.cpp:110
    _valueDot1XConfigurationToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDot1XConfigurationToken.setQualified(true);
    args.append(_valueDot1XConfigurationToken);// elementargumentserializer.cpp:122
    KDSoapValue _valueIdentity(QString::fromLatin1("Identity"), QVariant::fromValue(d_ptr->mIdentity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueIdentity.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueIdentity.setQualified(true);
    args.append(_valueIdentity);// elementargumentserializer.cpp:122
    if (!d_ptr->mAnonymousID_nil) {
        KDSoapValue _valueAnonymousID(QString::fromLatin1("AnonymousID"), QVariant::fromValue(d_ptr->mAnonymousID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueAnonymousID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAnonymousID.setQualified(true);
        if (!_valueAnonymousID.isNil())
        args.append(_valueAnonymousID);// elementargumentserializer.cpp:122
    }
    KDSoapValue _valueEAPMethod(QString::fromLatin1("EAPMethod"), QVariant::fromValue(d_ptr->mEAPMethod), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueEAPMethod.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueEAPMethod.setQualified(true);
    args.append(_valueEAPMethod);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mCACertificateID.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueCACertificateID(QString::fromLatin1("CACertificateID"), QVariant::fromValue(d_ptr->mCACertificateID.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
        _valueCACertificateID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueCACertificateID.setQualified(true);
        args.append(_valueCACertificateID);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mEAPMethodConfiguration_nil) {
        KDSoapValue _valueEAPMethodConfiguration(d_ptr->mEAPMethodConfiguration.serialize(QString::fromLatin1("EAPMethodConfiguration")));// elementargumentserializer.cpp:102
        _valueEAPMethodConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueEAPMethodConfiguration.setQualified(true);
        if (!_valueEAPMethodConfiguration.isNil())
        args.append(_valueEAPMethodConfiguration);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Dot1XConfiguration::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Dot1XConfigurationToken")) {// converter_complextype.cpp:354
            d_ptr->mDot1XConfigurationToken.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Identity")) {// converter_complextype.cpp:354
            d_ptr->mIdentity = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("AnonymousID")) {// converter_complextype.cpp:354
            d_ptr->mAnonymousID = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mAnonymousID_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("EAPMethod")) {// converter_complextype.cpp:354
            d_ptr->mEAPMethod = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("CACertificateID")) {// converter_complextype.cpp:354
            QString mCACertificateIDTemp;// converter_complextype.cpp:412
            mCACertificateIDTemp = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mCACertificateID.append(mCACertificateIDTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("EAPMethodConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mEAPMethodConfiguration.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__Dot1XConfiguration::TT__Dot1XConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Dot1XConfiguration::~TT__Dot1XConfiguration()
{
}

dm::TT__Dot1XConfiguration::TT__Dot1XConfiguration( const dm::TT__Dot1XConfiguration& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Dot1XConfiguration&  dm::TT__Dot1XConfiguration::operator=( const dm::TT__Dot1XConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__CreateCertificateResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TT__Certificate mNvtCertificate;
};

void dm::TDS__CreateCertificateResponse::setNvtCertificate( const dm::TT__Certificate& _nvtCertificate )
{
    d_ptr->mNvtCertificate = _nvtCertificate;
}

dm::TT__Certificate dm::TDS__CreateCertificateResponse::nvtCertificate() const
{
    return d_ptr->mNvtCertificate;
}

KDSoapValue dm::TDS__CreateCertificateResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("CreateCertificateResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueNvtCertificate(d_ptr->mNvtCertificate.serialize(QString::fromLatin1("NvtCertificate")));// elementargumentserializer.cpp:102
    _valueNvtCertificate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueNvtCertificate.setQualified(true);
    args.append(_valueNvtCertificate);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__CreateCertificateResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("NvtCertificate")) {// converter_complextype.cpp:354
            d_ptr->mNvtCertificate.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__CreateCertificateResponse::TDS__CreateCertificateResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__CreateCertificateResponse::~TDS__CreateCertificateResponse()
{
}

dm::TDS__CreateCertificateResponse::TDS__CreateCertificateResponse( const dm::TDS__CreateCertificateResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__CreateCertificateResponse&  dm::TDS__CreateCertificateResponse::operator=( const dm::TDS__CreateCertificateResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__RelayOutputSettings::PrivateDPtr : public QSharedData
{
public:
    dm::TT__RelayMode mMode;
    QString mDelayTime;
    dm::TT__RelayIdleState mIdleState;
};

void dm::TT__RelayOutputSettings::setMode( const dm::TT__RelayMode& _mode )
{
    d_ptr->mMode = _mode;
}

dm::TT__RelayMode dm::TT__RelayOutputSettings::mode() const
{
    return d_ptr->mMode;
}

void dm::TT__RelayOutputSettings::setDelayTime( const QString& _delayTime )
{
    d_ptr->mDelayTime = _delayTime;
}

QString dm::TT__RelayOutputSettings::delayTime() const
{
    return d_ptr->mDelayTime;
}

void dm::TT__RelayOutputSettings::setIdleState( const dm::TT__RelayIdleState& _idleState )
{
    d_ptr->mIdleState = _idleState;
}

dm::TT__RelayIdleState dm::TT__RelayOutputSettings::idleState() const
{
    return d_ptr->mIdleState;
}

KDSoapValue dm::TT__RelayOutputSettings::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("RelayOutputSettings"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueMode(QString::fromLatin1("Mode"), d_ptr->mMode.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("RelayMode"));// elementargumentserializer.cpp:110
    _valueMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMode.setQualified(true);
    args.append(_valueMode);// elementargumentserializer.cpp:122
    KDSoapValue _valueDelayTime(QString::fromLatin1("DelayTime"), QVariant::fromValue(d_ptr->mDelayTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// elementargumentserializer.cpp:108
    _valueDelayTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueDelayTime.setQualified(true);
    args.append(_valueDelayTime);// elementargumentserializer.cpp:122
    KDSoapValue _valueIdleState(QString::fromLatin1("IdleState"), d_ptr->mIdleState.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("RelayIdleState"));// elementargumentserializer.cpp:110
    _valueIdleState.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueIdleState.setQualified(true);
    args.append(_valueIdleState);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__RelayOutputSettings::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Mode")) {// converter_complextype.cpp:354
            d_ptr->mMode.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("DelayTime")) {// converter_complextype.cpp:354
            d_ptr->mDelayTime = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("IdleState")) {// converter_complextype.cpp:354
            d_ptr->mIdleState.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TT__RelayOutputSettings::TT__RelayOutputSettings()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__RelayOutputSettings::~TT__RelayOutputSettings()
{
}

dm::TT__RelayOutputSettings::TT__RelayOutputSettings( const dm::TT__RelayOutputSettings& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__RelayOutputSettings&  dm::TT__RelayOutputSettings::operator=( const dm::TT__RelayOutputSettings& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__Extension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TDS__Extension::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TDS__Extension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TDS__Extension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TDS__Extension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("Extension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TDS__Extension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TDS__Extension::TDS__Extension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__Extension::~TDS__Extension()
{
}

dm::TDS__Extension::TDS__Extension( const dm::TDS__Extension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__Extension&  dm::TDS__Extension::operator=( const dm::TDS__Extension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetDPAddresses::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetDPAddresses"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetDPAddresses::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetDPAddresses::TDS__GetDPAddresses()
{
}

dm::TDS__GetDPAddresses::~TDS__GetDPAddresses()
{
}


KDSoapValue dm::TDS__SetNetworkProtocolsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetNetworkProtocolsResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetNetworkProtocolsResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetNetworkProtocolsResponse::TDS__SetNetworkProtocolsResponse()
{
}

dm::TDS__SetNetworkProtocolsResponse::~TDS__SetNetworkProtocolsResponse()
{
}


class dm::TDS__GetRelayOutputsResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__RelayOutput > mRelayOutputs;
    bool mRelayOutputs_nil;
};

dm::TDS__GetRelayOutputsResponse::PrivateDPtr::PrivateDPtr()
    : mRelayOutputs_nil(true)
{
}


void dm::TDS__GetRelayOutputsResponse::setRelayOutputs( const QList< dm::TT__RelayOutput >& _relayOutputs )
{
    d_ptr->mRelayOutputs_nil = false;// converter_complextype.cpp:277
    d_ptr->mRelayOutputs = _relayOutputs;
}

QList< dm::TT__RelayOutput > dm::TDS__GetRelayOutputsResponse::relayOutputs() const
{
    return d_ptr->mRelayOutputs;
}

KDSoapValue dm::TDS__GetRelayOutputsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetRelayOutputsResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mRelayOutputs.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueRelayOutputs(d_ptr->mRelayOutputs.at(i).serialize(QString::fromLatin1("RelayOutputs")));// elementargumentserializer.cpp:102
        _valueRelayOutputs.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueRelayOutputs.setQualified(true);
        args.append(_valueRelayOutputs);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetRelayOutputsResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("RelayOutputs")) {// converter_complextype.cpp:354
            dm::TT__RelayOutput mRelayOutputsTemp;// converter_complextype.cpp:412
            mRelayOutputsTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mRelayOutputs.append(mRelayOutputsTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetRelayOutputsResponse::TDS__GetRelayOutputsResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetRelayOutputsResponse::~TDS__GetRelayOutputsResponse()
{
}

dm::TDS__GetRelayOutputsResponse::TDS__GetRelayOutputsResponse( const dm::TDS__GetRelayOutputsResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetRelayOutputsResponse&  dm::TDS__GetRelayOutputsResponse::operator=( const dm::TDS__GetRelayOutputsResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__SetZeroConfigurationResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetZeroConfigurationResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__SetZeroConfigurationResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__SetZeroConfigurationResponse::TDS__SetZeroConfigurationResponse()
{
}

dm::TDS__SetZeroConfigurationResponse::~TDS__SetZeroConfigurationResponse()
{
}


class dm::TT__Certificate::PrivateDPtr : public QSharedData
{
public:
    QString mCertificateID;
    dm::TT__BinaryData mCertificate;
};

void dm::TT__Certificate::setCertificateID( const QString& _certificateID )
{
    d_ptr->mCertificateID = _certificateID;
}

QString dm::TT__Certificate::certificateID() const
{
    return d_ptr->mCertificateID;
}

void dm::TT__Certificate::setCertificate( const dm::TT__BinaryData& _certificate )
{
    d_ptr->mCertificate = _certificate;
}

dm::TT__BinaryData dm::TT__Certificate::certificate() const
{
    return d_ptr->mCertificate;
}

KDSoapValue dm::TT__Certificate::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Certificate"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueCertificateID(QString::fromLatin1("CertificateID"), QVariant::fromValue(d_ptr->mCertificateID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
    _valueCertificateID.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueCertificateID.setQualified(true);
    args.append(_valueCertificateID);// elementargumentserializer.cpp:122
    KDSoapValue _valueCertificate(d_ptr->mCertificate.serialize(QString::fromLatin1("Certificate")));// elementargumentserializer.cpp:102
    _valueCertificate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueCertificate.setQualified(true);
    args.append(_valueCertificate);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__Certificate::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CertificateID")) {// converter_complextype.cpp:354
            d_ptr->mCertificateID = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Certificate")) {// converter_complextype.cpp:354
            d_ptr->mCertificate.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TT__Certificate::TT__Certificate()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Certificate::~TT__Certificate()
{
}

dm::TT__Certificate::TT__Certificate( const dm::TT__Certificate& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Certificate&  dm::TT__Certificate::operator=( const dm::TT__Certificate& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetCertificatesStatus::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetCertificatesStatus"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetCertificatesStatus::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetCertificatesStatus::TDS__GetCertificatesStatus()
{
}

dm::TDS__GetCertificatesStatus::~TDS__GetCertificatesStatus()
{
}


class dm::TT__IOCapabilitiesExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mAuxiliary;
    bool mAuxiliary_nil;
    QList< dm::TT__AuxiliaryData > mAuxiliaryCommands;
    bool mAuxiliaryCommands_nil;
    dm::TT__IOCapabilitiesExtension2 mExtension;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__IOCapabilitiesExtension::PrivateDPtr::PrivateDPtr()
    : mAuxiliary(false), mAuxiliary_nil(true), mAuxiliaryCommands_nil(true), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__IOCapabilitiesExtension::setAuxiliary( bool _auxiliary )
{
    d_ptr->mAuxiliary_nil = false;// converter_complextype.cpp:277
    d_ptr->mAuxiliary = _auxiliary;
}

bool dm::TT__IOCapabilitiesExtension::auxiliary() const
{
    return d_ptr->mAuxiliary;
}

void dm::TT__IOCapabilitiesExtension::setAuxiliaryCommands( const QList< dm::TT__AuxiliaryData >& _auxiliaryCommands )
{
    d_ptr->mAuxiliaryCommands_nil = false;// converter_complextype.cpp:277
    d_ptr->mAuxiliaryCommands = _auxiliaryCommands;
}

QList< dm::TT__AuxiliaryData > dm::TT__IOCapabilitiesExtension::auxiliaryCommands() const
{
    return d_ptr->mAuxiliaryCommands;
}

void dm::TT__IOCapabilitiesExtension::setExtension( const dm::TT__IOCapabilitiesExtension2& _extension )
{
    d_ptr->mExtension = _extension;
}

dm::TT__IOCapabilitiesExtension2 dm::TT__IOCapabilitiesExtension::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__IOCapabilitiesExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__IOCapabilitiesExtension::any() const
{
    return d_ptr->mAny;
}

void dm::TT__IOCapabilitiesExtension::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__IOCapabilitiesExtension::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__IOCapabilitiesExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IOCapabilitiesExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mAuxiliary_nil) {
        KDSoapValue _valueAuxiliary(QString::fromLatin1("Auxiliary"), QVariant::fromValue(d_ptr->mAuxiliary), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueAuxiliary.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAuxiliary.setQualified(true);
        if (!_valueAuxiliary.isNil())
        args.append(_valueAuxiliary);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAuxiliaryCommands.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueAuxiliaryCommands(QString::fromLatin1("AuxiliaryCommands"), d_ptr->mAuxiliaryCommands.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("AuxiliaryData"));// elementargumentserializer.cpp:110
        _valueAuxiliaryCommands.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAuxiliaryCommands.setQualified(true);
        args.append(_valueAuxiliaryCommands);// elementargumentserializer.cpp:122
    }
    KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
    _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueExtension.setQualified(true);
    args.append(_valueExtension);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__IOCapabilitiesExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Auxiliary")) {// converter_complextype.cpp:354
            d_ptr->mAuxiliary = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mAuxiliary_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("AuxiliaryCommands")) {// converter_complextype.cpp:354
            dm::TT__AuxiliaryData mAuxiliaryCommandsTemp;// converter_complextype.cpp:412
            mAuxiliaryCommandsTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mAuxiliaryCommands.append(mAuxiliaryCommandsTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__IOCapabilitiesExtension::TT__IOCapabilitiesExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IOCapabilitiesExtension::~TT__IOCapabilitiesExtension()
{
}

dm::TT__IOCapabilitiesExtension::TT__IOCapabilitiesExtension( const dm::TT__IOCapabilitiesExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IOCapabilitiesExtension&  dm::TT__IOCapabilitiesExtension::operator=( const dm::TT__IOCapabilitiesExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__NetworkCapabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mIPFilter;
    bool mIPFilter_nil;
    bool mZeroConfiguration;
    bool mZeroConfiguration_nil;
    bool mIPVersion6;
    bool mIPVersion6_nil;
    bool mDynDNS;
    bool mDynDNS_nil;
    dm::TT__NetworkCapabilitiesExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__NetworkCapabilities::PrivateDPtr::PrivateDPtr()
    : mIPFilter(false), mIPFilter_nil(true), mZeroConfiguration(false), mZeroConfiguration_nil(true), mIPVersion6(false), mIPVersion6_nil(true), mDynDNS(false), mDynDNS_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__NetworkCapabilities::setIPFilter( bool _iPFilter )
{
    d_ptr->mIPFilter_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPFilter = _iPFilter;
}

bool dm::TT__NetworkCapabilities::iPFilter() const
{
    return d_ptr->mIPFilter;
}

void dm::TT__NetworkCapabilities::setZeroConfiguration( bool _zeroConfiguration )
{
    d_ptr->mZeroConfiguration_nil = false;// converter_complextype.cpp:277
    d_ptr->mZeroConfiguration = _zeroConfiguration;
}

bool dm::TT__NetworkCapabilities::zeroConfiguration() const
{
    return d_ptr->mZeroConfiguration;
}

void dm::TT__NetworkCapabilities::setIPVersion6( bool _iPVersion6 )
{
    d_ptr->mIPVersion6_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPVersion6 = _iPVersion6;
}

bool dm::TT__NetworkCapabilities::iPVersion6() const
{
    return d_ptr->mIPVersion6;
}

void dm::TT__NetworkCapabilities::setDynDNS( bool _dynDNS )
{
    d_ptr->mDynDNS_nil = false;// converter_complextype.cpp:277
    d_ptr->mDynDNS = _dynDNS;
}

bool dm::TT__NetworkCapabilities::dynDNS() const
{
    return d_ptr->mDynDNS;
}

void dm::TT__NetworkCapabilities::setExtension( const dm::TT__NetworkCapabilitiesExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__NetworkCapabilitiesExtension dm::TT__NetworkCapabilities::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__NetworkCapabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__NetworkCapabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__NetworkCapabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkCapabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mIPFilter_nil) {
        KDSoapValue _valueIPFilter(QString::fromLatin1("IPFilter"), QVariant::fromValue(d_ptr->mIPFilter), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueIPFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPFilter.setQualified(true);
        if (!_valueIPFilter.isNil())
        args.append(_valueIPFilter);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mZeroConfiguration_nil) {
        KDSoapValue _valueZeroConfiguration(QString::fromLatin1("ZeroConfiguration"), QVariant::fromValue(d_ptr->mZeroConfiguration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueZeroConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueZeroConfiguration.setQualified(true);
        if (!_valueZeroConfiguration.isNil())
        args.append(_valueZeroConfiguration);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mIPVersion6_nil) {
        KDSoapValue _valueIPVersion6(QString::fromLatin1("IPVersion6"), QVariant::fromValue(d_ptr->mIPVersion6), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueIPVersion6.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPVersion6.setQualified(true);
        if (!_valueIPVersion6.isNil())
        args.append(_valueIPVersion6);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mDynDNS_nil) {
        KDSoapValue _valueDynDNS(QString::fromLatin1("DynDNS"), QVariant::fromValue(d_ptr->mDynDNS), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueDynDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueDynDNS.setQualified(true);
        if (!_valueDynDNS.isNil())
        args.append(_valueDynDNS);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__NetworkCapabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("IPFilter")) {// converter_complextype.cpp:354
            d_ptr->mIPFilter = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mIPFilter_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("ZeroConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mZeroConfiguration = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mZeroConfiguration_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("IPVersion6")) {// converter_complextype.cpp:354
            d_ptr->mIPVersion6 = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mIPVersion6_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("DynDNS")) {// converter_complextype.cpp:354
            d_ptr->mDynDNS = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mDynDNS_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__NetworkCapabilities::TT__NetworkCapabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkCapabilities::~TT__NetworkCapabilities()
{
}

dm::TT__NetworkCapabilities::TT__NetworkCapabilities( const dm::TT__NetworkCapabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkCapabilities&  dm::TT__NetworkCapabilities::operator=( const dm::TT__NetworkCapabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__DeleteCertificatesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("DeleteCertificatesResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__DeleteCertificatesResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__DeleteCertificatesResponse::TDS__DeleteCertificatesResponse()
{
}

dm::TDS__DeleteCertificatesResponse::~TDS__DeleteCertificatesResponse()
{
}


class dm::TT__NetworkInterfaceLink::PrivateDPtr : public QSharedData
{
public:
    dm::TT__NetworkInterfaceConnectionSetting mAdminSettings;
    dm::TT__NetworkInterfaceConnectionSetting mOperSettings;
    dm::TT__IANA_IfTypes mInterfaceType;
};

void dm::TT__NetworkInterfaceLink::setAdminSettings( const dm::TT__NetworkInterfaceConnectionSetting& _adminSettings )
{
    d_ptr->mAdminSettings = _adminSettings;
}

dm::TT__NetworkInterfaceConnectionSetting dm::TT__NetworkInterfaceLink::adminSettings() const
{
    return d_ptr->mAdminSettings;
}

void dm::TT__NetworkInterfaceLink::setOperSettings( const dm::TT__NetworkInterfaceConnectionSetting& _operSettings )
{
    d_ptr->mOperSettings = _operSettings;
}

dm::TT__NetworkInterfaceConnectionSetting dm::TT__NetworkInterfaceLink::operSettings() const
{
    return d_ptr->mOperSettings;
}

void dm::TT__NetworkInterfaceLink::setInterfaceType( const dm::TT__IANA_IfTypes& _interfaceType )
{
    d_ptr->mInterfaceType = _interfaceType;
}

dm::TT__IANA_IfTypes dm::TT__NetworkInterfaceLink::interfaceType() const
{
    return d_ptr->mInterfaceType;
}

KDSoapValue dm::TT__NetworkInterfaceLink::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkInterfaceLink"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueAdminSettings(d_ptr->mAdminSettings.serialize(QString::fromLatin1("AdminSettings")));// elementargumentserializer.cpp:102
    _valueAdminSettings.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueAdminSettings.setQualified(true);
    args.append(_valueAdminSettings);// elementargumentserializer.cpp:122
    KDSoapValue _valueOperSettings(d_ptr->mOperSettings.serialize(QString::fromLatin1("OperSettings")));// elementargumentserializer.cpp:102
    _valueOperSettings.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueOperSettings.setQualified(true);
    args.append(_valueOperSettings);// elementargumentserializer.cpp:122
    KDSoapValue _valueInterfaceType(QString::fromLatin1("InterfaceType"), d_ptr->mInterfaceType.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IANA-IfTypes"));// elementargumentserializer.cpp:110
    _valueInterfaceType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueInterfaceType.setQualified(true);
    args.append(_valueInterfaceType);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__NetworkInterfaceLink::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("AdminSettings")) {// converter_complextype.cpp:354
            d_ptr->mAdminSettings.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("OperSettings")) {// converter_complextype.cpp:354
            d_ptr->mOperSettings.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("InterfaceType")) {// converter_complextype.cpp:354
            d_ptr->mInterfaceType.deserialize(val.value());// converter_complextype.cpp:373
        }
    }
}

dm::TT__NetworkInterfaceLink::TT__NetworkInterfaceLink()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkInterfaceLink::~TT__NetworkInterfaceLink()
{
}

dm::TT__NetworkInterfaceLink::TT__NetworkInterfaceLink( const dm::TT__NetworkInterfaceLink& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkInterfaceLink&  dm::TT__NetworkInterfaceLink::operator=( const dm::TT__NetworkInterfaceLink& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__RemoveIPAddressFilterResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("RemoveIPAddressFilterResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__RemoveIPAddressFilterResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__RemoveIPAddressFilterResponse::TDS__RemoveIPAddressFilterResponse()
{
}

dm::TDS__RemoveIPAddressFilterResponse::~TDS__RemoveIPAddressFilterResponse()
{
}


class dm::TT__NetworkCapabilitiesExtension2::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__NetworkCapabilitiesExtension2::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__NetworkCapabilitiesExtension2::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__NetworkCapabilitiesExtension2::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__NetworkCapabilitiesExtension2::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkCapabilitiesExtension2"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__NetworkCapabilitiesExtension2::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__NetworkCapabilitiesExtension2::TT__NetworkCapabilitiesExtension2()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkCapabilitiesExtension2::~TT__NetworkCapabilitiesExtension2()
{
}

dm::TT__NetworkCapabilitiesExtension2::TT__NetworkCapabilitiesExtension2( const dm::TT__NetworkCapabilitiesExtension2& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__NetworkCapabilitiesExtension2&  dm::TT__NetworkCapabilitiesExtension2::operator=( const dm::TT__NetworkCapabilitiesExtension2& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__VideoSourceExtension2::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__VideoSourceExtension2::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void dm::TT__VideoSourceExtension2::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__VideoSourceExtension2::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__VideoSourceExtension2::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("VideoSourceExtension2"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__VideoSourceExtension2::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__VideoSourceExtension2::TT__VideoSourceExtension2()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__VideoSourceExtension2::~TT__VideoSourceExtension2()
{
}

dm::TT__VideoSourceExtension2::TT__VideoSourceExtension2( const dm::TT__VideoSourceExtension2& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__VideoSourceExtension2&  dm::TT__VideoSourceExtension2::operator=( const dm::TT__VideoSourceExtension2& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue dm::TDS__GetNTP::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetNTP"));// converter_complextype.cpp:471
    return mainValue;
}

void dm::TDS__GetNTP::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

dm::TDS__GetNTP::TDS__GetNTP()
{
}

dm::TDS__GetNTP::~TDS__GetNTP()
{
}


class dm::TT__SystemCapabilitiesExtension::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mHttpFirmwareUpgrade;
    bool mHttpFirmwareUpgrade_nil;
    bool mHttpSystemBackup;
    bool mHttpSystemBackup_nil;
    bool mHttpSystemLogging;
    bool mHttpSystemLogging_nil;
    bool mHttpSupportInformation;
    bool mHttpSupportInformation_nil;
    dm::TT__SystemCapabilitiesExtension2 mExtension;
    bool mExtension_nil;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

dm::TT__SystemCapabilitiesExtension::PrivateDPtr::PrivateDPtr()
    : mHttpFirmwareUpgrade(false), mHttpFirmwareUpgrade_nil(true), mHttpSystemBackup(false), mHttpSystemBackup_nil(true), mHttpSystemLogging(false), mHttpSystemLogging_nil(true), mHttpSupportInformation(false), mHttpSupportInformation_nil(true), mExtension_nil(true), mAny_nil(true)
{
}


void dm::TT__SystemCapabilitiesExtension::setHttpFirmwareUpgrade( bool _httpFirmwareUpgrade )
{
    d_ptr->mHttpFirmwareUpgrade_nil = false;// converter_complextype.cpp:277
    d_ptr->mHttpFirmwareUpgrade = _httpFirmwareUpgrade;
}

bool dm::TT__SystemCapabilitiesExtension::httpFirmwareUpgrade() const
{
    return d_ptr->mHttpFirmwareUpgrade;
}

void dm::TT__SystemCapabilitiesExtension::setHttpSystemBackup( bool _httpSystemBackup )
{
    d_ptr->mHttpSystemBackup_nil = false;// converter_complextype.cpp:277
    d_ptr->mHttpSystemBackup = _httpSystemBackup;
}

bool dm::TT__SystemCapabilitiesExtension::httpSystemBackup() const
{
    return d_ptr->mHttpSystemBackup;
}

void dm::TT__SystemCapabilitiesExtension::setHttpSystemLogging( bool _httpSystemLogging )
{
    d_ptr->mHttpSystemLogging_nil = false;// converter_complextype.cpp:277
    d_ptr->mHttpSystemLogging = _httpSystemLogging;
}

bool dm::TT__SystemCapabilitiesExtension::httpSystemLogging() const
{
    return d_ptr->mHttpSystemLogging;
}

void dm::TT__SystemCapabilitiesExtension::setHttpSupportInformation( bool _httpSupportInformation )
{
    d_ptr->mHttpSupportInformation_nil = false;// converter_complextype.cpp:277
    d_ptr->mHttpSupportInformation = _httpSupportInformation;
}

bool dm::TT__SystemCapabilitiesExtension::httpSupportInformation() const
{
    return d_ptr->mHttpSupportInformation;
}

void dm::TT__SystemCapabilitiesExtension::setExtension( const dm::TT__SystemCapabilitiesExtension2& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__SystemCapabilitiesExtension2 dm::TT__SystemCapabilitiesExtension::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__SystemCapabilitiesExtension::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__SystemCapabilitiesExtension::any() const
{
    return d_ptr->mAny;
}

KDSoapValue dm::TT__SystemCapabilitiesExtension::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("SystemCapabilitiesExtension"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mHttpFirmwareUpgrade_nil) {
        KDSoapValue _valueHttpFirmwareUpgrade(QString::fromLatin1("HttpFirmwareUpgrade"), QVariant::fromValue(d_ptr->mHttpFirmwareUpgrade), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueHttpFirmwareUpgrade.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueHttpFirmwareUpgrade.setQualified(true);
        if (!_valueHttpFirmwareUpgrade.isNil())
        args.append(_valueHttpFirmwareUpgrade);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mHttpSystemBackup_nil) {
        KDSoapValue _valueHttpSystemBackup(QString::fromLatin1("HttpSystemBackup"), QVariant::fromValue(d_ptr->mHttpSystemBackup), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueHttpSystemBackup.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueHttpSystemBackup.setQualified(true);
        if (!_valueHttpSystemBackup.isNil())
        args.append(_valueHttpSystemBackup);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mHttpSystemLogging_nil) {
        KDSoapValue _valueHttpSystemLogging(QString::fromLatin1("HttpSystemLogging"), QVariant::fromValue(d_ptr->mHttpSystemLogging), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueHttpSystemLogging.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueHttpSystemLogging.setQualified(true);
        if (!_valueHttpSystemLogging.isNil())
        args.append(_valueHttpSystemLogging);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mHttpSupportInformation_nil) {
        KDSoapValue _valueHttpSupportInformation(QString::fromLatin1("HttpSupportInformation"), QVariant::fromValue(d_ptr->mHttpSupportInformation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueHttpSupportInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueHttpSupportInformation.setQualified(true);
        if (!_valueHttpSupportInformation.isNil())
        args.append(_valueHttpSupportInformation);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    return mainValue;
}

void dm::TT__SystemCapabilitiesExtension::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("HttpFirmwareUpgrade")) {// converter_complextype.cpp:354
            d_ptr->mHttpFirmwareUpgrade = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mHttpFirmwareUpgrade_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("HttpSystemBackup")) {// converter_complextype.cpp:354
            d_ptr->mHttpSystemBackup = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mHttpSystemBackup_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("HttpSystemLogging")) {// converter_complextype.cpp:354
            d_ptr->mHttpSystemLogging = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mHttpSystemLogging_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("HttpSupportInformation")) {// converter_complextype.cpp:354
            d_ptr->mHttpSupportInformation = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mHttpSupportInformation_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
}

dm::TT__SystemCapabilitiesExtension::TT__SystemCapabilitiesExtension()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__SystemCapabilitiesExtension::~TT__SystemCapabilitiesExtension()
{
}

dm::TT__SystemCapabilitiesExtension::TT__SystemCapabilitiesExtension( const dm::TT__SystemCapabilitiesExtension& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__SystemCapabilitiesExtension&  dm::TT__SystemCapabilitiesExtension::operator=( const dm::TT__SystemCapabilitiesExtension& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetDNS::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mFromDHCP;
    QStringList mSearchDomain;
    bool mSearchDomain_nil;
    QList< dm::TT__IPAddress > mDNSManual;
    bool mDNSManual_nil;
};

dm::TDS__SetDNS::PrivateDPtr::PrivateDPtr()
    : mFromDHCP(false), mSearchDomain_nil(true), mDNSManual_nil(true)
{
}


void dm::TDS__SetDNS::setFromDHCP( bool _fromDHCP )
{
    d_ptr->mFromDHCP = _fromDHCP;
}

bool dm::TDS__SetDNS::fromDHCP() const
{
    return d_ptr->mFromDHCP;
}

void dm::TDS__SetDNS::setSearchDomain( const QStringList& _searchDomain )
{
    d_ptr->mSearchDomain_nil = false;// converter_complextype.cpp:277
    d_ptr->mSearchDomain = _searchDomain;
}

QStringList dm::TDS__SetDNS::searchDomain() const
{
    return d_ptr->mSearchDomain;
}

void dm::TDS__SetDNS::setDNSManual( const QList< dm::TT__IPAddress >& _dNSManual )
{
    d_ptr->mDNSManual_nil = false;// converter_complextype.cpp:277
    d_ptr->mDNSManual = _dNSManual;
}

QList< dm::TT__IPAddress > dm::TDS__SetDNS::dNSManual() const
{
    return d_ptr->mDNSManual;
}

KDSoapValue dm::TDS__SetDNS::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetDNS"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueFromDHCP(QString::fromLatin1("FromDHCP"), QVariant::fromValue(d_ptr->mFromDHCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueFromDHCP.setQualified(true);
    args.append(_valueFromDHCP);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mSearchDomain.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueSearchDomain(QString::fromLatin1("SearchDomain"), QVariant::fromValue(d_ptr->mSearchDomain.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("token"));// elementargumentserializer.cpp:108
        _valueSearchDomain.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueSearchDomain.setQualified(true);
        args.append(_valueSearchDomain);// elementargumentserializer.cpp:122
    }
    for (int i = 0; i < d_ptr->mDNSManual.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueDNSManual(d_ptr->mDNSManual.at(i).serialize(QString::fromLatin1("DNSManual")));// elementargumentserializer.cpp:102
        _valueDNSManual.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueDNSManual.setQualified(true);
        args.append(_valueDNSManual);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__SetDNS::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("FromDHCP")) {// converter_complextype.cpp:354
            d_ptr->mFromDHCP = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("SearchDomain")) {// converter_complextype.cpp:354
            QString mSearchDomainTemp;// converter_complextype.cpp:412
            mSearchDomainTemp = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mSearchDomain.append(mSearchDomainTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("DNSManual")) {// converter_complextype.cpp:354
            dm::TT__IPAddress mDNSManualTemp;// converter_complextype.cpp:412
            mDNSManualTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mDNSManual.append(mDNSManualTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__SetDNS::TDS__SetDNS()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetDNS::~TDS__SetDNS()
{
}

dm::TDS__SetDNS::TDS__SetDNS( const dm::TDS__SetDNS& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetDNS&  dm::TDS__SetDNS::operator=( const dm::TDS__SetDNS& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetHostnameFromDHCPResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mRebootNeeded;
};

dm::TDS__SetHostnameFromDHCPResponse::PrivateDPtr::PrivateDPtr()
    : mRebootNeeded(false)
{
}


void dm::TDS__SetHostnameFromDHCPResponse::setRebootNeeded( bool _rebootNeeded )
{
    d_ptr->mRebootNeeded = _rebootNeeded;
}

bool dm::TDS__SetHostnameFromDHCPResponse::rebootNeeded() const
{
    return d_ptr->mRebootNeeded;
}

KDSoapValue dm::TDS__SetHostnameFromDHCPResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetHostnameFromDHCPResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueRebootNeeded(QString::fromLatin1("RebootNeeded"), QVariant::fromValue(d_ptr->mRebootNeeded), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueRebootNeeded.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRebootNeeded.setQualified(true);
    args.append(_valueRebootNeeded);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetHostnameFromDHCPResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("RebootNeeded")) {// converter_complextype.cpp:354
            d_ptr->mRebootNeeded = val.value().value<bool>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__SetHostnameFromDHCPResponse::TDS__SetHostnameFromDHCPResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetHostnameFromDHCPResponse::~TDS__SetHostnameFromDHCPResponse()
{
}

dm::TDS__SetHostnameFromDHCPResponse::TDS__SetHostnameFromDHCPResponse( const dm::TDS__SetHostnameFromDHCPResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetHostnameFromDHCPResponse&  dm::TDS__SetHostnameFromDHCPResponse::operator=( const dm::TDS__SetHostnameFromDHCPResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetRemoteUser::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__RemoteUser mRemoteUser;
    bool mRemoteUser_nil;
};

dm::TDS__SetRemoteUser::PrivateDPtr::PrivateDPtr()
    : mRemoteUser_nil(true)
{
}


void dm::TDS__SetRemoteUser::setRemoteUser( const dm::TT__RemoteUser& _remoteUser )
{
    d_ptr->mRemoteUser_nil = false;// converter_complextype.cpp:277
    d_ptr->mRemoteUser = _remoteUser;
}

dm::TT__RemoteUser dm::TDS__SetRemoteUser::remoteUser() const
{
    return d_ptr->mRemoteUser;
}

KDSoapValue dm::TDS__SetRemoteUser::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetRemoteUser"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mRemoteUser_nil) {
        KDSoapValue _valueRemoteUser(d_ptr->mRemoteUser.serialize(QString::fromLatin1("RemoteUser")));// elementargumentserializer.cpp:102
        _valueRemoteUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueRemoteUser.setQualified(true);
        if (!_valueRemoteUser.isNil())
        args.append(_valueRemoteUser);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__SetRemoteUser::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("RemoteUser")) {// converter_complextype.cpp:354
            d_ptr->mRemoteUser.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__SetRemoteUser::TDS__SetRemoteUser()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetRemoteUser::~TDS__SetRemoteUser()
{
}

dm::TDS__SetRemoteUser::TDS__SetRemoteUser( const dm::TDS__SetRemoteUser& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetRemoteUser&  dm::TDS__SetRemoteUser::operator=( const dm::TDS__SetRemoteUser& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__BinaryData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QByteArray mData;
    dm::XMIME__ContentType mContentType;
    bool mContentType_nil;
};

dm::TT__BinaryData::PrivateDPtr::PrivateDPtr()
    : mContentType_nil(true)
{
}


void dm::TT__BinaryData::setData( const QByteArray& _data )
{
    d_ptr->mData = _data;
}

QByteArray dm::TT__BinaryData::data() const
{
    return d_ptr->mData;
}

void dm::TT__BinaryData::setContentType( const dm::XMIME__ContentType& _contentType )
{
    d_ptr->mContentType_nil = false;// converter_complextype.cpp:277
    d_ptr->mContentType = _contentType;
}

dm::XMIME__ContentType dm::TT__BinaryData::contentType() const
{
    return d_ptr->mContentType;
}

KDSoapValue dm::TT__BinaryData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("BinaryData"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueData(QString::fromLatin1("Data"), QString::fromLatin1(d_ptr->mData.toBase64().constData()), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("base64Binary"));// elementargumentserializer.cpp:108
    _valueData.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueData.setQualified(true);
    args.append(_valueData);// elementargumentserializer.cpp:122
    KDSoapValueList attribs;
    if (!d_ptr->mContentType_nil) {
        KDSoapValue _valueContentType(QString::fromLatin1("contentType"), d_ptr->mContentType.serialize(), QString::fromLatin1("http://www.w3.org/2005/05/xmlmime"), QString::fromLatin1("contentType"));// elementargumentserializer.cpp:110
        _valueContentType.setNamespaceUri(QString::fromLatin1("http://www.w3.org/2005/05/xmlmime"));
        if (!_valueContentType.isNil())
        attribs.append(_valueContentType);// elementargumentserializer.cpp:122
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__BinaryData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Data")) {// converter_complextype.cpp:354
            d_ptr->mData = QByteArray::fromBase64(val.value().toString().toLatin1());// converter_complextype.cpp:367
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("contentType")) {// converter_complextype.cpp:354
            d_ptr->mContentType.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mContentType_nil = false;// converter_complextype.cpp:375
        }
    }
}

dm::TT__BinaryData::TT__BinaryData()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__BinaryData::~TT__BinaryData()
{
}

dm::TT__BinaryData::TT__BinaryData( const dm::TT__BinaryData& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__BinaryData&  dm::TT__BinaryData::operator=( const dm::TT__BinaryData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetNTP::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mFromDHCP;
    QList< dm::TT__NetworkHost > mNTPManual;
    bool mNTPManual_nil;
};

dm::TDS__SetNTP::PrivateDPtr::PrivateDPtr()
    : mFromDHCP(false), mNTPManual_nil(true)
{
}


void dm::TDS__SetNTP::setFromDHCP( bool _fromDHCP )
{
    d_ptr->mFromDHCP = _fromDHCP;
}

bool dm::TDS__SetNTP::fromDHCP() const
{
    return d_ptr->mFromDHCP;
}

void dm::TDS__SetNTP::setNTPManual( const QList< dm::TT__NetworkHost >& _nTPManual )
{
    d_ptr->mNTPManual_nil = false;// converter_complextype.cpp:277
    d_ptr->mNTPManual = _nTPManual;
}

QList< dm::TT__NetworkHost > dm::TDS__SetNTP::nTPManual() const
{
    return d_ptr->mNTPManual;
}

KDSoapValue dm::TDS__SetNTP::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetNTP"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueFromDHCP(QString::fromLatin1("FromDHCP"), QVariant::fromValue(d_ptr->mFromDHCP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueFromDHCP.setQualified(true);
    args.append(_valueFromDHCP);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mNTPManual.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueNTPManual(d_ptr->mNTPManual.at(i).serialize(QString::fromLatin1("NTPManual")));// elementargumentserializer.cpp:102
        _valueNTPManual.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueNTPManual.setQualified(true);
        args.append(_valueNTPManual);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__SetNTP::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("FromDHCP")) {// converter_complextype.cpp:354
            d_ptr->mFromDHCP = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("NTPManual")) {// converter_complextype.cpp:354
            dm::TT__NetworkHost mNTPManualTemp;// converter_complextype.cpp:412
            mNTPManualTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mNTPManual.append(mNTPManualTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__SetNTP::TDS__SetNTP()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetNTP::~TDS__SetNTP()
{
}

dm::TDS__SetNTP::TDS__SetNTP( const dm::TDS__SetNTP& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetNTP&  dm::TDS__SetNTP::operator=( const dm::TDS__SetNTP& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetServiceCapabilitiesResponse::PrivateDPtr : public QSharedData
{
public:
    dm::TDS__DeviceServiceCapabilities mCapabilities;
};

void dm::TDS__GetServiceCapabilitiesResponse::setCapabilities( const dm::TDS__DeviceServiceCapabilities& _capabilities )
{
    d_ptr->mCapabilities = _capabilities;
}

dm::TDS__DeviceServiceCapabilities dm::TDS__GetServiceCapabilitiesResponse::capabilities() const
{
    return d_ptr->mCapabilities;
}

KDSoapValue dm::TDS__GetServiceCapabilitiesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetServiceCapabilitiesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueCapabilities(d_ptr->mCapabilities.serialize(QString::fromLatin1("Capabilities")));// elementargumentserializer.cpp:102
    _valueCapabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCapabilities.setQualified(true);
    args.append(_valueCapabilities);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__GetServiceCapabilitiesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Capabilities")) {// converter_complextype.cpp:354
            d_ptr->mCapabilities.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__GetServiceCapabilitiesResponse::TDS__GetServiceCapabilitiesResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetServiceCapabilitiesResponse::~TDS__GetServiceCapabilitiesResponse()
{
}

dm::TDS__GetServiceCapabilitiesResponse::TDS__GetServiceCapabilitiesResponse( const dm::TDS__GetServiceCapabilitiesResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetServiceCapabilitiesResponse&  dm::TDS__GetServiceCapabilitiesResponse::operator=( const dm::TDS__GetServiceCapabilitiesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetNetworkInterfacesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mRebootNeeded;
};

dm::TDS__SetNetworkInterfacesResponse::PrivateDPtr::PrivateDPtr()
    : mRebootNeeded(false)
{
}


void dm::TDS__SetNetworkInterfacesResponse::setRebootNeeded( bool _rebootNeeded )
{
    d_ptr->mRebootNeeded = _rebootNeeded;
}

bool dm::TDS__SetNetworkInterfacesResponse::rebootNeeded() const
{
    return d_ptr->mRebootNeeded;
}

KDSoapValue dm::TDS__SetNetworkInterfacesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetNetworkInterfacesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueRebootNeeded(QString::fromLatin1("RebootNeeded"), QVariant::fromValue(d_ptr->mRebootNeeded), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueRebootNeeded.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRebootNeeded.setQualified(true);
    args.append(_valueRebootNeeded);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__SetNetworkInterfacesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("RebootNeeded")) {// converter_complextype.cpp:354
            d_ptr->mRebootNeeded = val.value().value<bool>();// converter_complextype.cpp:367
        }
    }
}

dm::TDS__SetNetworkInterfacesResponse::TDS__SetNetworkInterfacesResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetNetworkInterfacesResponse::~TDS__SetNetworkInterfacesResponse()
{
}

dm::TDS__SetNetworkInterfacesResponse::TDS__SetNetworkInterfacesResponse( const dm::TDS__SetNetworkInterfacesResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetNetworkInterfacesResponse&  dm::TDS__SetNetworkInterfacesResponse::operator=( const dm::TDS__SetNetworkInterfacesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__GetCACertificatesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< dm::TT__Certificate > mCACertificate;
    bool mCACertificate_nil;
};

dm::TDS__GetCACertificatesResponse::PrivateDPtr::PrivateDPtr()
    : mCACertificate_nil(true)
{
}


void dm::TDS__GetCACertificatesResponse::setCACertificate( const QList< dm::TT__Certificate >& _cACertificate )
{
    d_ptr->mCACertificate_nil = false;// converter_complextype.cpp:277
    d_ptr->mCACertificate = _cACertificate;
}

QList< dm::TT__Certificate > dm::TDS__GetCACertificatesResponse::cACertificate() const
{
    return d_ptr->mCACertificate;
}

KDSoapValue dm::TDS__GetCACertificatesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("GetCACertificatesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mCACertificate.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueCACertificate(d_ptr->mCACertificate.at(i).serialize(QString::fromLatin1("CACertificate")));// elementargumentserializer.cpp:102
        _valueCACertificate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueCACertificate.setQualified(true);
        args.append(_valueCACertificate);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__GetCACertificatesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CACertificate")) {// converter_complextype.cpp:354
            dm::TT__Certificate mCACertificateTemp;// converter_complextype.cpp:412
            mCACertificateTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mCACertificate.append(mCACertificateTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__GetCACertificatesResponse::TDS__GetCACertificatesResponse()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__GetCACertificatesResponse::~TDS__GetCACertificatesResponse()
{
}

dm::TDS__GetCACertificatesResponse::TDS__GetCACertificatesResponse( const dm::TDS__GetCACertificatesResponse& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__GetCACertificatesResponse&  dm::TDS__GetCACertificatesResponse::operator=( const dm::TDS__GetCACertificatesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetScopes::PrivateDPtr : public QSharedData
{
public:
    QStringList mScopes;
};

void dm::TDS__SetScopes::setScopes( const QStringList& _scopes )
{
    d_ptr->mScopes = _scopes;
}

QStringList dm::TDS__SetScopes::scopes() const
{
    return d_ptr->mScopes;
}

KDSoapValue dm::TDS__SetScopes::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetScopes"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mScopes.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueScopes(QString::fromLatin1("Scopes"), QVariant::fromValue(d_ptr->mScopes.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:108
        _valueScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueScopes.setQualified(true);
        args.append(_valueScopes);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__SetScopes::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Scopes")) {// converter_complextype.cpp:354
            QString mScopesTemp;// converter_complextype.cpp:412
            mScopesTemp = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mScopes.append(mScopesTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__SetScopes::TDS__SetScopes()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetScopes::~TDS__SetScopes()
{
}

dm::TDS__SetScopes::TDS__SetScopes( const dm::TDS__SetScopes& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetScopes&  dm::TDS__SetScopes::operator=( const dm::TDS__SetScopes& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__IPv4NetworkInterface::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mEnabled;
    dm::TT__IPv4Configuration mConfig;
};

dm::TT__IPv4NetworkInterface::PrivateDPtr::PrivateDPtr()
    : mEnabled(false)
{
}


void dm::TT__IPv4NetworkInterface::setEnabled( bool _enabled )
{
    d_ptr->mEnabled = _enabled;
}

bool dm::TT__IPv4NetworkInterface::enabled() const
{
    return d_ptr->mEnabled;
}

void dm::TT__IPv4NetworkInterface::setConfig( const dm::TT__IPv4Configuration& _config )
{
    d_ptr->mConfig = _config;
}

dm::TT__IPv4Configuration dm::TT__IPv4NetworkInterface::config() const
{
    return d_ptr->mConfig;
}

KDSoapValue dm::TT__IPv4NetworkInterface::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("IPv4NetworkInterface"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueEnabled(QString::fromLatin1("Enabled"), QVariant::fromValue(d_ptr->mEnabled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueEnabled.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueEnabled.setQualified(true);
    args.append(_valueEnabled);// elementargumentserializer.cpp:122
    KDSoapValue _valueConfig(d_ptr->mConfig.serialize(QString::fromLatin1("Config")));// elementargumentserializer.cpp:102
    _valueConfig.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueConfig.setQualified(true);
    args.append(_valueConfig);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TT__IPv4NetworkInterface::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Enabled")) {// converter_complextype.cpp:354
            d_ptr->mEnabled = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Config")) {// converter_complextype.cpp:354
            d_ptr->mConfig.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TT__IPv4NetworkInterface::TT__IPv4NetworkInterface()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__IPv4NetworkInterface::~TT__IPv4NetworkInterface()
{
}

dm::TT__IPv4NetworkInterface::TT__IPv4NetworkInterface( const dm::TT__IPv4NetworkInterface& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__IPv4NetworkInterface&  dm::TT__IPv4NetworkInterface::operator=( const dm::TT__IPv4NetworkInterface& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__Dot11Capabilities::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mTKIP;
    bool mScanAvailableNetworks;
    bool mMultipleConfiguration;
    bool mAdHocStationMode;
    bool mWEP;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__Dot11Capabilities::PrivateDPtr::PrivateDPtr()
    : mTKIP(false), mScanAvailableNetworks(false), mMultipleConfiguration(false), mAdHocStationMode(false), mWEP(false), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__Dot11Capabilities::setTKIP( bool _tKIP )
{
    d_ptr->mTKIP = _tKIP;
}

bool dm::TT__Dot11Capabilities::tKIP() const
{
    return d_ptr->mTKIP;
}

void dm::TT__Dot11Capabilities::setScanAvailableNetworks( bool _scanAvailableNetworks )
{
    d_ptr->mScanAvailableNetworks = _scanAvailableNetworks;
}

bool dm::TT__Dot11Capabilities::scanAvailableNetworks() const
{
    return d_ptr->mScanAvailableNetworks;
}

void dm::TT__Dot11Capabilities::setMultipleConfiguration( bool _multipleConfiguration )
{
    d_ptr->mMultipleConfiguration = _multipleConfiguration;
}

bool dm::TT__Dot11Capabilities::multipleConfiguration() const
{
    return d_ptr->mMultipleConfiguration;
}

void dm::TT__Dot11Capabilities::setAdHocStationMode( bool _adHocStationMode )
{
    d_ptr->mAdHocStationMode = _adHocStationMode;
}

bool dm::TT__Dot11Capabilities::adHocStationMode() const
{
    return d_ptr->mAdHocStationMode;
}

void dm::TT__Dot11Capabilities::setWEP( bool _wEP )
{
    d_ptr->mWEP = _wEP;
}

bool dm::TT__Dot11Capabilities::wEP() const
{
    return d_ptr->mWEP;
}

void dm::TT__Dot11Capabilities::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__Dot11Capabilities::any() const
{
    return d_ptr->mAny;
}

void dm::TT__Dot11Capabilities::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__Dot11Capabilities::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__Dot11Capabilities::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Dot11Capabilities"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueTKIP(QString::fromLatin1("TKIP"), QVariant::fromValue(d_ptr->mTKIP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueTKIP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueTKIP.setQualified(true);
    args.append(_valueTKIP);// elementargumentserializer.cpp:122
    KDSoapValue _valueScanAvailableNetworks(QString::fromLatin1("ScanAvailableNetworks"), QVariant::fromValue(d_ptr->mScanAvailableNetworks), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueScanAvailableNetworks.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueScanAvailableNetworks.setQualified(true);
    args.append(_valueScanAvailableNetworks);// elementargumentserializer.cpp:122
    KDSoapValue _valueMultipleConfiguration(QString::fromLatin1("MultipleConfiguration"), QVariant::fromValue(d_ptr->mMultipleConfiguration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueMultipleConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMultipleConfiguration.setQualified(true);
    args.append(_valueMultipleConfiguration);// elementargumentserializer.cpp:122
    KDSoapValue _valueAdHocStationMode(QString::fromLatin1("AdHocStationMode"), QVariant::fromValue(d_ptr->mAdHocStationMode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueAdHocStationMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueAdHocStationMode.setQualified(true);
    args.append(_valueAdHocStationMode);// elementargumentserializer.cpp:122
    KDSoapValue _valueWEP(QString::fromLatin1("WEP"), QVariant::fromValue(d_ptr->mWEP), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueWEP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueWEP.setQualified(true);
    args.append(_valueWEP);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__Dot11Capabilities::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("TKIP")) {// converter_complextype.cpp:354
            d_ptr->mTKIP = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("ScanAvailableNetworks")) {// converter_complextype.cpp:354
            d_ptr->mScanAvailableNetworks = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("MultipleConfiguration")) {// converter_complextype.cpp:354
            d_ptr->mMultipleConfiguration = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("AdHocStationMode")) {// converter_complextype.cpp:354
            d_ptr->mAdHocStationMode = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("WEP")) {// converter_complextype.cpp:354
            d_ptr->mWEP = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__Dot11Capabilities::TT__Dot11Capabilities()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__Dot11Capabilities::~TT__Dot11Capabilities()
{
}

dm::TT__Dot11Capabilities::TT__Dot11Capabilities( const dm::TT__Dot11Capabilities& other )
    : d_ptr( other.d_ptr )
{
}

dm::TT__Dot11Capabilities&  dm::TT__Dot11Capabilities::operator=( const dm::TT__Dot11Capabilities& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TDS__SetUser::PrivateDPtr : public QSharedData
{
public:
    QList< dm::TT__User > mUser;
};

void dm::TDS__SetUser::setUser( const QList< dm::TT__User >& _user )
{
    d_ptr->mUser = _user;
}

QList< dm::TT__User > dm::TDS__SetUser::user() const
{
    return d_ptr->mUser;
}

KDSoapValue dm::TDS__SetUser::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("SetUser"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mUser.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueUser(d_ptr->mUser.at(i).serialize(QString::fromLatin1("User")));// elementargumentserializer.cpp:102
        _valueUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
        _valueUser.setQualified(true);
        args.append(_valueUser);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void dm::TDS__SetUser::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("User")) {// converter_complextype.cpp:354
            dm::TT__User mUserTemp;// converter_complextype.cpp:412
            mUserTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mUser.append(mUserTemp);// converter_complextype.cpp:420
        }
    }
}

dm::TDS__SetUser::TDS__SetUser()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__SetUser::~TDS__SetUser()
{
}

dm::TDS__SetUser::TDS__SetUser( const dm::TDS__SetUser& other )
    : d_ptr( other.d_ptr )
{
}

dm::TDS__SetUser&  dm::TDS__SetUser::operator=( const dm::TDS__SetUser& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class dm::TT__RelayOutput::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__RelayOutputSettings mProperties;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__RelayOutput::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__RelayOutput::setProperties( const dm::TT__RelayOutputSettings& _properties )
{
    d_ptr->mProperties = _properties;
}

dm::TT__RelayOutputSettings dm::TT__RelayOutput::properties() const
{
    return d_ptr->mProperties;
}

void dm::TT__RelayOutput::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__RelayOutput::any() const
{
    return d_ptr->mAny;
}

void dm::TT__RelayOutput::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__RelayOutput::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__RelayOutput::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = dm::TT__DeviceEntity::serialize(valueName);// converter_complextype.cpp:454
    mainValue.setType(QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("RelayOutput"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueProperties(d_ptr->mProperties.serialize(QString::fromLatin1("Properties")));// elementargumentserializer.cpp:102
    _valueProperties.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueProperties.setQualified(true);
    args.append(_valueProperties);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__RelayOutput::deserialize( const KDSoapValue& mainValue )
{
    dm::TT__DeviceEntity::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Properties")) {// converter_complextype.cpp:354
            d_ptr->mProperties.deserialize(val);// converter_complextype.cpp:371
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__RelayOutput::TT__RelayOutput()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__RelayOutput::~TT__RelayOutput()
{
}

dm::TT__DeviceEntity *dm::TT__RelayOutput::_kd_clone() const
{
    return new TT__RelayOutput(*this);
}

dm::TT__RelayOutput::TT__RelayOutput( const dm::TT__RelayOutput& other )
    : dm::TT__DeviceEntity( other ), d_ptr( other.d_ptr )
{
}

dm::TT__RelayOutput&  dm::TT__RelayOutput::operator=( const dm::TT__RelayOutput& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<dm::TT__DeviceEntity *>(this) = other;

    return *this;
}


class dm::TT__AudioSource::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mChannels;
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__AudioSource::PrivateDPtr::PrivateDPtr()
    : mChannels(0), mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__AudioSource::setChannels( int _channels )
{
    d_ptr->mChannels = _channels;
}

int dm::TT__AudioSource::channels() const
{
    return d_ptr->mChannels;
}

void dm::TT__AudioSource::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__AudioSource::any() const
{
    return d_ptr->mAny;
}

void dm::TT__AudioSource::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__AudioSource::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__AudioSource::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = dm::TT__DeviceEntity::serialize(valueName);// converter_complextype.cpp:454
    mainValue.setType(QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("AudioSource"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueChannels(QString::fromLatin1("Channels"), QVariant::fromValue(d_ptr->mChannels), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueChannels.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueChannels.setQualified(true);
    args.append(_valueChannels);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__AudioSource::deserialize( const KDSoapValue& mainValue )
{
    dm::TT__DeviceEntity::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Channels")) {// converter_complextype.cpp:354
            d_ptr->mChannels = val.value().value<int>();// converter_complextype.cpp:367
        }
        else {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__AudioSource::TT__AudioSource()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__AudioSource::~TT__AudioSource()
{
}

dm::TT__DeviceEntity *dm::TT__AudioSource::_kd_clone() const
{
    return new TT__AudioSource(*this);
}

dm::TT__AudioSource::TT__AudioSource( const dm::TT__AudioSource& other )
    : dm::TT__DeviceEntity( other ), d_ptr( other.d_ptr )
{
}

dm::TT__AudioSource&  dm::TT__AudioSource::operator=( const dm::TT__AudioSource& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<dm::TT__DeviceEntity *>(this) = other;

    return *this;
}


class dm::TT__AudioOutput::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__AudioOutput::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__AudioOutput::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__AudioOutput::any() const
{
    return d_ptr->mAny;
}

void dm::TT__AudioOutput::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__AudioOutput::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__AudioOutput::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = dm::TT__DeviceEntity::serialize(valueName);// converter_complextype.cpp:454
    mainValue.setType(QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("AudioOutput"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__AudioOutput::deserialize( const KDSoapValue& mainValue )
{
    dm::TT__DeviceEntity::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__AudioOutput::TT__AudioOutput()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__AudioOutput::~TT__AudioOutput()
{
}

dm::TT__DeviceEntity *dm::TT__AudioOutput::_kd_clone() const
{
    return new TT__AudioOutput(*this);
}

dm::TT__AudioOutput::TT__AudioOutput( const dm::TT__AudioOutput& other )
    : dm::TT__DeviceEntity( other ), d_ptr( other.d_ptr )
{
}

dm::TT__AudioOutput&  dm::TT__AudioOutput::operator=( const dm::TT__AudioOutput& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<dm::TT__DeviceEntity *>(this) = other;

    return *this;
}


class dm::TDS__StorageConfiguration::PrivateDPtr : public QSharedData
{
public:
    dm::TDS__StorageConfigurationData mData;
};

void dm::TDS__StorageConfiguration::setData( const dm::TDS__StorageConfigurationData& _data )
{
    d_ptr->mData = _data;
}

dm::TDS__StorageConfigurationData dm::TDS__StorageConfiguration::data() const
{
    return d_ptr->mData;
}

KDSoapValue dm::TDS__StorageConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = dm::TT__DeviceEntity::serialize(valueName);// converter_complextype.cpp:454
    mainValue.setType(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"), QString::fromLatin1("StorageConfiguration"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueData(d_ptr->mData.serialize(QString::fromLatin1("Data")));// elementargumentserializer.cpp:102
    _valueData.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueData.setQualified(true);
    args.append(_valueData);// elementargumentserializer.cpp:122
    return mainValue;
}

void dm::TDS__StorageConfiguration::deserialize( const KDSoapValue& mainValue )
{
    dm::TT__DeviceEntity::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Data")) {// converter_complextype.cpp:354
            d_ptr->mData.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

dm::TDS__StorageConfiguration::TDS__StorageConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TDS__StorageConfiguration::~TDS__StorageConfiguration()
{
}

dm::TT__DeviceEntity *dm::TDS__StorageConfiguration::_kd_clone() const
{
    return new TDS__StorageConfiguration(*this);
}

dm::TDS__StorageConfiguration::TDS__StorageConfiguration( const dm::TDS__StorageConfiguration& other )
    : dm::TT__DeviceEntity( other ), d_ptr( other.d_ptr )
{
}

dm::TDS__StorageConfiguration&  dm::TDS__StorageConfiguration::operator=( const dm::TDS__StorageConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<dm::TT__DeviceEntity *>(this) = other;

    return *this;
}


class dm::TT__NetworkInterface::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mEnabled;
    dm::TT__NetworkInterfaceInfo mInfo;
    bool mInfo_nil;
    dm::TT__NetworkInterfaceLink mLink;
    bool mLink_nil;
    dm::TT__IPv4NetworkInterface mIPv4;
    bool mIPv4_nil;
    dm::TT__IPv6NetworkInterface mIPv6;
    bool mIPv6_nil;
    dm::TT__NetworkInterfaceExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__NetworkInterface::PrivateDPtr::PrivateDPtr()
    : mEnabled(false), mInfo_nil(true), mLink_nil(true), mIPv4_nil(true), mIPv6_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__NetworkInterface::setEnabled( bool _enabled )
{
    d_ptr->mEnabled = _enabled;
}

bool dm::TT__NetworkInterface::enabled() const
{
    return d_ptr->mEnabled;
}

void dm::TT__NetworkInterface::setInfo( const dm::TT__NetworkInterfaceInfo& _info )
{
    d_ptr->mInfo_nil = false;// converter_complextype.cpp:277
    d_ptr->mInfo = _info;
}

dm::TT__NetworkInterfaceInfo dm::TT__NetworkInterface::info() const
{
    return d_ptr->mInfo;
}

void dm::TT__NetworkInterface::setLink( const dm::TT__NetworkInterfaceLink& _link )
{
    d_ptr->mLink_nil = false;// converter_complextype.cpp:277
    d_ptr->mLink = _link;
}

dm::TT__NetworkInterfaceLink dm::TT__NetworkInterface::link() const
{
    return d_ptr->mLink;
}

void dm::TT__NetworkInterface::setIPv4( const dm::TT__IPv4NetworkInterface& _iPv4 )
{
    d_ptr->mIPv4_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv4 = _iPv4;
}

dm::TT__IPv4NetworkInterface dm::TT__NetworkInterface::iPv4() const
{
    return d_ptr->mIPv4;
}

void dm::TT__NetworkInterface::setIPv6( const dm::TT__IPv6NetworkInterface& _iPv6 )
{
    d_ptr->mIPv6_nil = false;// converter_complextype.cpp:277
    d_ptr->mIPv6 = _iPv6;
}

dm::TT__IPv6NetworkInterface dm::TT__NetworkInterface::iPv6() const
{
    return d_ptr->mIPv6;
}

void dm::TT__NetworkInterface::setExtension( const dm::TT__NetworkInterfaceExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__NetworkInterfaceExtension dm::TT__NetworkInterface::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__NetworkInterface::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__NetworkInterface::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__NetworkInterface::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = dm::TT__DeviceEntity::serialize(valueName);// converter_complextype.cpp:454
    mainValue.setType(QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("NetworkInterface"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueEnabled(QString::fromLatin1("Enabled"), QVariant::fromValue(d_ptr->mEnabled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueEnabled.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueEnabled.setQualified(true);
    args.append(_valueEnabled);// elementargumentserializer.cpp:122
    if (!d_ptr->mInfo_nil) {
        KDSoapValue _valueInfo(d_ptr->mInfo.serialize(QString::fromLatin1("Info")));// elementargumentserializer.cpp:102
        _valueInfo.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueInfo.setQualified(true);
        if (!_valueInfo.isNil())
        args.append(_valueInfo);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mLink_nil) {
        KDSoapValue _valueLink(d_ptr->mLink.serialize(QString::fromLatin1("Link")));// elementargumentserializer.cpp:102
        _valueLink.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueLink.setQualified(true);
        if (!_valueLink.isNil())
        args.append(_valueLink);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mIPv4_nil) {
        KDSoapValue _valueIPv4(d_ptr->mIPv4.serialize(QString::fromLatin1("IPv4")));// elementargumentserializer.cpp:102
        _valueIPv4.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPv4.setQualified(true);
        if (!_valueIPv4.isNil())
        args.append(_valueIPv4);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mIPv6_nil) {
        KDSoapValue _valueIPv6(d_ptr->mIPv6.serialize(QString::fromLatin1("IPv6")));// elementargumentserializer.cpp:102
        _valueIPv6.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueIPv6.setQualified(true);
        if (!_valueIPv6.isNil())
        args.append(_valueIPv6);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__NetworkInterface::deserialize( const KDSoapValue& mainValue )
{
    dm::TT__DeviceEntity::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Enabled")) {// converter_complextype.cpp:354
            d_ptr->mEnabled = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Info")) {// converter_complextype.cpp:354
            d_ptr->mInfo.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Link")) {// converter_complextype.cpp:354
            d_ptr->mLink.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("IPv4")) {// converter_complextype.cpp:354
            d_ptr->mIPv4.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("IPv6")) {// converter_complextype.cpp:354
            d_ptr->mIPv6.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__NetworkInterface::TT__NetworkInterface()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__NetworkInterface::~TT__NetworkInterface()
{
}

dm::TT__DeviceEntity *dm::TT__NetworkInterface::_kd_clone() const
{
    return new TT__NetworkInterface(*this);
}

dm::TT__NetworkInterface::TT__NetworkInterface( const dm::TT__NetworkInterface& other )
    : dm::TT__DeviceEntity( other ), d_ptr( other.d_ptr )
{
}

dm::TT__NetworkInterface&  dm::TT__NetworkInterface::operator=( const dm::TT__NetworkInterface& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<dm::TT__DeviceEntity *>(this) = other;

    return *this;
}


class dm::TT__OSDConfiguration::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__OSDReference mVideoSourceConfigurationToken;
    dm::TT__OSDType mType;
    dm::TT__OSDPosConfiguration mPosition;
    dm::TT__OSDTextConfiguration mTextString;
    bool mTextString_nil;
    dm::TT__OSDImgConfiguration mImage;
    bool mImage_nil;
    dm::TT__OSDConfigurationExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__OSDConfiguration::PrivateDPtr::PrivateDPtr()
    : mTextString_nil(true), mImage_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__OSDConfiguration::setVideoSourceConfigurationToken( const dm::TT__OSDReference& _videoSourceConfigurationToken )
{
    d_ptr->mVideoSourceConfigurationToken = _videoSourceConfigurationToken;
}

dm::TT__OSDReference dm::TT__OSDConfiguration::videoSourceConfigurationToken() const
{
    return d_ptr->mVideoSourceConfigurationToken;
}

void dm::TT__OSDConfiguration::setType( const dm::TT__OSDType& _type )
{
    d_ptr->mType = _type;
}

dm::TT__OSDType dm::TT__OSDConfiguration::type() const
{
    return d_ptr->mType;
}

void dm::TT__OSDConfiguration::setPosition( const dm::TT__OSDPosConfiguration& _position )
{
    d_ptr->mPosition = _position;
}

dm::TT__OSDPosConfiguration dm::TT__OSDConfiguration::position() const
{
    return d_ptr->mPosition;
}

void dm::TT__OSDConfiguration::setTextString( const dm::TT__OSDTextConfiguration& _textString )
{
    d_ptr->mTextString_nil = false;// converter_complextype.cpp:277
    d_ptr->mTextString = _textString;
}

dm::TT__OSDTextConfiguration dm::TT__OSDConfiguration::textString() const
{
    return d_ptr->mTextString;
}

void dm::TT__OSDConfiguration::setImage( const dm::TT__OSDImgConfiguration& _image )
{
    d_ptr->mImage_nil = false;// converter_complextype.cpp:277
    d_ptr->mImage = _image;
}

dm::TT__OSDImgConfiguration dm::TT__OSDConfiguration::image() const
{
    return d_ptr->mImage;
}

void dm::TT__OSDConfiguration::setExtension( const dm::TT__OSDConfigurationExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__OSDConfigurationExtension dm::TT__OSDConfiguration::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__OSDConfiguration::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__OSDConfiguration::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__OSDConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = dm::TT__DeviceEntity::serialize(valueName);// converter_complextype.cpp:454
    mainValue.setType(QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("OSDConfiguration"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueVideoSourceConfigurationToken(d_ptr->mVideoSourceConfigurationToken.serialize(QString::fromLatin1("VideoSourceConfigurationToken")));// elementargumentserializer.cpp:102
    _valueVideoSourceConfigurationToken.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueVideoSourceConfigurationToken.setQualified(true);
    args.append(_valueVideoSourceConfigurationToken);// elementargumentserializer.cpp:122
    KDSoapValue _valueType(QString::fromLatin1("Type"), d_ptr->mType.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("OSDType"));// elementargumentserializer.cpp:110
    _valueType.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueType.setQualified(true);
    args.append(_valueType);// elementargumentserializer.cpp:122
    KDSoapValue _valuePosition(d_ptr->mPosition.serialize(QString::fromLatin1("Position")));// elementargumentserializer.cpp:102
    _valuePosition.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valuePosition.setQualified(true);
    args.append(_valuePosition);// elementargumentserializer.cpp:122
    if (!d_ptr->mTextString_nil) {
        KDSoapValue _valueTextString(d_ptr->mTextString.serialize(QString::fromLatin1("TextString")));// elementargumentserializer.cpp:102
        _valueTextString.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueTextString.setQualified(true);
        if (!_valueTextString.isNil())
        args.append(_valueTextString);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mImage_nil) {
        KDSoapValue _valueImage(d_ptr->mImage.serialize(QString::fromLatin1("Image")));// elementargumentserializer.cpp:102
        _valueImage.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueImage.setQualified(true);
        if (!_valueImage.isNil())
        args.append(_valueImage);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__OSDConfiguration::deserialize( const KDSoapValue& mainValue )
{
    dm::TT__DeviceEntity::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("VideoSourceConfigurationToken")) {// converter_complextype.cpp:354
            d_ptr->mVideoSourceConfigurationToken.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Type")) {// converter_complextype.cpp:354
            d_ptr->mType.deserialize(val.value());// converter_complextype.cpp:373
        }
        else if (_name == QLatin1String("Position")) {// converter_complextype.cpp:354
            d_ptr->mPosition.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("TextString")) {// converter_complextype.cpp:354
            d_ptr->mTextString.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Image")) {// converter_complextype.cpp:354
            d_ptr->mImage.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__OSDConfiguration::TT__OSDConfiguration()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__OSDConfiguration::~TT__OSDConfiguration()
{
}

dm::TT__DeviceEntity *dm::TT__OSDConfiguration::_kd_clone() const
{
    return new TT__OSDConfiguration(*this);
}

dm::TT__OSDConfiguration::TT__OSDConfiguration( const dm::TT__OSDConfiguration& other )
    : dm::TT__DeviceEntity( other ), d_ptr( other.d_ptr )
{
}

dm::TT__OSDConfiguration&  dm::TT__OSDConfiguration::operator=( const dm::TT__OSDConfiguration& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<dm::TT__DeviceEntity *>(this) = other;

    return *this;
}


class dm::TT__VideoSource::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mFramerate;
    dm::TT__VideoResolution mResolution;
    dm::TT__ImagingSettings mImaging;
    bool mImaging_nil;
    dm::TT__VideoSourceExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__VideoSource::PrivateDPtr::PrivateDPtr()
    : mFramerate(0), mImaging_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__VideoSource::setFramerate( float _framerate )
{
    d_ptr->mFramerate = _framerate;
}

float dm::TT__VideoSource::framerate() const
{
    return d_ptr->mFramerate;
}

void dm::TT__VideoSource::setResolution( const dm::TT__VideoResolution& _resolution )
{
    d_ptr->mResolution = _resolution;
}

dm::TT__VideoResolution dm::TT__VideoSource::resolution() const
{
    return d_ptr->mResolution;
}

void dm::TT__VideoSource::setImaging( const dm::TT__ImagingSettings& _imaging )
{
    d_ptr->mImaging_nil = false;// converter_complextype.cpp:277
    d_ptr->mImaging = _imaging;
}

dm::TT__ImagingSettings dm::TT__VideoSource::imaging() const
{
    return d_ptr->mImaging;
}

void dm::TT__VideoSource::setExtension( const dm::TT__VideoSourceExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__VideoSourceExtension dm::TT__VideoSource::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__VideoSource::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__VideoSource::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__VideoSource::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = dm::TT__DeviceEntity::serialize(valueName);// converter_complextype.cpp:454
    mainValue.setType(QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("VideoSource"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueFramerate(QString::fromLatin1("Framerate"), QVariant::fromValue(d_ptr->mFramerate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
    _valueFramerate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueFramerate.setQualified(true);
    args.append(_valueFramerate);// elementargumentserializer.cpp:122
    KDSoapValue _valueResolution(d_ptr->mResolution.serialize(QString::fromLatin1("Resolution")));// elementargumentserializer.cpp:102
    _valueResolution.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueResolution.setQualified(true);
    args.append(_valueResolution);// elementargumentserializer.cpp:122
    if (!d_ptr->mImaging_nil) {
        KDSoapValue _valueImaging(d_ptr->mImaging.serialize(QString::fromLatin1("Imaging")));// elementargumentserializer.cpp:102
        _valueImaging.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueImaging.setQualified(true);
        if (!_valueImaging.isNil())
        args.append(_valueImaging);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__VideoSource::deserialize( const KDSoapValue& mainValue )
{
    dm::TT__DeviceEntity::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Framerate")) {// converter_complextype.cpp:354
            d_ptr->mFramerate = val.value().value<float>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Resolution")) {// converter_complextype.cpp:354
            d_ptr->mResolution.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Imaging")) {// converter_complextype.cpp:354
            d_ptr->mImaging.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__VideoSource::TT__VideoSource()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__VideoSource::~TT__VideoSource()
{
}

dm::TT__DeviceEntity *dm::TT__VideoSource::_kd_clone() const
{
    return new TT__VideoSource(*this);
}

dm::TT__VideoSource::TT__VideoSource( const dm::TT__VideoSource& other )
    : dm::TT__DeviceEntity( other ), d_ptr( other.d_ptr )
{
}

dm::TT__VideoSource&  dm::TT__VideoSource::operator=( const dm::TT__VideoSource& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<dm::TT__DeviceEntity *>(this) = other;

    return *this;
}


class dm::TT__DigitalInput::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__DigitalInput::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__DigitalInput::setAny( const QList< KDSoapValue >& _any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:277
    d_ptr->mAny = _any;
}

QList< KDSoapValue > dm::TT__DigitalInput::any() const
{
    return d_ptr->mAny;
}

void dm::TT__DigitalInput::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__DigitalInput::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__DigitalInput::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = dm::TT__DeviceEntity::serialize(valueName);// converter_complextype.cpp:454
    mainValue.setType(QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("DigitalInput"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:556
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:82
        }
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__DigitalInput::deserialize( const KDSoapValue& mainValue )
{
    dm::TT__DeviceEntity::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        {// converter_complextype.cpp:352
            d_ptr->mAny.append(val);
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__DigitalInput::TT__DigitalInput()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__DigitalInput::~TT__DigitalInput()
{
}

dm::TT__DeviceEntity *dm::TT__DigitalInput::_kd_clone() const
{
    return new TT__DigitalInput(*this);
}

dm::TT__DigitalInput::TT__DigitalInput( const dm::TT__DigitalInput& other )
    : dm::TT__DeviceEntity( other ), d_ptr( other.d_ptr )
{
}

dm::TT__DigitalInput&  dm::TT__DigitalInput::operator=( const dm::TT__DigitalInput& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<dm::TT__DeviceEntity *>(this) = other;

    return *this;
}


class dm::TT__VideoOutput::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__Layout mLayout;
    dm::TT__VideoResolution mResolution;
    bool mResolution_nil;
    float mRefreshRate;
    bool mRefreshRate_nil;
    float mAspectRatio;
    bool mAspectRatio_nil;
    dm::TT__VideoOutputExtension mExtension;
    bool mExtension_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__VideoOutput::PrivateDPtr::PrivateDPtr()
    : mResolution_nil(true), mRefreshRate(0), mRefreshRate_nil(true), mAspectRatio(0), mAspectRatio_nil(true), mExtension_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__VideoOutput::setLayout( const dm::TT__Layout& _layout )
{
    d_ptr->mLayout = _layout;
}

dm::TT__Layout dm::TT__VideoOutput::layout() const
{
    return d_ptr->mLayout;
}

void dm::TT__VideoOutput::setResolution( const dm::TT__VideoResolution& _resolution )
{
    d_ptr->mResolution_nil = false;// converter_complextype.cpp:277
    d_ptr->mResolution = _resolution;
}

dm::TT__VideoResolution dm::TT__VideoOutput::resolution() const
{
    return d_ptr->mResolution;
}

void dm::TT__VideoOutput::setRefreshRate( float _refreshRate )
{
    d_ptr->mRefreshRate_nil = false;// converter_complextype.cpp:277
    d_ptr->mRefreshRate = _refreshRate;
}

float dm::TT__VideoOutput::refreshRate() const
{
    return d_ptr->mRefreshRate;
}

void dm::TT__VideoOutput::setAspectRatio( float _aspectRatio )
{
    d_ptr->mAspectRatio_nil = false;// converter_complextype.cpp:277
    d_ptr->mAspectRatio = _aspectRatio;
}

float dm::TT__VideoOutput::aspectRatio() const
{
    return d_ptr->mAspectRatio;
}

void dm::TT__VideoOutput::setExtension( const dm::TT__VideoOutputExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__VideoOutputExtension dm::TT__VideoOutput::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__VideoOutput::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__VideoOutput::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__VideoOutput::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = dm::TT__DeviceEntity::serialize(valueName);// converter_complextype.cpp:454
    mainValue.setType(QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("VideoOutput"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueLayout(d_ptr->mLayout.serialize(QString::fromLatin1("Layout")));// elementargumentserializer.cpp:102
    _valueLayout.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueLayout.setQualified(true);
    args.append(_valueLayout);// elementargumentserializer.cpp:122
    if (!d_ptr->mResolution_nil) {
        KDSoapValue _valueResolution(d_ptr->mResolution.serialize(QString::fromLatin1("Resolution")));// elementargumentserializer.cpp:102
        _valueResolution.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueResolution.setQualified(true);
        if (!_valueResolution.isNil())
        args.append(_valueResolution);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mRefreshRate_nil) {
        KDSoapValue _valueRefreshRate(QString::fromLatin1("RefreshRate"), QVariant::fromValue(d_ptr->mRefreshRate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueRefreshRate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueRefreshRate.setQualified(true);
        if (!_valueRefreshRate.isNil())
        args.append(_valueRefreshRate);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mAspectRatio_nil) {
        KDSoapValue _valueAspectRatio(QString::fromLatin1("AspectRatio"), QVariant::fromValue(d_ptr->mAspectRatio), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:108
        _valueAspectRatio.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAspectRatio.setQualified(true);
        if (!_valueAspectRatio.isNil())
        args.append(_valueAspectRatio);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__VideoOutput::deserialize( const KDSoapValue& mainValue )
{
    dm::TT__DeviceEntity::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Layout")) {// converter_complextype.cpp:354
            d_ptr->mLayout.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("Resolution")) {// converter_complextype.cpp:354
            d_ptr->mResolution.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("RefreshRate")) {// converter_complextype.cpp:354
            d_ptr->mRefreshRate = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mRefreshRate_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("AspectRatio")) {// converter_complextype.cpp:354
            d_ptr->mAspectRatio = val.value().value<float>();// converter_complextype.cpp:367
            d_ptr->mAspectRatio_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__VideoOutput::TT__VideoOutput()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__VideoOutput::~TT__VideoOutput()
{
}

dm::TT__DeviceEntity *dm::TT__VideoOutput::_kd_clone() const
{
    return new TT__VideoOutput(*this);
}

dm::TT__VideoOutput::TT__VideoOutput( const dm::TT__VideoOutput& other )
    : dm::TT__DeviceEntity( other ), d_ptr( other.d_ptr )
{
}

dm::TT__VideoOutput&  dm::TT__VideoOutput::operator=( const dm::TT__VideoOutput& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<dm::TT__DeviceEntity *>(this) = other;

    return *this;
}


class dm::TT__PTZNode::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    dm::TT__Name mName;
    bool mName_nil;
    dm::TT__PTZSpaces mSupportedPTZSpaces;
    int mMaximumNumberOfPresets;
    bool mHomeSupported;
    QList< dm::TT__AuxiliaryData > mAuxiliaryCommands;
    bool mAuxiliaryCommands_nil;
    dm::TT__PTZNodeExtension mExtension;
    bool mExtension_nil;
    bool mFixedHomePosition;
    bool mFixedHomePosition_nil;
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

dm::TT__PTZNode::PrivateDPtr::PrivateDPtr()
    : mName_nil(true), mMaximumNumberOfPresets(0), mHomeSupported(false), mAuxiliaryCommands_nil(true), mExtension_nil(true), mFixedHomePosition(false), mFixedHomePosition_nil(true), mAnyAttribute_nil(true)
{
}


void dm::TT__PTZNode::setName( const dm::TT__Name& _name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:277
    d_ptr->mName = _name;
}

dm::TT__Name dm::TT__PTZNode::name() const
{
    return d_ptr->mName;
}

void dm::TT__PTZNode::setSupportedPTZSpaces( const dm::TT__PTZSpaces& _supportedPTZSpaces )
{
    d_ptr->mSupportedPTZSpaces = _supportedPTZSpaces;
}

dm::TT__PTZSpaces dm::TT__PTZNode::supportedPTZSpaces() const
{
    return d_ptr->mSupportedPTZSpaces;
}

void dm::TT__PTZNode::setMaximumNumberOfPresets( int _maximumNumberOfPresets )
{
    d_ptr->mMaximumNumberOfPresets = _maximumNumberOfPresets;
}

int dm::TT__PTZNode::maximumNumberOfPresets() const
{
    return d_ptr->mMaximumNumberOfPresets;
}

void dm::TT__PTZNode::setHomeSupported( bool _homeSupported )
{
    d_ptr->mHomeSupported = _homeSupported;
}

bool dm::TT__PTZNode::homeSupported() const
{
    return d_ptr->mHomeSupported;
}

void dm::TT__PTZNode::setAuxiliaryCommands( const QList< dm::TT__AuxiliaryData >& _auxiliaryCommands )
{
    d_ptr->mAuxiliaryCommands_nil = false;// converter_complextype.cpp:277
    d_ptr->mAuxiliaryCommands = _auxiliaryCommands;
}

QList< dm::TT__AuxiliaryData > dm::TT__PTZNode::auxiliaryCommands() const
{
    return d_ptr->mAuxiliaryCommands;
}

void dm::TT__PTZNode::setExtension( const dm::TT__PTZNodeExtension& _extension )
{
    d_ptr->mExtension_nil = false;// converter_complextype.cpp:277
    d_ptr->mExtension = _extension;
}

dm::TT__PTZNodeExtension dm::TT__PTZNode::extension() const
{
    return d_ptr->mExtension;
}

void dm::TT__PTZNode::setFixedHomePosition( bool _fixedHomePosition )
{
    d_ptr->mFixedHomePosition_nil = false;// converter_complextype.cpp:277
    d_ptr->mFixedHomePosition = _fixedHomePosition;
}

bool dm::TT__PTZNode::fixedHomePosition() const
{
    return d_ptr->mFixedHomePosition;
}

void dm::TT__PTZNode::setAnyAttribute( const KDSoapValue& _anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:277
    d_ptr->mAnyAttribute = _anyAttribute;
}

KDSoapValue dm::TT__PTZNode::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue dm::TT__PTZNode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = dm::TT__DeviceEntity::serialize(valueName);// converter_complextype.cpp:454
    mainValue.setType(QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("PTZNode"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("Name"), d_ptr->mName.serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("Name"));// elementargumentserializer.cpp:110
        _valueName.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueName.setQualified(true);
        if (!_valueName.isNil())
        args.append(_valueName);// elementargumentserializer.cpp:122
    }
    KDSoapValue _valueSupportedPTZSpaces(d_ptr->mSupportedPTZSpaces.serialize(QString::fromLatin1("SupportedPTZSpaces")));// elementargumentserializer.cpp:102
    _valueSupportedPTZSpaces.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueSupportedPTZSpaces.setQualified(true);
    args.append(_valueSupportedPTZSpaces);// elementargumentserializer.cpp:122
    KDSoapValue _valueMaximumNumberOfPresets(QString::fromLatin1("MaximumNumberOfPresets"), QVariant::fromValue(d_ptr->mMaximumNumberOfPresets), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueMaximumNumberOfPresets.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueMaximumNumberOfPresets.setQualified(true);
    args.append(_valueMaximumNumberOfPresets);// elementargumentserializer.cpp:122
    KDSoapValue _valueHomeSupported(QString::fromLatin1("HomeSupported"), QVariant::fromValue(d_ptr->mHomeSupported), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
    _valueHomeSupported.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
    _valueHomeSupported.setQualified(true);
    args.append(_valueHomeSupported);// elementargumentserializer.cpp:122
    for (int i = 0; i < d_ptr->mAuxiliaryCommands.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueAuxiliaryCommands(QString::fromLatin1("AuxiliaryCommands"), d_ptr->mAuxiliaryCommands.at(i).serialize(), QString::fromLatin1("http://www.onvif.org/ver10/schema"), QString::fromLatin1("AuxiliaryData"));// elementargumentserializer.cpp:110
        _valueAuxiliaryCommands.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueAuxiliaryCommands.setQualified(true);
        args.append(_valueAuxiliaryCommands);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mExtension_nil) {
        KDSoapValue _valueExtension(d_ptr->mExtension.serialize(QString::fromLatin1("Extension")));// elementargumentserializer.cpp:102
        _valueExtension.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        _valueExtension.setQualified(true);
        if (!_valueExtension.isNil())
        args.append(_valueExtension);// elementargumentserializer.cpp:122
    }
    KDSoapValueList attribs;
    if (!d_ptr->mFixedHomePosition_nil) {
        KDSoapValue _valueFixedHomePosition(QString::fromLatin1("FixedHomePosition"), QVariant::fromValue(d_ptr->mFixedHomePosition), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:108
        _valueFixedHomePosition.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/schema"));
        if (!_valueFixedHomePosition.isNil())
        attribs.append(_valueFixedHomePosition);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:82
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:632
    return mainValue;
}

void dm::TT__PTZNode::deserialize( const KDSoapValue& mainValue )
{
    dm::TT__DeviceEntity::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Name")) {// converter_complextype.cpp:354
            d_ptr->mName.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mName_nil = false;// converter_complextype.cpp:375
        }
        else if (_name == QLatin1String("SupportedPTZSpaces")) {// converter_complextype.cpp:354
            d_ptr->mSupportedPTZSpaces.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("MaximumNumberOfPresets")) {// converter_complextype.cpp:354
            d_ptr->mMaximumNumberOfPresets = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("HomeSupported")) {// converter_complextype.cpp:354
            d_ptr->mHomeSupported = val.value().value<bool>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("AuxiliaryCommands")) {// converter_complextype.cpp:354
            dm::TT__AuxiliaryData mAuxiliaryCommandsTemp;// converter_complextype.cpp:412
            mAuxiliaryCommandsTemp.deserialize(val.value());// converter_complextype.cpp:373
            d_ptr->mAuxiliaryCommands.append(mAuxiliaryCommandsTemp);// converter_complextype.cpp:420
        }
        else if (_name == QLatin1String("Extension")) {// converter_complextype.cpp:354
            d_ptr->mExtension.deserialize(val);// converter_complextype.cpp:371
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString _name = val.name();
        if (_name == QLatin1String("FixedHomePosition")) {// converter_complextype.cpp:354
            d_ptr->mFixedHomePosition = val.value().value<bool>();// converter_complextype.cpp:367
            d_ptr->mFixedHomePosition_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:354
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:365
        }
    }
}

dm::TT__PTZNode::TT__PTZNode()
    : d_ptr(new PrivateDPtr)
{
}

dm::TT__PTZNode::~TT__PTZNode()
{
}

dm::TT__DeviceEntity *dm::TT__PTZNode::_kd_clone() const
{
    return new TT__PTZNode(*this);
}

dm::TT__PTZNode::TT__PTZNode( const dm::TT__PTZNode& other )
    : dm::TT__DeviceEntity( other ), d_ptr( other.d_ptr )
{
}

dm::TT__PTZNode&  dm::TT__PTZNode::operator=( const dm::TT__PTZNode& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<dm::TT__DeviceEntity *>(this) = other;

    return *this;
}


dm::GetServicesJob::GetServicesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetServicesJob::setParameters( const dm::TDS__GetServices& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetServices dm::GetServicesJob::parameters() const
{
    return mParameters;
}

void dm::GetServicesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetServices");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetServices(mParameters.serialize(QString::fromLatin1("GetServices")));// elementargumentserializer.cpp:102
    _valueGetServices.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetServices.setQualified(true);
    message = _valueGetServices;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetServices"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetServicesResponse dm::GetServicesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetServicesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetServiceCapabilitiesJob::GetServiceCapabilitiesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetServiceCapabilitiesJob::setParameters( const dm::TDS__GetServiceCapabilities& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetServiceCapabilities dm::GetServiceCapabilitiesJob::parameters() const
{
    return mParameters;
}

void dm::GetServiceCapabilitiesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetServiceCapabilities(mParameters.serialize(QString::fromLatin1("GetServiceCapabilities")));// elementargumentserializer.cpp:102
    _valueGetServiceCapabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetServiceCapabilities.setQualified(true);
    message = _valueGetServiceCapabilities;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetServiceCapabilities"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetServiceCapabilitiesResponse dm::GetServiceCapabilitiesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetServiceCapabilitiesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetDeviceInformationJob::GetDeviceInformationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetDeviceInformationJob::setParameters( const dm::TDS__GetDeviceInformation& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetDeviceInformation dm::GetDeviceInformationJob::parameters() const
{
    return mParameters;
}

void dm::GetDeviceInformationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDeviceInformation(mParameters.serialize(QString::fromLatin1("GetDeviceInformation")));// elementargumentserializer.cpp:102
    _valueGetDeviceInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDeviceInformation.setQualified(true);
    message = _valueGetDeviceInformation;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDeviceInformation"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetDeviceInformationResponse dm::GetDeviceInformationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetDeviceInformationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetSystemDateAndTimeJob::SetSystemDateAndTimeJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetSystemDateAndTimeJob::setParameters( const dm::TDS__SetSystemDateAndTime& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetSystemDateAndTime dm::SetSystemDateAndTimeJob::parameters() const
{
    return mParameters;
}

void dm::SetSystemDateAndTimeJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetSystemDateAndTime(mParameters.serialize(QString::fromLatin1("SetSystemDateAndTime")));// elementargumentserializer.cpp:102
    _valueSetSystemDateAndTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetSystemDateAndTime.setQualified(true);
    message = _valueSetSystemDateAndTime;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetSystemDateAndTime"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetSystemDateAndTimeResponse dm::SetSystemDateAndTimeJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetSystemDateAndTimeJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetSystemDateAndTimeJob::GetSystemDateAndTimeJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetSystemDateAndTimeJob::setParameters( const dm::TDS__GetSystemDateAndTime& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetSystemDateAndTime dm::GetSystemDateAndTimeJob::parameters() const
{
    return mParameters;
}

void dm::GetSystemDateAndTimeJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemDateAndTime(mParameters.serialize(QString::fromLatin1("GetSystemDateAndTime")));// elementargumentserializer.cpp:102
    _valueGetSystemDateAndTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemDateAndTime.setQualified(true);
    message = _valueGetSystemDateAndTime;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetSystemDateAndTime"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetSystemDateAndTimeResponse dm::GetSystemDateAndTimeJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetSystemDateAndTimeJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetSystemFactoryDefaultJob::SetSystemFactoryDefaultJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetSystemFactoryDefaultJob::setParameters( const dm::TDS__SetSystemFactoryDefault& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetSystemFactoryDefault dm::SetSystemFactoryDefaultJob::parameters() const
{
    return mParameters;
}

void dm::SetSystemFactoryDefaultJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetSystemFactoryDefault(mParameters.serialize(QString::fromLatin1("SetSystemFactoryDefault")));// elementargumentserializer.cpp:102
    _valueSetSystemFactoryDefault.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetSystemFactoryDefault.setQualified(true);
    message = _valueSetSystemFactoryDefault;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetSystemFactoryDefault"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetSystemFactoryDefaultResponse dm::SetSystemFactoryDefaultJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetSystemFactoryDefaultJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::UpgradeSystemFirmwareJob::UpgradeSystemFirmwareJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::UpgradeSystemFirmwareJob::setParameters( const dm::TDS__UpgradeSystemFirmware& arg0 )
{
    mParameters = arg0;
}

dm::TDS__UpgradeSystemFirmware dm::UpgradeSystemFirmwareJob::parameters() const
{
    return mParameters;
}

void dm::UpgradeSystemFirmwareJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUpgradeSystemFirmware(mParameters.serialize(QString::fromLatin1("UpgradeSystemFirmware")));// elementargumentserializer.cpp:102
    _valueUpgradeSystemFirmware.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueUpgradeSystemFirmware.setQualified(true);
    message = _valueUpgradeSystemFirmware;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("UpgradeSystemFirmware"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__UpgradeSystemFirmwareResponse dm::UpgradeSystemFirmwareJob::resultParameters() const
{
    return mResultParameters;
}

void dm::UpgradeSystemFirmwareJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SystemRebootJob::SystemRebootJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SystemRebootJob::setParameters( const dm::TDS__SystemReboot& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SystemReboot dm::SystemRebootJob::parameters() const
{
    return mParameters;
}

void dm::SystemRebootJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SystemReboot");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSystemReboot(mParameters.serialize(QString::fromLatin1("SystemReboot")));// elementargumentserializer.cpp:102
    _valueSystemReboot.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSystemReboot.setQualified(true);
    message = _valueSystemReboot;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SystemReboot"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SystemRebootResponse dm::SystemRebootJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SystemRebootJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::RestoreSystemJob::RestoreSystemJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::RestoreSystemJob::setParameters( const dm::TDS__RestoreSystem& arg0 )
{
    mParameters = arg0;
}

dm::TDS__RestoreSystem dm::RestoreSystemJob::parameters() const
{
    return mParameters;
}

void dm::RestoreSystemJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/RestoreSystem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRestoreSystem(mParameters.serialize(QString::fromLatin1("RestoreSystem")));// elementargumentserializer.cpp:102
    _valueRestoreSystem.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRestoreSystem.setQualified(true);
    message = _valueRestoreSystem;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("RestoreSystem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__RestoreSystemResponse dm::RestoreSystemJob::resultParameters() const
{
    return mResultParameters;
}

void dm::RestoreSystemJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetSystemBackupJob::GetSystemBackupJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetSystemBackupJob::setParameters( const dm::TDS__GetSystemBackup& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetSystemBackup dm::GetSystemBackupJob::parameters() const
{
    return mParameters;
}

void dm::GetSystemBackupJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemBackup");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemBackup(mParameters.serialize(QString::fromLatin1("GetSystemBackup")));// elementargumentserializer.cpp:102
    _valueGetSystemBackup.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemBackup.setQualified(true);
    message = _valueGetSystemBackup;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetSystemBackup"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetSystemBackupResponse dm::GetSystemBackupJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetSystemBackupJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetSystemLogJob::GetSystemLogJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetSystemLogJob::setParameters( const dm::TDS__GetSystemLog& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetSystemLog dm::GetSystemLogJob::parameters() const
{
    return mParameters;
}

void dm::GetSystemLogJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemLog");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemLog(mParameters.serialize(QString::fromLatin1("GetSystemLog")));// elementargumentserializer.cpp:102
    _valueGetSystemLog.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemLog.setQualified(true);
    message = _valueGetSystemLog;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetSystemLog"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetSystemLogResponse dm::GetSystemLogJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetSystemLogJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetSystemSupportInformationJob::GetSystemSupportInformationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetSystemSupportInformationJob::setParameters( const dm::TDS__GetSystemSupportInformation& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetSystemSupportInformation dm::GetSystemSupportInformationJob::parameters() const
{
    return mParameters;
}

void dm::GetSystemSupportInformationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemSupportInformation(mParameters.serialize(QString::fromLatin1("GetSystemSupportInformation")));// elementargumentserializer.cpp:102
    _valueGetSystemSupportInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemSupportInformation.setQualified(true);
    message = _valueGetSystemSupportInformation;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetSystemSupportInformation"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetSystemSupportInformationResponse dm::GetSystemSupportInformationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetSystemSupportInformationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetScopesJob::GetScopesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetScopesJob::setParameters( const dm::TDS__GetScopes& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetScopes dm::GetScopesJob::parameters() const
{
    return mParameters;
}

void dm::GetScopesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetScopes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetScopes(mParameters.serialize(QString::fromLatin1("GetScopes")));// elementargumentserializer.cpp:102
    _valueGetScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetScopes.setQualified(true);
    message = _valueGetScopes;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetScopes"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetScopesResponse dm::GetScopesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetScopesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetScopesJob::SetScopesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetScopesJob::setParameters( const dm::TDS__SetScopes& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetScopes dm::SetScopesJob::parameters() const
{
    return mParameters;
}

void dm::SetScopesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetScopes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetScopes(mParameters.serialize(QString::fromLatin1("SetScopes")));// elementargumentserializer.cpp:102
    _valueSetScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetScopes.setQualified(true);
    message = _valueSetScopes;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetScopes"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetScopesResponse dm::SetScopesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetScopesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::AddScopesJob::AddScopesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::AddScopesJob::setParameters( const dm::TDS__AddScopes& arg0 )
{
    mParameters = arg0;
}

dm::TDS__AddScopes dm::AddScopesJob::parameters() const
{
    return mParameters;
}

void dm::AddScopesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/AddScopes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueAddScopes(mParameters.serialize(QString::fromLatin1("AddScopes")));// elementargumentserializer.cpp:102
    _valueAddScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueAddScopes.setQualified(true);
    message = _valueAddScopes;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("AddScopes"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__AddScopesResponse dm::AddScopesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::AddScopesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::RemoveScopesJob::RemoveScopesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::RemoveScopesJob::setParameters( const dm::TDS__RemoveScopes& arg0 )
{
    mParameters = arg0;
}

dm::TDS__RemoveScopes dm::RemoveScopesJob::parameters() const
{
    return mParameters;
}

void dm::RemoveScopesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/RemoveScopes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRemoveScopes(mParameters.serialize(QString::fromLatin1("RemoveScopes")));// elementargumentserializer.cpp:102
    _valueRemoveScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRemoveScopes.setQualified(true);
    message = _valueRemoveScopes;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("RemoveScopes"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__RemoveScopesResponse dm::RemoveScopesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::RemoveScopesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetDiscoveryModeJob::GetDiscoveryModeJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetDiscoveryModeJob::setParameters( const dm::TDS__GetDiscoveryMode& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetDiscoveryMode dm::GetDiscoveryModeJob::parameters() const
{
    return mParameters;
}

void dm::GetDiscoveryModeJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDiscoveryMode(mParameters.serialize(QString::fromLatin1("GetDiscoveryMode")));// elementargumentserializer.cpp:102
    _valueGetDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDiscoveryMode.setQualified(true);
    message = _valueGetDiscoveryMode;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDiscoveryMode"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetDiscoveryModeResponse dm::GetDiscoveryModeJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetDiscoveryModeJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetDiscoveryModeJob::SetDiscoveryModeJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetDiscoveryModeJob::setParameters( const dm::TDS__SetDiscoveryMode& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetDiscoveryMode dm::SetDiscoveryModeJob::parameters() const
{
    return mParameters;
}

void dm::SetDiscoveryModeJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDiscoveryMode(mParameters.serialize(QString::fromLatin1("SetDiscoveryMode")));// elementargumentserializer.cpp:102
    _valueSetDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDiscoveryMode.setQualified(true);
    message = _valueSetDiscoveryMode;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetDiscoveryMode"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetDiscoveryModeResponse dm::SetDiscoveryModeJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetDiscoveryModeJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetRemoteDiscoveryModeJob::GetRemoteDiscoveryModeJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetRemoteDiscoveryModeJob::setParameters( const dm::TDS__GetRemoteDiscoveryMode& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetRemoteDiscoveryMode dm::GetRemoteDiscoveryModeJob::parameters() const
{
    return mParameters;
}

void dm::GetRemoteDiscoveryModeJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetRemoteDiscoveryMode(mParameters.serialize(QString::fromLatin1("GetRemoteDiscoveryMode")));// elementargumentserializer.cpp:102
    _valueGetRemoteDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetRemoteDiscoveryMode.setQualified(true);
    message = _valueGetRemoteDiscoveryMode;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetRemoteDiscoveryMode"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetRemoteDiscoveryModeResponse dm::GetRemoteDiscoveryModeJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetRemoteDiscoveryModeJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetRemoteDiscoveryModeJob::SetRemoteDiscoveryModeJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetRemoteDiscoveryModeJob::setParameters( const dm::TDS__SetRemoteDiscoveryMode& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetRemoteDiscoveryMode dm::SetRemoteDiscoveryModeJob::parameters() const
{
    return mParameters;
}

void dm::SetRemoteDiscoveryModeJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetRemoteDiscoveryMode(mParameters.serialize(QString::fromLatin1("SetRemoteDiscoveryMode")));// elementargumentserializer.cpp:102
    _valueSetRemoteDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetRemoteDiscoveryMode.setQualified(true);
    message = _valueSetRemoteDiscoveryMode;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetRemoteDiscoveryMode"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetRemoteDiscoveryModeResponse dm::SetRemoteDiscoveryModeJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetRemoteDiscoveryModeJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetDPAddressesJob::GetDPAddressesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetDPAddressesJob::setParameters( const dm::TDS__GetDPAddresses& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetDPAddresses dm::GetDPAddressesJob::parameters() const
{
    return mParameters;
}

void dm::GetDPAddressesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDPAddresses");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDPAddresses(mParameters.serialize(QString::fromLatin1("GetDPAddresses")));// elementargumentserializer.cpp:102
    _valueGetDPAddresses.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDPAddresses.setQualified(true);
    message = _valueGetDPAddresses;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDPAddresses"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetDPAddressesResponse dm::GetDPAddressesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetDPAddressesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetDPAddressesJob::SetDPAddressesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetDPAddressesJob::setParameters( const dm::TDS__SetDPAddresses& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetDPAddresses dm::SetDPAddressesJob::parameters() const
{
    return mParameters;
}

void dm::SetDPAddressesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDPAddresses");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDPAddresses(mParameters.serialize(QString::fromLatin1("SetDPAddresses")));// elementargumentserializer.cpp:102
    _valueSetDPAddresses.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDPAddresses.setQualified(true);
    message = _valueSetDPAddresses;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetDPAddresses"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetDPAddressesResponse dm::SetDPAddressesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetDPAddressesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetEndpointReferenceJob::GetEndpointReferenceJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetEndpointReferenceJob::setParameters( const dm::TDS__GetEndpointReference& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetEndpointReference dm::GetEndpointReferenceJob::parameters() const
{
    return mParameters;
}

void dm::GetEndpointReferenceJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetEndpointReference");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetEndpointReference(mParameters.serialize(QString::fromLatin1("GetEndpointReference")));// elementargumentserializer.cpp:102
    _valueGetEndpointReference.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetEndpointReference.setQualified(true);
    message = _valueGetEndpointReference;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetEndpointReference"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetEndpointReferenceResponse dm::GetEndpointReferenceJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetEndpointReferenceJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetRemoteUserJob::GetRemoteUserJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetRemoteUserJob::setParameters( const dm::TDS__GetRemoteUser& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetRemoteUser dm::GetRemoteUserJob::parameters() const
{
    return mParameters;
}

void dm::GetRemoteUserJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetRemoteUser");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetRemoteUser(mParameters.serialize(QString::fromLatin1("GetRemoteUser")));// elementargumentserializer.cpp:102
    _valueGetRemoteUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetRemoteUser.setQualified(true);
    message = _valueGetRemoteUser;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetRemoteUser"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetRemoteUserResponse dm::GetRemoteUserJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetRemoteUserJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetRemoteUserJob::SetRemoteUserJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetRemoteUserJob::setParameters( const dm::TDS__SetRemoteUser& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetRemoteUser dm::SetRemoteUserJob::parameters() const
{
    return mParameters;
}

void dm::SetRemoteUserJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetRemoteUser");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetRemoteUser(mParameters.serialize(QString::fromLatin1("SetRemoteUser")));// elementargumentserializer.cpp:102
    _valueSetRemoteUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetRemoteUser.setQualified(true);
    message = _valueSetRemoteUser;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetRemoteUser"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetRemoteUserResponse dm::SetRemoteUserJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetRemoteUserJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetUsersJob::GetUsersJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetUsersJob::setParameters( const dm::TDS__GetUsers& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetUsers dm::GetUsersJob::parameters() const
{
    return mParameters;
}

void dm::GetUsersJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetUsers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetUsers(mParameters.serialize(QString::fromLatin1("GetUsers")));// elementargumentserializer.cpp:102
    _valueGetUsers.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetUsers.setQualified(true);
    message = _valueGetUsers;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetUsers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetUsersResponse dm::GetUsersJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetUsersJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::CreateUsersJob::CreateUsersJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::CreateUsersJob::setParameters( const dm::TDS__CreateUsers& arg0 )
{
    mParameters = arg0;
}

dm::TDS__CreateUsers dm::CreateUsersJob::parameters() const
{
    return mParameters;
}

void dm::CreateUsersJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/CreateUsers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateUsers(mParameters.serialize(QString::fromLatin1("CreateUsers")));// elementargumentserializer.cpp:102
    _valueCreateUsers.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCreateUsers.setQualified(true);
    message = _valueCreateUsers;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateUsers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__CreateUsersResponse dm::CreateUsersJob::resultParameters() const
{
    return mResultParameters;
}

void dm::CreateUsersJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::DeleteUsersJob::DeleteUsersJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::DeleteUsersJob::setParameters( const dm::TDS__DeleteUsers& arg0 )
{
    mParameters = arg0;
}

dm::TDS__DeleteUsers dm::DeleteUsersJob::parameters() const
{
    return mParameters;
}

void dm::DeleteUsersJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/DeleteUsers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteUsers(mParameters.serialize(QString::fromLatin1("DeleteUsers")));// elementargumentserializer.cpp:102
    _valueDeleteUsers.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDeleteUsers.setQualified(true);
    message = _valueDeleteUsers;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("DeleteUsers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__DeleteUsersResponse dm::DeleteUsersJob::resultParameters() const
{
    return mResultParameters;
}

void dm::DeleteUsersJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetUserJob::SetUserJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetUserJob::setParameters( const dm::TDS__SetUser& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetUser dm::SetUserJob::parameters() const
{
    return mParameters;
}

void dm::SetUserJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetUser");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetUser(mParameters.serialize(QString::fromLatin1("SetUser")));// elementargumentserializer.cpp:102
    _valueSetUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetUser.setQualified(true);
    message = _valueSetUser;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetUser"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetUserResponse dm::SetUserJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetUserJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetWsdlUrlJob::GetWsdlUrlJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetWsdlUrlJob::setParameters( const dm::TDS__GetWsdlUrl& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetWsdlUrl dm::GetWsdlUrlJob::parameters() const
{
    return mParameters;
}

void dm::GetWsdlUrlJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetWsdlUrl(mParameters.serialize(QString::fromLatin1("GetWsdlUrl")));// elementargumentserializer.cpp:102
    _valueGetWsdlUrl.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetWsdlUrl.setQualified(true);
    message = _valueGetWsdlUrl;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetWsdlUrl"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetWsdlUrlResponse dm::GetWsdlUrlJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetWsdlUrlJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetCapabilitiesJob::GetCapabilitiesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetCapabilitiesJob::setParameters( const dm::TDS__GetCapabilities& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetCapabilities dm::GetCapabilitiesJob::parameters() const
{
    return mParameters;
}

void dm::GetCapabilitiesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCapabilities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCapabilities(mParameters.serialize(QString::fromLatin1("GetCapabilities")));// elementargumentserializer.cpp:102
    _valueGetCapabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCapabilities.setQualified(true);
    message = _valueGetCapabilities;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetCapabilities"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetCapabilitiesResponse dm::GetCapabilitiesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetCapabilitiesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetHostnameJob::GetHostnameJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetHostnameJob::setParameters( const dm::TDS__GetHostname& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetHostname dm::GetHostnameJob::parameters() const
{
    return mParameters;
}

void dm::GetHostnameJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetHostname");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetHostname(mParameters.serialize(QString::fromLatin1("GetHostname")));// elementargumentserializer.cpp:102
    _valueGetHostname.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetHostname.setQualified(true);
    message = _valueGetHostname;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetHostname"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetHostnameResponse dm::GetHostnameJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetHostnameJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetHostnameJob::SetHostnameJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetHostnameJob::setParameters( const dm::TDS__SetHostname& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetHostname dm::SetHostnameJob::parameters() const
{
    return mParameters;
}

void dm::SetHostnameJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetHostname");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetHostname(mParameters.serialize(QString::fromLatin1("SetHostname")));// elementargumentserializer.cpp:102
    _valueSetHostname.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetHostname.setQualified(true);
    message = _valueSetHostname;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetHostname"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetHostnameResponse dm::SetHostnameJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetHostnameJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetHostnameFromDHCPJob::SetHostnameFromDHCPJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetHostnameFromDHCPJob::setParameters( const dm::TDS__SetHostnameFromDHCP& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetHostnameFromDHCP dm::SetHostnameFromDHCPJob::parameters() const
{
    return mParameters;
}

void dm::SetHostnameFromDHCPJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetHostnameFromDHCP(mParameters.serialize(QString::fromLatin1("SetHostnameFromDHCP")));// elementargumentserializer.cpp:102
    _valueSetHostnameFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetHostnameFromDHCP.setQualified(true);
    message = _valueSetHostnameFromDHCP;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetHostnameFromDHCP"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetHostnameFromDHCPResponse dm::SetHostnameFromDHCPJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetHostnameFromDHCPJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetDNSJob::GetDNSJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetDNSJob::setParameters( const dm::TDS__GetDNS& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetDNS dm::GetDNSJob::parameters() const
{
    return mParameters;
}

void dm::GetDNSJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDNS");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDNS(mParameters.serialize(QString::fromLatin1("GetDNS")));// elementargumentserializer.cpp:102
    _valueGetDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDNS.setQualified(true);
    message = _valueGetDNS;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDNS"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetDNSResponse dm::GetDNSJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetDNSJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetDNSJob::SetDNSJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetDNSJob::setParameters( const dm::TDS__SetDNS& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetDNS dm::SetDNSJob::parameters() const
{
    return mParameters;
}

void dm::SetDNSJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDNS");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDNS(mParameters.serialize(QString::fromLatin1("SetDNS")));// elementargumentserializer.cpp:102
    _valueSetDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDNS.setQualified(true);
    message = _valueSetDNS;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetDNS"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetDNSResponse dm::SetDNSJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetDNSJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetNTPJob::GetNTPJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetNTPJob::setParameters( const dm::TDS__GetNTP& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetNTP dm::GetNTPJob::parameters() const
{
    return mParameters;
}

void dm::GetNTPJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetNTP");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNTP(mParameters.serialize(QString::fromLatin1("GetNTP")));// elementargumentserializer.cpp:102
    _valueGetNTP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetNTP.setQualified(true);
    message = _valueGetNTP;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetNTP"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetNTPResponse dm::GetNTPJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetNTPJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetNTPJob::SetNTPJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetNTPJob::setParameters( const dm::TDS__SetNTP& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetNTP dm::SetNTPJob::parameters() const
{
    return mParameters;
}

void dm::SetNTPJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetNTP");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetNTP(mParameters.serialize(QString::fromLatin1("SetNTP")));// elementargumentserializer.cpp:102
    _valueSetNTP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetNTP.setQualified(true);
    message = _valueSetNTP;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetNTP"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetNTPResponse dm::SetNTPJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetNTPJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetDynamicDNSJob::GetDynamicDNSJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetDynamicDNSJob::setParameters( const dm::TDS__GetDynamicDNS& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetDynamicDNS dm::GetDynamicDNSJob::parameters() const
{
    return mParameters;
}

void dm::GetDynamicDNSJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDynamicDNS(mParameters.serialize(QString::fromLatin1("GetDynamicDNS")));// elementargumentserializer.cpp:102
    _valueGetDynamicDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDynamicDNS.setQualified(true);
    message = _valueGetDynamicDNS;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDynamicDNS"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetDynamicDNSResponse dm::GetDynamicDNSJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetDynamicDNSJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetDynamicDNSJob::SetDynamicDNSJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetDynamicDNSJob::setParameters( const dm::TDS__SetDynamicDNS& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetDynamicDNS dm::SetDynamicDNSJob::parameters() const
{
    return mParameters;
}

void dm::SetDynamicDNSJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDynamicDNS(mParameters.serialize(QString::fromLatin1("SetDynamicDNS")));// elementargumentserializer.cpp:102
    _valueSetDynamicDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDynamicDNS.setQualified(true);
    message = _valueSetDynamicDNS;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetDynamicDNS"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetDynamicDNSResponse dm::SetDynamicDNSJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetDynamicDNSJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetNetworkInterfacesJob::GetNetworkInterfacesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetNetworkInterfacesJob::setParameters( const dm::TDS__GetNetworkInterfaces& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetNetworkInterfaces dm::GetNetworkInterfacesJob::parameters() const
{
    return mParameters;
}

void dm::GetNetworkInterfacesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNetworkInterfaces(mParameters.serialize(QString::fromLatin1("GetNetworkInterfaces")));// elementargumentserializer.cpp:102
    _valueGetNetworkInterfaces.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetNetworkInterfaces.setQualified(true);
    message = _valueGetNetworkInterfaces;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetNetworkInterfaces"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetNetworkInterfacesResponse dm::GetNetworkInterfacesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetNetworkInterfacesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetNetworkInterfacesJob::SetNetworkInterfacesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetNetworkInterfacesJob::setParameters( const dm::TDS__SetNetworkInterfaces& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetNetworkInterfaces dm::SetNetworkInterfacesJob::parameters() const
{
    return mParameters;
}

void dm::SetNetworkInterfacesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetNetworkInterfaces(mParameters.serialize(QString::fromLatin1("SetNetworkInterfaces")));// elementargumentserializer.cpp:102
    _valueSetNetworkInterfaces.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetNetworkInterfaces.setQualified(true);
    message = _valueSetNetworkInterfaces;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetNetworkInterfaces"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetNetworkInterfacesResponse dm::SetNetworkInterfacesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetNetworkInterfacesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetNetworkProtocolsJob::GetNetworkProtocolsJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetNetworkProtocolsJob::setParameters( const dm::TDS__GetNetworkProtocols& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetNetworkProtocols dm::GetNetworkProtocolsJob::parameters() const
{
    return mParameters;
}

void dm::GetNetworkProtocolsJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNetworkProtocols(mParameters.serialize(QString::fromLatin1("GetNetworkProtocols")));// elementargumentserializer.cpp:102
    _valueGetNetworkProtocols.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetNetworkProtocols.setQualified(true);
    message = _valueGetNetworkProtocols;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetNetworkProtocols"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetNetworkProtocolsResponse dm::GetNetworkProtocolsJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetNetworkProtocolsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetNetworkProtocolsJob::SetNetworkProtocolsJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetNetworkProtocolsJob::setParameters( const dm::TDS__SetNetworkProtocols& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetNetworkProtocols dm::SetNetworkProtocolsJob::parameters() const
{
    return mParameters;
}

void dm::SetNetworkProtocolsJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetNetworkProtocols(mParameters.serialize(QString::fromLatin1("SetNetworkProtocols")));// elementargumentserializer.cpp:102
    _valueSetNetworkProtocols.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetNetworkProtocols.setQualified(true);
    message = _valueSetNetworkProtocols;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetNetworkProtocols"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetNetworkProtocolsResponse dm::SetNetworkProtocolsJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetNetworkProtocolsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetNetworkDefaultGatewayJob::GetNetworkDefaultGatewayJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetNetworkDefaultGatewayJob::setParameters( const dm::TDS__GetNetworkDefaultGateway& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetNetworkDefaultGateway dm::GetNetworkDefaultGatewayJob::parameters() const
{
    return mParameters;
}

void dm::GetNetworkDefaultGatewayJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNetworkDefaultGateway(mParameters.serialize(QString::fromLatin1("GetNetworkDefaultGateway")));// elementargumentserializer.cpp:102
    _valueGetNetworkDefaultGateway.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetNetworkDefaultGateway.setQualified(true);
    message = _valueGetNetworkDefaultGateway;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetNetworkDefaultGateway"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetNetworkDefaultGatewayResponse dm::GetNetworkDefaultGatewayJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetNetworkDefaultGatewayJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetNetworkDefaultGatewayJob::SetNetworkDefaultGatewayJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetNetworkDefaultGatewayJob::setParameters( const dm::TDS__SetNetworkDefaultGateway& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetNetworkDefaultGateway dm::SetNetworkDefaultGatewayJob::parameters() const
{
    return mParameters;
}

void dm::SetNetworkDefaultGatewayJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetNetworkDefaultGateway(mParameters.serialize(QString::fromLatin1("SetNetworkDefaultGateway")));// elementargumentserializer.cpp:102
    _valueSetNetworkDefaultGateway.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetNetworkDefaultGateway.setQualified(true);
    message = _valueSetNetworkDefaultGateway;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetNetworkDefaultGateway"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetNetworkDefaultGatewayResponse dm::SetNetworkDefaultGatewayJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetNetworkDefaultGatewayJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetZeroConfigurationJob::GetZeroConfigurationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetZeroConfigurationJob::setParameters( const dm::TDS__GetZeroConfiguration& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetZeroConfiguration dm::GetZeroConfigurationJob::parameters() const
{
    return mParameters;
}

void dm::GetZeroConfigurationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetZeroConfiguration(mParameters.serialize(QString::fromLatin1("GetZeroConfiguration")));// elementargumentserializer.cpp:102
    _valueGetZeroConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetZeroConfiguration.setQualified(true);
    message = _valueGetZeroConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetZeroConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetZeroConfigurationResponse dm::GetZeroConfigurationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetZeroConfigurationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetZeroConfigurationJob::SetZeroConfigurationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetZeroConfigurationJob::setParameters( const dm::TDS__SetZeroConfiguration& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetZeroConfiguration dm::SetZeroConfigurationJob::parameters() const
{
    return mParameters;
}

void dm::SetZeroConfigurationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetZeroConfiguration(mParameters.serialize(QString::fromLatin1("SetZeroConfiguration")));// elementargumentserializer.cpp:102
    _valueSetZeroConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetZeroConfiguration.setQualified(true);
    message = _valueSetZeroConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetZeroConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetZeroConfigurationResponse dm::SetZeroConfigurationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetZeroConfigurationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetIPAddressFilterJob::GetIPAddressFilterJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetIPAddressFilterJob::setParameters( const dm::TDS__GetIPAddressFilter& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetIPAddressFilter dm::GetIPAddressFilterJob::parameters() const
{
    return mParameters;
}

void dm::GetIPAddressFilterJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetIPAddressFilter(mParameters.serialize(QString::fromLatin1("GetIPAddressFilter")));// elementargumentserializer.cpp:102
    _valueGetIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetIPAddressFilter.setQualified(true);
    message = _valueGetIPAddressFilter;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetIPAddressFilter"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetIPAddressFilterResponse dm::GetIPAddressFilterJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetIPAddressFilterJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetIPAddressFilterJob::SetIPAddressFilterJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetIPAddressFilterJob::setParameters( const dm::TDS__SetIPAddressFilter& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetIPAddressFilter dm::SetIPAddressFilterJob::parameters() const
{
    return mParameters;
}

void dm::SetIPAddressFilterJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetIPAddressFilter(mParameters.serialize(QString::fromLatin1("SetIPAddressFilter")));// elementargumentserializer.cpp:102
    _valueSetIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetIPAddressFilter.setQualified(true);
    message = _valueSetIPAddressFilter;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetIPAddressFilter"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetIPAddressFilterResponse dm::SetIPAddressFilterJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetIPAddressFilterJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::AddIPAddressFilterJob::AddIPAddressFilterJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::AddIPAddressFilterJob::setParameters( const dm::TDS__AddIPAddressFilter& arg0 )
{
    mParameters = arg0;
}

dm::TDS__AddIPAddressFilter dm::AddIPAddressFilterJob::parameters() const
{
    return mParameters;
}

void dm::AddIPAddressFilterJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueAddIPAddressFilter(mParameters.serialize(QString::fromLatin1("AddIPAddressFilter")));// elementargumentserializer.cpp:102
    _valueAddIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueAddIPAddressFilter.setQualified(true);
    message = _valueAddIPAddressFilter;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("AddIPAddressFilter"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__AddIPAddressFilterResponse dm::AddIPAddressFilterJob::resultParameters() const
{
    return mResultParameters;
}

void dm::AddIPAddressFilterJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::RemoveIPAddressFilterJob::RemoveIPAddressFilterJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::RemoveIPAddressFilterJob::setParameters( const dm::TDS__RemoveIPAddressFilter& arg0 )
{
    mParameters = arg0;
}

dm::TDS__RemoveIPAddressFilter dm::RemoveIPAddressFilterJob::parameters() const
{
    return mParameters;
}

void dm::RemoveIPAddressFilterJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRemoveIPAddressFilter(mParameters.serialize(QString::fromLatin1("RemoveIPAddressFilter")));// elementargumentserializer.cpp:102
    _valueRemoveIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRemoveIPAddressFilter.setQualified(true);
    message = _valueRemoveIPAddressFilter;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("RemoveIPAddressFilter"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__RemoveIPAddressFilterResponse dm::RemoveIPAddressFilterJob::resultParameters() const
{
    return mResultParameters;
}

void dm::RemoveIPAddressFilterJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetAccessPolicyJob::GetAccessPolicyJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetAccessPolicyJob::setParameters( const dm::TDS__GetAccessPolicy& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetAccessPolicy dm::GetAccessPolicyJob::parameters() const
{
    return mParameters;
}

void dm::GetAccessPolicyJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetAccessPolicy(mParameters.serialize(QString::fromLatin1("GetAccessPolicy")));// elementargumentserializer.cpp:102
    _valueGetAccessPolicy.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetAccessPolicy.setQualified(true);
    message = _valueGetAccessPolicy;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetAccessPolicy"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetAccessPolicyResponse dm::GetAccessPolicyJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetAccessPolicyJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetAccessPolicyJob::SetAccessPolicyJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetAccessPolicyJob::setParameters( const dm::TDS__SetAccessPolicy& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetAccessPolicy dm::SetAccessPolicyJob::parameters() const
{
    return mParameters;
}

void dm::SetAccessPolicyJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetAccessPolicy(mParameters.serialize(QString::fromLatin1("SetAccessPolicy")));// elementargumentserializer.cpp:102
    _valueSetAccessPolicy.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetAccessPolicy.setQualified(true);
    message = _valueSetAccessPolicy;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetAccessPolicy"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetAccessPolicyResponse dm::SetAccessPolicyJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetAccessPolicyJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::CreateCertificateJob::CreateCertificateJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::CreateCertificateJob::setParameters( const dm::TDS__CreateCertificate& arg0 )
{
    mParameters = arg0;
}

dm::TDS__CreateCertificate dm::CreateCertificateJob::parameters() const
{
    return mParameters;
}

void dm::CreateCertificateJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/CreateCertificate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateCertificate(mParameters.serialize(QString::fromLatin1("CreateCertificate")));// elementargumentserializer.cpp:102
    _valueCreateCertificate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCreateCertificate.setQualified(true);
    message = _valueCreateCertificate;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateCertificate"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__CreateCertificateResponse dm::CreateCertificateJob::resultParameters() const
{
    return mResultParameters;
}

void dm::CreateCertificateJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetCertificatesJob::GetCertificatesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetCertificatesJob::setParameters( const dm::TDS__GetCertificates& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetCertificates dm::GetCertificatesJob::parameters() const
{
    return mParameters;
}

void dm::GetCertificatesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCertificates(mParameters.serialize(QString::fromLatin1("GetCertificates")));// elementargumentserializer.cpp:102
    _valueGetCertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCertificates.setQualified(true);
    message = _valueGetCertificates;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetCertificates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetCertificatesResponse dm::GetCertificatesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetCertificatesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetCertificatesStatusJob::GetCertificatesStatusJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetCertificatesStatusJob::setParameters( const dm::TDS__GetCertificatesStatus& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetCertificatesStatus dm::GetCertificatesStatusJob::parameters() const
{
    return mParameters;
}

void dm::GetCertificatesStatusJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCertificatesStatus(mParameters.serialize(QString::fromLatin1("GetCertificatesStatus")));// elementargumentserializer.cpp:102
    _valueGetCertificatesStatus.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCertificatesStatus.setQualified(true);
    message = _valueGetCertificatesStatus;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetCertificatesStatus"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetCertificatesStatusResponse dm::GetCertificatesStatusJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetCertificatesStatusJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetCertificatesStatusJob::SetCertificatesStatusJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetCertificatesStatusJob::setParameters( const dm::TDS__SetCertificatesStatus& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetCertificatesStatus dm::SetCertificatesStatusJob::parameters() const
{
    return mParameters;
}

void dm::SetCertificatesStatusJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetCertificatesStatus(mParameters.serialize(QString::fromLatin1("SetCertificatesStatus")));// elementargumentserializer.cpp:102
    _valueSetCertificatesStatus.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetCertificatesStatus.setQualified(true);
    message = _valueSetCertificatesStatus;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetCertificatesStatus"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetCertificatesStatusResponse dm::SetCertificatesStatusJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetCertificatesStatusJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::DeleteCertificatesJob::DeleteCertificatesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::DeleteCertificatesJob::setParameters( const dm::TDS__DeleteCertificates& arg0 )
{
    mParameters = arg0;
}

dm::TDS__DeleteCertificates dm::DeleteCertificatesJob::parameters() const
{
    return mParameters;
}

void dm::DeleteCertificatesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/DeleteCertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteCertificates(mParameters.serialize(QString::fromLatin1("DeleteCertificates")));// elementargumentserializer.cpp:102
    _valueDeleteCertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDeleteCertificates.setQualified(true);
    message = _valueDeleteCertificates;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("DeleteCertificates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__DeleteCertificatesResponse dm::DeleteCertificatesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::DeleteCertificatesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetPkcs10RequestJob::GetPkcs10RequestJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetPkcs10RequestJob::setParameters( const dm::TDS__GetPkcs10Request& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetPkcs10Request dm::GetPkcs10RequestJob::parameters() const
{
    return mParameters;
}

void dm::GetPkcs10RequestJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetPkcs10Request(mParameters.serialize(QString::fromLatin1("GetPkcs10Request")));// elementargumentserializer.cpp:102
    _valueGetPkcs10Request.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetPkcs10Request.setQualified(true);
    message = _valueGetPkcs10Request;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetPkcs10Request"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetPkcs10RequestResponse dm::GetPkcs10RequestJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetPkcs10RequestJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::LoadCertificatesJob::LoadCertificatesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::LoadCertificatesJob::setParameters( const dm::TDS__LoadCertificates& arg0 )
{
    mParameters = arg0;
}

dm::TDS__LoadCertificates dm::LoadCertificatesJob::parameters() const
{
    return mParameters;
}

void dm::LoadCertificatesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/LoadCertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueLoadCertificates(mParameters.serialize(QString::fromLatin1("LoadCertificates")));// elementargumentserializer.cpp:102
    _valueLoadCertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueLoadCertificates.setQualified(true);
    message = _valueLoadCertificates;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("LoadCertificates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__LoadCertificatesResponse dm::LoadCertificatesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::LoadCertificatesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetClientCertificateModeJob::GetClientCertificateModeJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetClientCertificateModeJob::setParameters( const dm::TDS__GetClientCertificateMode& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetClientCertificateMode dm::GetClientCertificateModeJob::parameters() const
{
    return mParameters;
}

void dm::GetClientCertificateModeJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetClientCertificateMode(mParameters.serialize(QString::fromLatin1("GetClientCertificateMode")));// elementargumentserializer.cpp:102
    _valueGetClientCertificateMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetClientCertificateMode.setQualified(true);
    message = _valueGetClientCertificateMode;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetClientCertificateMode"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetClientCertificateModeResponse dm::GetClientCertificateModeJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetClientCertificateModeJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetClientCertificateModeJob::SetClientCertificateModeJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetClientCertificateModeJob::setParameters( const dm::TDS__SetClientCertificateMode& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetClientCertificateMode dm::SetClientCertificateModeJob::parameters() const
{
    return mParameters;
}

void dm::SetClientCertificateModeJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetClientCertificateMode(mParameters.serialize(QString::fromLatin1("SetClientCertificateMode")));// elementargumentserializer.cpp:102
    _valueSetClientCertificateMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetClientCertificateMode.setQualified(true);
    message = _valueSetClientCertificateMode;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetClientCertificateMode"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetClientCertificateModeResponse dm::SetClientCertificateModeJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetClientCertificateModeJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetRelayOutputsJob::GetRelayOutputsJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetRelayOutputsJob::setParameters( const dm::TDS__GetRelayOutputs& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetRelayOutputs dm::GetRelayOutputsJob::parameters() const
{
    return mParameters;
}

void dm::GetRelayOutputsJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetRelayOutputs(mParameters.serialize(QString::fromLatin1("GetRelayOutputs")));// elementargumentserializer.cpp:102
    _valueGetRelayOutputs.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetRelayOutputs.setQualified(true);
    message = _valueGetRelayOutputs;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetRelayOutputs"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetRelayOutputsResponse dm::GetRelayOutputsJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetRelayOutputsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetRelayOutputSettingsJob::SetRelayOutputSettingsJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetRelayOutputSettingsJob::setParameters( const dm::TDS__SetRelayOutputSettings& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetRelayOutputSettings dm::SetRelayOutputSettingsJob::parameters() const
{
    return mParameters;
}

void dm::SetRelayOutputSettingsJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetRelayOutputSettings(mParameters.serialize(QString::fromLatin1("SetRelayOutputSettings")));// elementargumentserializer.cpp:102
    _valueSetRelayOutputSettings.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetRelayOutputSettings.setQualified(true);
    message = _valueSetRelayOutputSettings;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetRelayOutputSettings"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetRelayOutputSettingsResponse dm::SetRelayOutputSettingsJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetRelayOutputSettingsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetRelayOutputStateJob::SetRelayOutputStateJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetRelayOutputStateJob::setParameters( const dm::TDS__SetRelayOutputState& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetRelayOutputState dm::SetRelayOutputStateJob::parameters() const
{
    return mParameters;
}

void dm::SetRelayOutputStateJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetRelayOutputState(mParameters.serialize(QString::fromLatin1("SetRelayOutputState")));// elementargumentserializer.cpp:102
    _valueSetRelayOutputState.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetRelayOutputState.setQualified(true);
    message = _valueSetRelayOutputState;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetRelayOutputState"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetRelayOutputStateResponse dm::SetRelayOutputStateJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetRelayOutputStateJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SendAuxiliaryCommandJob::SendAuxiliaryCommandJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SendAuxiliaryCommandJob::setParameters( const dm::TDS__SendAuxiliaryCommand& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SendAuxiliaryCommand dm::SendAuxiliaryCommandJob::parameters() const
{
    return mParameters;
}

void dm::SendAuxiliaryCommandJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSendAuxiliaryCommand(mParameters.serialize(QString::fromLatin1("SendAuxiliaryCommand")));// elementargumentserializer.cpp:102
    _valueSendAuxiliaryCommand.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSendAuxiliaryCommand.setQualified(true);
    message = _valueSendAuxiliaryCommand;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SendAuxiliaryCommand"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SendAuxiliaryCommandResponse dm::SendAuxiliaryCommandJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SendAuxiliaryCommandJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetCACertificatesJob::GetCACertificatesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetCACertificatesJob::setParameters( const dm::TDS__GetCACertificates& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetCACertificates dm::GetCACertificatesJob::parameters() const
{
    return mParameters;
}

void dm::GetCACertificatesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCACertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCACertificates(mParameters.serialize(QString::fromLatin1("GetCACertificates")));// elementargumentserializer.cpp:102
    _valueGetCACertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCACertificates.setQualified(true);
    message = _valueGetCACertificates;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetCACertificates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetCACertificatesResponse dm::GetCACertificatesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetCACertificatesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::LoadCertificateWithPrivateKeyJob::LoadCertificateWithPrivateKeyJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::LoadCertificateWithPrivateKeyJob::setParameters( const dm::TDS__LoadCertificateWithPrivateKey& arg0 )
{
    mParameters = arg0;
}

dm::TDS__LoadCertificateWithPrivateKey dm::LoadCertificateWithPrivateKeyJob::parameters() const
{
    return mParameters;
}

void dm::LoadCertificateWithPrivateKeyJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueLoadCertificateWithPrivateKey(mParameters.serialize(QString::fromLatin1("LoadCertificateWithPrivateKey")));// elementargumentserializer.cpp:102
    _valueLoadCertificateWithPrivateKey.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueLoadCertificateWithPrivateKey.setQualified(true);
    message = _valueLoadCertificateWithPrivateKey;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("LoadCertificateWithPrivateKey"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__LoadCertificateWithPrivateKeyResponse dm::LoadCertificateWithPrivateKeyJob::resultParameters() const
{
    return mResultParameters;
}

void dm::LoadCertificateWithPrivateKeyJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetCertificateInformationJob::GetCertificateInformationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetCertificateInformationJob::setParameters( const dm::TDS__GetCertificateInformation& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetCertificateInformation dm::GetCertificateInformationJob::parameters() const
{
    return mParameters;
}

void dm::GetCertificateInformationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCertificateInformation(mParameters.serialize(QString::fromLatin1("GetCertificateInformation")));// elementargumentserializer.cpp:102
    _valueGetCertificateInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCertificateInformation.setQualified(true);
    message = _valueGetCertificateInformation;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetCertificateInformation"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetCertificateInformationResponse dm::GetCertificateInformationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetCertificateInformationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::LoadCACertificatesJob::LoadCACertificatesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::LoadCACertificatesJob::setParameters( const dm::TDS__LoadCACertificates& arg0 )
{
    mParameters = arg0;
}

dm::TDS__LoadCACertificates dm::LoadCACertificatesJob::parameters() const
{
    return mParameters;
}

void dm::LoadCACertificatesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/LoadCACertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueLoadCACertificates(mParameters.serialize(QString::fromLatin1("LoadCACertificates")));// elementargumentserializer.cpp:102
    _valueLoadCACertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueLoadCACertificates.setQualified(true);
    message = _valueLoadCACertificates;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("LoadCACertificates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__LoadCACertificatesResponse dm::LoadCACertificatesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::LoadCACertificatesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::CreateDot1XConfigurationJob::CreateDot1XConfigurationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::CreateDot1XConfigurationJob::setParameters( const dm::TDS__CreateDot1XConfiguration& arg0 )
{
    mParameters = arg0;
}

dm::TDS__CreateDot1XConfiguration dm::CreateDot1XConfigurationJob::parameters() const
{
    return mParameters;
}

void dm::CreateDot1XConfigurationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateDot1XConfiguration(mParameters.serialize(QString::fromLatin1("CreateDot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueCreateDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCreateDot1XConfiguration.setQualified(true);
    message = _valueCreateDot1XConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateDot1XConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__CreateDot1XConfigurationResponse dm::CreateDot1XConfigurationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::CreateDot1XConfigurationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetDot1XConfigurationJob::SetDot1XConfigurationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetDot1XConfigurationJob::setParameters( const dm::TDS__SetDot1XConfiguration& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetDot1XConfiguration dm::SetDot1XConfigurationJob::parameters() const
{
    return mParameters;
}

void dm::SetDot1XConfigurationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDot1XConfiguration(mParameters.serialize(QString::fromLatin1("SetDot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueSetDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDot1XConfiguration.setQualified(true);
    message = _valueSetDot1XConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetDot1XConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetDot1XConfigurationResponse dm::SetDot1XConfigurationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetDot1XConfigurationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetDot1XConfigurationJob::GetDot1XConfigurationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetDot1XConfigurationJob::setParameters( const dm::TDS__GetDot1XConfiguration& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetDot1XConfiguration dm::GetDot1XConfigurationJob::parameters() const
{
    return mParameters;
}

void dm::GetDot1XConfigurationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDot1XConfiguration(mParameters.serialize(QString::fromLatin1("GetDot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueGetDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDot1XConfiguration.setQualified(true);
    message = _valueGetDot1XConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDot1XConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetDot1XConfigurationResponse dm::GetDot1XConfigurationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetDot1XConfigurationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetDot1XConfigurationsJob::GetDot1XConfigurationsJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetDot1XConfigurationsJob::setParameters( const dm::TDS__GetDot1XConfigurations& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetDot1XConfigurations dm::GetDot1XConfigurationsJob::parameters() const
{
    return mParameters;
}

void dm::GetDot1XConfigurationsJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDot1XConfigurations(mParameters.serialize(QString::fromLatin1("GetDot1XConfigurations")));// elementargumentserializer.cpp:102
    _valueGetDot1XConfigurations.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDot1XConfigurations.setQualified(true);
    message = _valueGetDot1XConfigurations;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDot1XConfigurations"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetDot1XConfigurationsResponse dm::GetDot1XConfigurationsJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetDot1XConfigurationsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::DeleteDot1XConfigurationJob::DeleteDot1XConfigurationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::DeleteDot1XConfigurationJob::setParameters( const dm::TDS__DeleteDot1XConfiguration& arg0 )
{
    mParameters = arg0;
}

dm::TDS__DeleteDot1XConfiguration dm::DeleteDot1XConfigurationJob::parameters() const
{
    return mParameters;
}

void dm::DeleteDot1XConfigurationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteDot1XConfiguration(mParameters.serialize(QString::fromLatin1("DeleteDot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueDeleteDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDeleteDot1XConfiguration.setQualified(true);
    message = _valueDeleteDot1XConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("DeleteDot1XConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__DeleteDot1XConfigurationResponse dm::DeleteDot1XConfigurationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::DeleteDot1XConfigurationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetDot11CapabilitiesJob::GetDot11CapabilitiesJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetDot11CapabilitiesJob::setParameters( const dm::TDS__GetDot11Capabilities& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetDot11Capabilities dm::GetDot11CapabilitiesJob::parameters() const
{
    return mParameters;
}

void dm::GetDot11CapabilitiesJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDot11Capabilities(mParameters.serialize(QString::fromLatin1("GetDot11Capabilities")));// elementargumentserializer.cpp:102
    _valueGetDot11Capabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDot11Capabilities.setQualified(true);
    message = _valueGetDot11Capabilities;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDot11Capabilities"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetDot11CapabilitiesResponse dm::GetDot11CapabilitiesJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetDot11CapabilitiesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetDot11StatusJob::GetDot11StatusJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetDot11StatusJob::setParameters( const dm::TDS__GetDot11Status& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetDot11Status dm::GetDot11StatusJob::parameters() const
{
    return mParameters;
}

void dm::GetDot11StatusJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDot11Status");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDot11Status(mParameters.serialize(QString::fromLatin1("GetDot11Status")));// elementargumentserializer.cpp:102
    _valueGetDot11Status.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDot11Status.setQualified(true);
    message = _valueGetDot11Status;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDot11Status"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetDot11StatusResponse dm::GetDot11StatusJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetDot11StatusJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::ScanAvailableDot11NetworksJob::ScanAvailableDot11NetworksJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::ScanAvailableDot11NetworksJob::setParameters( const dm::TDS__ScanAvailableDot11Networks& arg0 )
{
    mParameters = arg0;
}

dm::TDS__ScanAvailableDot11Networks dm::ScanAvailableDot11NetworksJob::parameters() const
{
    return mParameters;
}

void dm::ScanAvailableDot11NetworksJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueScanAvailableDot11Networks(mParameters.serialize(QString::fromLatin1("ScanAvailableDot11Networks")));// elementargumentserializer.cpp:102
    _valueScanAvailableDot11Networks.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueScanAvailableDot11Networks.setQualified(true);
    message = _valueScanAvailableDot11Networks;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("ScanAvailableDot11Networks"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__ScanAvailableDot11NetworksResponse dm::ScanAvailableDot11NetworksJob::resultParameters() const
{
    return mResultParameters;
}

void dm::ScanAvailableDot11NetworksJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetSystemUrisJob::GetSystemUrisJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetSystemUrisJob::setParameters( const dm::TDS__GetSystemUris& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetSystemUris dm::GetSystemUrisJob::parameters() const
{
    return mParameters;
}

void dm::GetSystemUrisJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemUris");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemUris(mParameters.serialize(QString::fromLatin1("GetSystemUris")));// elementargumentserializer.cpp:102
    _valueGetSystemUris.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemUris.setQualified(true);
    message = _valueGetSystemUris;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetSystemUris"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetSystemUrisResponse dm::GetSystemUrisJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetSystemUrisJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::StartFirmwareUpgradeJob::StartFirmwareUpgradeJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::StartFirmwareUpgradeJob::setParameters( const dm::TDS__StartFirmwareUpgrade& arg0 )
{
    mParameters = arg0;
}

dm::TDS__StartFirmwareUpgrade dm::StartFirmwareUpgradeJob::parameters() const
{
    return mParameters;
}

void dm::StartFirmwareUpgradeJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueStartFirmwareUpgrade(mParameters.serialize(QString::fromLatin1("StartFirmwareUpgrade")));// elementargumentserializer.cpp:102
    _valueStartFirmwareUpgrade.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueStartFirmwareUpgrade.setQualified(true);
    message = _valueStartFirmwareUpgrade;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("StartFirmwareUpgrade"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__StartFirmwareUpgradeResponse dm::StartFirmwareUpgradeJob::resultParameters() const
{
    return mResultParameters;
}

void dm::StartFirmwareUpgradeJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::StartSystemRestoreJob::StartSystemRestoreJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::StartSystemRestoreJob::setParameters( const dm::TDS__StartSystemRestore& arg0 )
{
    mParameters = arg0;
}

dm::TDS__StartSystemRestore dm::StartSystemRestoreJob::parameters() const
{
    return mParameters;
}

void dm::StartSystemRestoreJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/StartSystemRestore");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueStartSystemRestore(mParameters.serialize(QString::fromLatin1("StartSystemRestore")));// elementargumentserializer.cpp:102
    _valueStartSystemRestore.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueStartSystemRestore.setQualified(true);
    message = _valueStartSystemRestore;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("StartSystemRestore"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__StartSystemRestoreResponse dm::StartSystemRestoreJob::resultParameters() const
{
    return mResultParameters;
}

void dm::StartSystemRestoreJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetStorageConfigurationsJob::GetStorageConfigurationsJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetStorageConfigurationsJob::setParameters( const dm::TDS__GetStorageConfigurations& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetStorageConfigurations dm::GetStorageConfigurationsJob::parameters() const
{
    return mParameters;
}

void dm::GetStorageConfigurationsJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurations");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetStorageConfigurations(mParameters.serialize(QString::fromLatin1("GetStorageConfigurations")));// elementargumentserializer.cpp:102
    _valueGetStorageConfigurations.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetStorageConfigurations.setQualified(true);
    message = _valueGetStorageConfigurations;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetStorageConfigurations"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetStorageConfigurationsResponse dm::GetStorageConfigurationsJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetStorageConfigurationsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::CreateStorageConfigurationJob::CreateStorageConfigurationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::CreateStorageConfigurationJob::setParameters( const dm::TDS__CreateStorageConfiguration& arg0 )
{
    mParameters = arg0;
}

dm::TDS__CreateStorageConfiguration dm::CreateStorageConfigurationJob::parameters() const
{
    return mParameters;
}

void dm::CreateStorageConfigurationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/CreateStorageConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateStorageConfiguration(mParameters.serialize(QString::fromLatin1("CreateStorageConfiguration")));// elementargumentserializer.cpp:102
    _valueCreateStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCreateStorageConfiguration.setQualified(true);
    message = _valueCreateStorageConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateStorageConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__CreateStorageConfigurationResponse dm::CreateStorageConfigurationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::CreateStorageConfigurationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::GetStorageConfigurationJob::GetStorageConfigurationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::GetStorageConfigurationJob::setParameters( const dm::TDS__GetStorageConfiguration& arg0 )
{
    mParameters = arg0;
}

dm::TDS__GetStorageConfiguration dm::GetStorageConfigurationJob::parameters() const
{
    return mParameters;
}

void dm::GetStorageConfigurationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetStorageConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetStorageConfiguration(mParameters.serialize(QString::fromLatin1("GetStorageConfiguration")));// elementargumentserializer.cpp:102
    _valueGetStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetStorageConfiguration.setQualified(true);
    message = _valueGetStorageConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetStorageConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__GetStorageConfigurationResponse dm::GetStorageConfigurationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::GetStorageConfigurationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::SetStorageConfigurationJob::SetStorageConfigurationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::SetStorageConfigurationJob::setParameters( const dm::TDS__SetStorageConfiguration& arg0 )
{
    mParameters = arg0;
}

dm::TDS__SetStorageConfiguration dm::SetStorageConfigurationJob::parameters() const
{
    return mParameters;
}

void dm::SetStorageConfigurationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetStorageConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetStorageConfiguration(mParameters.serialize(QString::fromLatin1("SetStorageConfiguration")));// elementargumentserializer.cpp:102
    _valueSetStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetStorageConfiguration.setQualified(true);
    message = _valueSetStorageConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetStorageConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__SetStorageConfigurationResponse dm::SetStorageConfigurationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::SetStorageConfigurationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


dm::DeleteStorageConfigurationJob::DeleteStorageConfigurationJob( dm::DeviceBindingService* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void dm::DeleteStorageConfigurationJob::setParameters( const dm::TDS__DeleteStorageConfiguration& arg0 )
{
    mParameters = arg0;
}

dm::TDS__DeleteStorageConfiguration dm::DeleteStorageConfigurationJob::parameters() const
{
    return mParameters;
}

void dm::DeleteStorageConfigurationJob::doStart()
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteStorageConfiguration(mParameters.serialize(QString::fromLatin1("DeleteStorageConfiguration")));// elementargumentserializer.cpp:102
    _valueDeleteStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDeleteStorageConfiguration.setQualified(true);
    message = _valueDeleteStorageConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("DeleteStorageConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

dm::TDS__DeleteStorageConfigurationResponse dm::DeleteStorageConfigurationJob::resultParameters() const
{
    return mResultParameters;
}

void dm::DeleteStorageConfigurationJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:553
    }
    emitFinished(_reply, watcher->returnHeaders());
}


class dm::DeviceBindingService::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

dm::DeviceBindingService::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


dm::DeviceBindingService::DeviceBindingService( QObject* _parent )
    : QObject(_parent), d_ptr(new PrivateDPtr)
{
}

dm::DeviceBindingService::~DeviceBindingService()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void dm::DeviceBindingService::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void dm::DeviceBindingService::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

void dm::DeviceBindingService::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

QString dm::DeviceBindingService::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *dm::DeviceBindingService::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("");
        const QString messageNamespace = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_2 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *dm::DeviceBindingService::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const DeviceBindingService*>( this )->clientInterface() );
}

dm::TDS__GetServicesResponse dm::DeviceBindingService::getServices( const dm::TDS__GetServices& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetServices");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetServices(parameters.serialize(QString::fromLatin1("GetServices")));// elementargumentserializer.cpp:102
    _valueGetServices.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetServices.setQualified(true);
    message = _valueGetServices;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetServices"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetServicesResponse();
    dm::TDS__GetServicesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetServices( const dm::TDS__GetServices& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetServices");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetServices(parameters.serialize(QString::fromLatin1("GetServices")));// elementargumentserializer.cpp:102
    _valueGetServices.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetServices.setQualified(true);
    message = _valueGetServices;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetServices"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetServicesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetServicesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getServicesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getServices"), reply);
    } else {
        dm::TDS__GetServicesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getServicesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetServiceCapabilitiesResponse dm::DeviceBindingService::getServiceCapabilities( const dm::TDS__GetServiceCapabilities& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetServiceCapabilities(parameters.serialize(QString::fromLatin1("GetServiceCapabilities")));// elementargumentserializer.cpp:102
    _valueGetServiceCapabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetServiceCapabilities.setQualified(true);
    message = _valueGetServiceCapabilities;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetServiceCapabilities"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetServiceCapabilitiesResponse();
    dm::TDS__GetServiceCapabilitiesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetServiceCapabilities( const dm::TDS__GetServiceCapabilities& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetServiceCapabilities(parameters.serialize(QString::fromLatin1("GetServiceCapabilities")));// elementargumentserializer.cpp:102
    _valueGetServiceCapabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetServiceCapabilities.setQualified(true);
    message = _valueGetServiceCapabilities;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetServiceCapabilities"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetServiceCapabilitiesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetServiceCapabilitiesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getServiceCapabilitiesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getServiceCapabilities"), reply);
    } else {
        dm::TDS__GetServiceCapabilitiesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getServiceCapabilitiesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetDeviceInformationResponse dm::DeviceBindingService::getDeviceInformation( const dm::TDS__GetDeviceInformation& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDeviceInformation(parameters.serialize(QString::fromLatin1("GetDeviceInformation")));// elementargumentserializer.cpp:102
    _valueGetDeviceInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDeviceInformation.setQualified(true);
    message = _valueGetDeviceInformation;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDeviceInformation"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetDeviceInformationResponse();
    dm::TDS__GetDeviceInformationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetDeviceInformation( const dm::TDS__GetDeviceInformation& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDeviceInformation(parameters.serialize(QString::fromLatin1("GetDeviceInformation")));// elementargumentserializer.cpp:102
    _valueGetDeviceInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDeviceInformation.setQualified(true);
    message = _valueGetDeviceInformation;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDeviceInformation"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDeviceInformationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetDeviceInformationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDeviceInformationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getDeviceInformation"), reply);
    } else {
        dm::TDS__GetDeviceInformationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getDeviceInformationDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetSystemDateAndTimeResponse dm::DeviceBindingService::setSystemDateAndTime( const dm::TDS__SetSystemDateAndTime& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetSystemDateAndTime(parameters.serialize(QString::fromLatin1("SetSystemDateAndTime")));// elementargumentserializer.cpp:102
    _valueSetSystemDateAndTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetSystemDateAndTime.setQualified(true);
    message = _valueSetSystemDateAndTime;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetSystemDateAndTime"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetSystemDateAndTimeResponse();
    dm::TDS__SetSystemDateAndTimeResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetSystemDateAndTime( const dm::TDS__SetSystemDateAndTime& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetSystemDateAndTime(parameters.serialize(QString::fromLatin1("SetSystemDateAndTime")));// elementargumentserializer.cpp:102
    _valueSetSystemDateAndTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetSystemDateAndTime.setQualified(true);
    message = _valueSetSystemDateAndTime;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetSystemDateAndTime"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetSystemDateAndTimeFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetSystemDateAndTimeFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setSystemDateAndTimeError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setSystemDateAndTime"), reply);
    } else {
        dm::TDS__SetSystemDateAndTimeResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setSystemDateAndTimeDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetSystemDateAndTimeResponse dm::DeviceBindingService::getSystemDateAndTime( const dm::TDS__GetSystemDateAndTime& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemDateAndTime(parameters.serialize(QString::fromLatin1("GetSystemDateAndTime")));// elementargumentserializer.cpp:102
    _valueGetSystemDateAndTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemDateAndTime.setQualified(true);
    message = _valueGetSystemDateAndTime;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetSystemDateAndTime"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetSystemDateAndTimeResponse();
    dm::TDS__GetSystemDateAndTimeResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetSystemDateAndTime( const dm::TDS__GetSystemDateAndTime& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemDateAndTime(parameters.serialize(QString::fromLatin1("GetSystemDateAndTime")));// elementargumentserializer.cpp:102
    _valueGetSystemDateAndTime.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemDateAndTime.setQualified(true);
    message = _valueGetSystemDateAndTime;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetSystemDateAndTime"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetSystemDateAndTimeFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetSystemDateAndTimeFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getSystemDateAndTimeError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getSystemDateAndTime"), reply);
    } else {
        dm::TDS__GetSystemDateAndTimeResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getSystemDateAndTimeDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetSystemFactoryDefaultResponse dm::DeviceBindingService::setSystemFactoryDefault( const dm::TDS__SetSystemFactoryDefault& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetSystemFactoryDefault(parameters.serialize(QString::fromLatin1("SetSystemFactoryDefault")));// elementargumentserializer.cpp:102
    _valueSetSystemFactoryDefault.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetSystemFactoryDefault.setQualified(true);
    message = _valueSetSystemFactoryDefault;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetSystemFactoryDefault"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetSystemFactoryDefaultResponse();
    dm::TDS__SetSystemFactoryDefaultResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetSystemFactoryDefault( const dm::TDS__SetSystemFactoryDefault& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetSystemFactoryDefault(parameters.serialize(QString::fromLatin1("SetSystemFactoryDefault")));// elementargumentserializer.cpp:102
    _valueSetSystemFactoryDefault.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetSystemFactoryDefault.setQualified(true);
    message = _valueSetSystemFactoryDefault;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetSystemFactoryDefault"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetSystemFactoryDefaultFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetSystemFactoryDefaultFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setSystemFactoryDefaultError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setSystemFactoryDefault"), reply);
    } else {
        dm::TDS__SetSystemFactoryDefaultResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setSystemFactoryDefaultDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__UpgradeSystemFirmwareResponse dm::DeviceBindingService::upgradeSystemFirmware( const dm::TDS__UpgradeSystemFirmware& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUpgradeSystemFirmware(parameters.serialize(QString::fromLatin1("UpgradeSystemFirmware")));// elementargumentserializer.cpp:102
    _valueUpgradeSystemFirmware.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueUpgradeSystemFirmware.setQualified(true);
    message = _valueUpgradeSystemFirmware;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("UpgradeSystemFirmware"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__UpgradeSystemFirmwareResponse();
    dm::TDS__UpgradeSystemFirmwareResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncUpgradeSystemFirmware( const dm::TDS__UpgradeSystemFirmware& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueUpgradeSystemFirmware(parameters.serialize(QString::fromLatin1("UpgradeSystemFirmware")));// elementargumentserializer.cpp:102
    _valueUpgradeSystemFirmware.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueUpgradeSystemFirmware.setQualified(true);
    message = _valueUpgradeSystemFirmware;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("UpgradeSystemFirmware"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotUpgradeSystemFirmwareFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotUpgradeSystemFirmwareFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT upgradeSystemFirmwareError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("upgradeSystemFirmware"), reply);
    } else {
        dm::TDS__UpgradeSystemFirmwareResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT upgradeSystemFirmwareDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SystemRebootResponse dm::DeviceBindingService::systemReboot( const dm::TDS__SystemReboot& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SystemReboot");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSystemReboot(parameters.serialize(QString::fromLatin1("SystemReboot")));// elementargumentserializer.cpp:102
    _valueSystemReboot.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSystemReboot.setQualified(true);
    message = _valueSystemReboot;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SystemReboot"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SystemRebootResponse();
    dm::TDS__SystemRebootResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSystemReboot( const dm::TDS__SystemReboot& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SystemReboot");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSystemReboot(parameters.serialize(QString::fromLatin1("SystemReboot")));// elementargumentserializer.cpp:102
    _valueSystemReboot.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSystemReboot.setQualified(true);
    message = _valueSystemReboot;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SystemReboot"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSystemRebootFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSystemRebootFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT systemRebootError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("systemReboot"), reply);
    } else {
        dm::TDS__SystemRebootResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT systemRebootDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__RestoreSystemResponse dm::DeviceBindingService::restoreSystem( const dm::TDS__RestoreSystem& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/RestoreSystem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRestoreSystem(parameters.serialize(QString::fromLatin1("RestoreSystem")));// elementargumentserializer.cpp:102
    _valueRestoreSystem.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRestoreSystem.setQualified(true);
    message = _valueRestoreSystem;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("RestoreSystem"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__RestoreSystemResponse();
    dm::TDS__RestoreSystemResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncRestoreSystem( const dm::TDS__RestoreSystem& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/RestoreSystem");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRestoreSystem(parameters.serialize(QString::fromLatin1("RestoreSystem")));// elementargumentserializer.cpp:102
    _valueRestoreSystem.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRestoreSystem.setQualified(true);
    message = _valueRestoreSystem;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("RestoreSystem"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotRestoreSystemFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotRestoreSystemFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT restoreSystemError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("restoreSystem"), reply);
    } else {
        dm::TDS__RestoreSystemResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT restoreSystemDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetSystemBackupResponse dm::DeviceBindingService::getSystemBackup( const dm::TDS__GetSystemBackup& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemBackup");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemBackup(parameters.serialize(QString::fromLatin1("GetSystemBackup")));// elementargumentserializer.cpp:102
    _valueGetSystemBackup.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemBackup.setQualified(true);
    message = _valueGetSystemBackup;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetSystemBackup"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetSystemBackupResponse();
    dm::TDS__GetSystemBackupResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetSystemBackup( const dm::TDS__GetSystemBackup& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemBackup");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemBackup(parameters.serialize(QString::fromLatin1("GetSystemBackup")));// elementargumentserializer.cpp:102
    _valueGetSystemBackup.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemBackup.setQualified(true);
    message = _valueGetSystemBackup;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetSystemBackup"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetSystemBackupFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetSystemBackupFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getSystemBackupError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getSystemBackup"), reply);
    } else {
        dm::TDS__GetSystemBackupResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getSystemBackupDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetSystemLogResponse dm::DeviceBindingService::getSystemLog( const dm::TDS__GetSystemLog& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemLog");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemLog(parameters.serialize(QString::fromLatin1("GetSystemLog")));// elementargumentserializer.cpp:102
    _valueGetSystemLog.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemLog.setQualified(true);
    message = _valueGetSystemLog;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetSystemLog"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetSystemLogResponse();
    dm::TDS__GetSystemLogResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetSystemLog( const dm::TDS__GetSystemLog& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemLog");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemLog(parameters.serialize(QString::fromLatin1("GetSystemLog")));// elementargumentserializer.cpp:102
    _valueGetSystemLog.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemLog.setQualified(true);
    message = _valueGetSystemLog;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetSystemLog"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetSystemLogFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetSystemLogFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getSystemLogError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getSystemLog"), reply);
    } else {
        dm::TDS__GetSystemLogResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getSystemLogDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetSystemSupportInformationResponse dm::DeviceBindingService::getSystemSupportInformation( const dm::TDS__GetSystemSupportInformation& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemSupportInformation(parameters.serialize(QString::fromLatin1("GetSystemSupportInformation")));// elementargumentserializer.cpp:102
    _valueGetSystemSupportInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemSupportInformation.setQualified(true);
    message = _valueGetSystemSupportInformation;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetSystemSupportInformation"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetSystemSupportInformationResponse();
    dm::TDS__GetSystemSupportInformationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetSystemSupportInformation( const dm::TDS__GetSystemSupportInformation& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemSupportInformation(parameters.serialize(QString::fromLatin1("GetSystemSupportInformation")));// elementargumentserializer.cpp:102
    _valueGetSystemSupportInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemSupportInformation.setQualified(true);
    message = _valueGetSystemSupportInformation;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetSystemSupportInformation"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetSystemSupportInformationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetSystemSupportInformationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getSystemSupportInformationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getSystemSupportInformation"), reply);
    } else {
        dm::TDS__GetSystemSupportInformationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getSystemSupportInformationDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetScopesResponse dm::DeviceBindingService::getScopes( const dm::TDS__GetScopes& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetScopes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetScopes(parameters.serialize(QString::fromLatin1("GetScopes")));// elementargumentserializer.cpp:102
    _valueGetScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetScopes.setQualified(true);
    message = _valueGetScopes;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetScopes"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetScopesResponse();
    dm::TDS__GetScopesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetScopes( const dm::TDS__GetScopes& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetScopes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetScopes(parameters.serialize(QString::fromLatin1("GetScopes")));// elementargumentserializer.cpp:102
    _valueGetScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetScopes.setQualified(true);
    message = _valueGetScopes;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetScopes"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetScopesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetScopesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getScopesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getScopes"), reply);
    } else {
        dm::TDS__GetScopesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getScopesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetScopesResponse dm::DeviceBindingService::setScopes( const dm::TDS__SetScopes& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetScopes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetScopes(parameters.serialize(QString::fromLatin1("SetScopes")));// elementargumentserializer.cpp:102
    _valueSetScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetScopes.setQualified(true);
    message = _valueSetScopes;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetScopes"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetScopesResponse();
    dm::TDS__SetScopesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetScopes( const dm::TDS__SetScopes& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetScopes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetScopes(parameters.serialize(QString::fromLatin1("SetScopes")));// elementargumentserializer.cpp:102
    _valueSetScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetScopes.setQualified(true);
    message = _valueSetScopes;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetScopes"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetScopesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetScopesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setScopesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setScopes"), reply);
    } else {
        dm::TDS__SetScopesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setScopesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__AddScopesResponse dm::DeviceBindingService::addScopes( const dm::TDS__AddScopes& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/AddScopes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueAddScopes(parameters.serialize(QString::fromLatin1("AddScopes")));// elementargumentserializer.cpp:102
    _valueAddScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueAddScopes.setQualified(true);
    message = _valueAddScopes;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("AddScopes"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__AddScopesResponse();
    dm::TDS__AddScopesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncAddScopes( const dm::TDS__AddScopes& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/AddScopes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueAddScopes(parameters.serialize(QString::fromLatin1("AddScopes")));// elementargumentserializer.cpp:102
    _valueAddScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueAddScopes.setQualified(true);
    message = _valueAddScopes;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("AddScopes"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotAddScopesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotAddScopesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT addScopesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("addScopes"), reply);
    } else {
        dm::TDS__AddScopesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT addScopesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__RemoveScopesResponse dm::DeviceBindingService::removeScopes( const dm::TDS__RemoveScopes& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/RemoveScopes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRemoveScopes(parameters.serialize(QString::fromLatin1("RemoveScopes")));// elementargumentserializer.cpp:102
    _valueRemoveScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRemoveScopes.setQualified(true);
    message = _valueRemoveScopes;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("RemoveScopes"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__RemoveScopesResponse();
    dm::TDS__RemoveScopesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncRemoveScopes( const dm::TDS__RemoveScopes& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/RemoveScopes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRemoveScopes(parameters.serialize(QString::fromLatin1("RemoveScopes")));// elementargumentserializer.cpp:102
    _valueRemoveScopes.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRemoveScopes.setQualified(true);
    message = _valueRemoveScopes;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("RemoveScopes"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotRemoveScopesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotRemoveScopesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT removeScopesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("removeScopes"), reply);
    } else {
        dm::TDS__RemoveScopesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT removeScopesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetDiscoveryModeResponse dm::DeviceBindingService::getDiscoveryMode( const dm::TDS__GetDiscoveryMode& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDiscoveryMode(parameters.serialize(QString::fromLatin1("GetDiscoveryMode")));// elementargumentserializer.cpp:102
    _valueGetDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDiscoveryMode.setQualified(true);
    message = _valueGetDiscoveryMode;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDiscoveryMode"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetDiscoveryModeResponse();
    dm::TDS__GetDiscoveryModeResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetDiscoveryMode( const dm::TDS__GetDiscoveryMode& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDiscoveryMode(parameters.serialize(QString::fromLatin1("GetDiscoveryMode")));// elementargumentserializer.cpp:102
    _valueGetDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDiscoveryMode.setQualified(true);
    message = _valueGetDiscoveryMode;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDiscoveryMode"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDiscoveryModeFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetDiscoveryModeFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDiscoveryModeError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getDiscoveryMode"), reply);
    } else {
        dm::TDS__GetDiscoveryModeResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getDiscoveryModeDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetDiscoveryModeResponse dm::DeviceBindingService::setDiscoveryMode( const dm::TDS__SetDiscoveryMode& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDiscoveryMode(parameters.serialize(QString::fromLatin1("SetDiscoveryMode")));// elementargumentserializer.cpp:102
    _valueSetDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDiscoveryMode.setQualified(true);
    message = _valueSetDiscoveryMode;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetDiscoveryMode"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetDiscoveryModeResponse();
    dm::TDS__SetDiscoveryModeResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetDiscoveryMode( const dm::TDS__SetDiscoveryMode& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDiscoveryMode(parameters.serialize(QString::fromLatin1("SetDiscoveryMode")));// elementargumentserializer.cpp:102
    _valueSetDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDiscoveryMode.setQualified(true);
    message = _valueSetDiscoveryMode;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetDiscoveryMode"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetDiscoveryModeFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetDiscoveryModeFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setDiscoveryModeError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setDiscoveryMode"), reply);
    } else {
        dm::TDS__SetDiscoveryModeResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setDiscoveryModeDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetRemoteDiscoveryModeResponse dm::DeviceBindingService::getRemoteDiscoveryMode( const dm::TDS__GetRemoteDiscoveryMode& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetRemoteDiscoveryMode(parameters.serialize(QString::fromLatin1("GetRemoteDiscoveryMode")));// elementargumentserializer.cpp:102
    _valueGetRemoteDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetRemoteDiscoveryMode.setQualified(true);
    message = _valueGetRemoteDiscoveryMode;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetRemoteDiscoveryMode"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetRemoteDiscoveryModeResponse();
    dm::TDS__GetRemoteDiscoveryModeResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetRemoteDiscoveryMode( const dm::TDS__GetRemoteDiscoveryMode& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetRemoteDiscoveryMode(parameters.serialize(QString::fromLatin1("GetRemoteDiscoveryMode")));// elementargumentserializer.cpp:102
    _valueGetRemoteDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetRemoteDiscoveryMode.setQualified(true);
    message = _valueGetRemoteDiscoveryMode;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetRemoteDiscoveryMode"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetRemoteDiscoveryModeFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetRemoteDiscoveryModeFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getRemoteDiscoveryModeError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getRemoteDiscoveryMode"), reply);
    } else {
        dm::TDS__GetRemoteDiscoveryModeResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getRemoteDiscoveryModeDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetRemoteDiscoveryModeResponse dm::DeviceBindingService::setRemoteDiscoveryMode( const dm::TDS__SetRemoteDiscoveryMode& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetRemoteDiscoveryMode(parameters.serialize(QString::fromLatin1("SetRemoteDiscoveryMode")));// elementargumentserializer.cpp:102
    _valueSetRemoteDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetRemoteDiscoveryMode.setQualified(true);
    message = _valueSetRemoteDiscoveryMode;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetRemoteDiscoveryMode"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetRemoteDiscoveryModeResponse();
    dm::TDS__SetRemoteDiscoveryModeResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetRemoteDiscoveryMode( const dm::TDS__SetRemoteDiscoveryMode& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetRemoteDiscoveryMode(parameters.serialize(QString::fromLatin1("SetRemoteDiscoveryMode")));// elementargumentserializer.cpp:102
    _valueSetRemoteDiscoveryMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetRemoteDiscoveryMode.setQualified(true);
    message = _valueSetRemoteDiscoveryMode;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetRemoteDiscoveryMode"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetRemoteDiscoveryModeFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetRemoteDiscoveryModeFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setRemoteDiscoveryModeError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setRemoteDiscoveryMode"), reply);
    } else {
        dm::TDS__SetRemoteDiscoveryModeResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setRemoteDiscoveryModeDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetDPAddressesResponse dm::DeviceBindingService::getDPAddresses( const dm::TDS__GetDPAddresses& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDPAddresses");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDPAddresses(parameters.serialize(QString::fromLatin1("GetDPAddresses")));// elementargumentserializer.cpp:102
    _valueGetDPAddresses.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDPAddresses.setQualified(true);
    message = _valueGetDPAddresses;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDPAddresses"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetDPAddressesResponse();
    dm::TDS__GetDPAddressesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetDPAddresses( const dm::TDS__GetDPAddresses& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDPAddresses");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDPAddresses(parameters.serialize(QString::fromLatin1("GetDPAddresses")));// elementargumentserializer.cpp:102
    _valueGetDPAddresses.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDPAddresses.setQualified(true);
    message = _valueGetDPAddresses;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDPAddresses"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDPAddressesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetDPAddressesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDPAddressesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getDPAddresses"), reply);
    } else {
        dm::TDS__GetDPAddressesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getDPAddressesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetDPAddressesResponse dm::DeviceBindingService::setDPAddresses( const dm::TDS__SetDPAddresses& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDPAddresses");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDPAddresses(parameters.serialize(QString::fromLatin1("SetDPAddresses")));// elementargumentserializer.cpp:102
    _valueSetDPAddresses.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDPAddresses.setQualified(true);
    message = _valueSetDPAddresses;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetDPAddresses"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetDPAddressesResponse();
    dm::TDS__SetDPAddressesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetDPAddresses( const dm::TDS__SetDPAddresses& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDPAddresses");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDPAddresses(parameters.serialize(QString::fromLatin1("SetDPAddresses")));// elementargumentserializer.cpp:102
    _valueSetDPAddresses.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDPAddresses.setQualified(true);
    message = _valueSetDPAddresses;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetDPAddresses"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetDPAddressesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetDPAddressesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setDPAddressesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setDPAddresses"), reply);
    } else {
        dm::TDS__SetDPAddressesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setDPAddressesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetEndpointReferenceResponse dm::DeviceBindingService::getEndpointReference( const dm::TDS__GetEndpointReference& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetEndpointReference");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetEndpointReference(parameters.serialize(QString::fromLatin1("GetEndpointReference")));// elementargumentserializer.cpp:102
    _valueGetEndpointReference.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetEndpointReference.setQualified(true);
    message = _valueGetEndpointReference;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetEndpointReference"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetEndpointReferenceResponse();
    dm::TDS__GetEndpointReferenceResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetEndpointReference( const dm::TDS__GetEndpointReference& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetEndpointReference");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetEndpointReference(parameters.serialize(QString::fromLatin1("GetEndpointReference")));// elementargumentserializer.cpp:102
    _valueGetEndpointReference.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetEndpointReference.setQualified(true);
    message = _valueGetEndpointReference;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetEndpointReference"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetEndpointReferenceFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetEndpointReferenceFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getEndpointReferenceError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getEndpointReference"), reply);
    } else {
        dm::TDS__GetEndpointReferenceResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getEndpointReferenceDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetRemoteUserResponse dm::DeviceBindingService::getRemoteUser( const dm::TDS__GetRemoteUser& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetRemoteUser");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetRemoteUser(parameters.serialize(QString::fromLatin1("GetRemoteUser")));// elementargumentserializer.cpp:102
    _valueGetRemoteUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetRemoteUser.setQualified(true);
    message = _valueGetRemoteUser;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetRemoteUser"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetRemoteUserResponse();
    dm::TDS__GetRemoteUserResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetRemoteUser( const dm::TDS__GetRemoteUser& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetRemoteUser");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetRemoteUser(parameters.serialize(QString::fromLatin1("GetRemoteUser")));// elementargumentserializer.cpp:102
    _valueGetRemoteUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetRemoteUser.setQualified(true);
    message = _valueGetRemoteUser;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetRemoteUser"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetRemoteUserFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetRemoteUserFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getRemoteUserError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getRemoteUser"), reply);
    } else {
        dm::TDS__GetRemoteUserResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getRemoteUserDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetRemoteUserResponse dm::DeviceBindingService::setRemoteUser( const dm::TDS__SetRemoteUser& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetRemoteUser");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetRemoteUser(parameters.serialize(QString::fromLatin1("SetRemoteUser")));// elementargumentserializer.cpp:102
    _valueSetRemoteUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetRemoteUser.setQualified(true);
    message = _valueSetRemoteUser;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetRemoteUser"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetRemoteUserResponse();
    dm::TDS__SetRemoteUserResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetRemoteUser( const dm::TDS__SetRemoteUser& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetRemoteUser");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetRemoteUser(parameters.serialize(QString::fromLatin1("SetRemoteUser")));// elementargumentserializer.cpp:102
    _valueSetRemoteUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetRemoteUser.setQualified(true);
    message = _valueSetRemoteUser;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetRemoteUser"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetRemoteUserFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetRemoteUserFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setRemoteUserError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setRemoteUser"), reply);
    } else {
        dm::TDS__SetRemoteUserResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setRemoteUserDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetUsersResponse dm::DeviceBindingService::getUsers( const dm::TDS__GetUsers& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetUsers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetUsers(parameters.serialize(QString::fromLatin1("GetUsers")));// elementargumentserializer.cpp:102
    _valueGetUsers.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetUsers.setQualified(true);
    message = _valueGetUsers;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetUsers"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetUsersResponse();
    dm::TDS__GetUsersResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetUsers( const dm::TDS__GetUsers& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetUsers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetUsers(parameters.serialize(QString::fromLatin1("GetUsers")));// elementargumentserializer.cpp:102
    _valueGetUsers.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetUsers.setQualified(true);
    message = _valueGetUsers;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetUsers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetUsersFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetUsersFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getUsersError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getUsers"), reply);
    } else {
        dm::TDS__GetUsersResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getUsersDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__CreateUsersResponse dm::DeviceBindingService::createUsers( const dm::TDS__CreateUsers& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/CreateUsers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateUsers(parameters.serialize(QString::fromLatin1("CreateUsers")));// elementargumentserializer.cpp:102
    _valueCreateUsers.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCreateUsers.setQualified(true);
    message = _valueCreateUsers;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateUsers"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__CreateUsersResponse();
    dm::TDS__CreateUsersResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncCreateUsers( const dm::TDS__CreateUsers& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/CreateUsers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateUsers(parameters.serialize(QString::fromLatin1("CreateUsers")));// elementargumentserializer.cpp:102
    _valueCreateUsers.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCreateUsers.setQualified(true);
    message = _valueCreateUsers;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateUsers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateUsersFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotCreateUsersFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createUsersError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("createUsers"), reply);
    } else {
        dm::TDS__CreateUsersResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT createUsersDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__DeleteUsersResponse dm::DeviceBindingService::deleteUsers( const dm::TDS__DeleteUsers& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/DeleteUsers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteUsers(parameters.serialize(QString::fromLatin1("DeleteUsers")));// elementargumentserializer.cpp:102
    _valueDeleteUsers.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDeleteUsers.setQualified(true);
    message = _valueDeleteUsers;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("DeleteUsers"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__DeleteUsersResponse();
    dm::TDS__DeleteUsersResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncDeleteUsers( const dm::TDS__DeleteUsers& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/DeleteUsers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteUsers(parameters.serialize(QString::fromLatin1("DeleteUsers")));// elementargumentserializer.cpp:102
    _valueDeleteUsers.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDeleteUsers.setQualified(true);
    message = _valueDeleteUsers;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("DeleteUsers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotDeleteUsersFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotDeleteUsersFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT deleteUsersError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("deleteUsers"), reply);
    } else {
        dm::TDS__DeleteUsersResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT deleteUsersDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetUserResponse dm::DeviceBindingService::setUser( const dm::TDS__SetUser& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetUser");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetUser(parameters.serialize(QString::fromLatin1("SetUser")));// elementargumentserializer.cpp:102
    _valueSetUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetUser.setQualified(true);
    message = _valueSetUser;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetUser"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetUserResponse();
    dm::TDS__SetUserResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetUser( const dm::TDS__SetUser& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetUser");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetUser(parameters.serialize(QString::fromLatin1("SetUser")));// elementargumentserializer.cpp:102
    _valueSetUser.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetUser.setQualified(true);
    message = _valueSetUser;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetUser"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetUserFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetUserFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setUserError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setUser"), reply);
    } else {
        dm::TDS__SetUserResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setUserDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetWsdlUrlResponse dm::DeviceBindingService::getWsdlUrl( const dm::TDS__GetWsdlUrl& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetWsdlUrl(parameters.serialize(QString::fromLatin1("GetWsdlUrl")));// elementargumentserializer.cpp:102
    _valueGetWsdlUrl.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetWsdlUrl.setQualified(true);
    message = _valueGetWsdlUrl;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetWsdlUrl"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetWsdlUrlResponse();
    dm::TDS__GetWsdlUrlResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetWsdlUrl( const dm::TDS__GetWsdlUrl& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetWsdlUrl(parameters.serialize(QString::fromLatin1("GetWsdlUrl")));// elementargumentserializer.cpp:102
    _valueGetWsdlUrl.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetWsdlUrl.setQualified(true);
    message = _valueGetWsdlUrl;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetWsdlUrl"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetWsdlUrlFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetWsdlUrlFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getWsdlUrlError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getWsdlUrl"), reply);
    } else {
        dm::TDS__GetWsdlUrlResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getWsdlUrlDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetCapabilitiesResponse dm::DeviceBindingService::getCapabilities( const dm::TDS__GetCapabilities& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCapabilities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCapabilities(parameters.serialize(QString::fromLatin1("GetCapabilities")));// elementargumentserializer.cpp:102
    _valueGetCapabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCapabilities.setQualified(true);
    message = _valueGetCapabilities;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetCapabilities"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetCapabilitiesResponse();
    dm::TDS__GetCapabilitiesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetCapabilities( const dm::TDS__GetCapabilities& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCapabilities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCapabilities(parameters.serialize(QString::fromLatin1("GetCapabilities")));// elementargumentserializer.cpp:102
    _valueGetCapabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCapabilities.setQualified(true);
    message = _valueGetCapabilities;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetCapabilities"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetCapabilitiesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetCapabilitiesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getCapabilitiesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getCapabilities"), reply);
    } else {
        dm::TDS__GetCapabilitiesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getCapabilitiesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetHostnameResponse dm::DeviceBindingService::getHostname( const dm::TDS__GetHostname& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetHostname");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetHostname(parameters.serialize(QString::fromLatin1("GetHostname")));// elementargumentserializer.cpp:102
    _valueGetHostname.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetHostname.setQualified(true);
    message = _valueGetHostname;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetHostname"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetHostnameResponse();
    dm::TDS__GetHostnameResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetHostname( const dm::TDS__GetHostname& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetHostname");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetHostname(parameters.serialize(QString::fromLatin1("GetHostname")));// elementargumentserializer.cpp:102
    _valueGetHostname.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetHostname.setQualified(true);
    message = _valueGetHostname;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetHostname"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetHostnameFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetHostnameFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getHostnameError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getHostname"), reply);
    } else {
        dm::TDS__GetHostnameResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getHostnameDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetHostnameResponse dm::DeviceBindingService::setHostname( const dm::TDS__SetHostname& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetHostname");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetHostname(parameters.serialize(QString::fromLatin1("SetHostname")));// elementargumentserializer.cpp:102
    _valueSetHostname.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetHostname.setQualified(true);
    message = _valueSetHostname;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetHostname"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetHostnameResponse();
    dm::TDS__SetHostnameResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetHostname( const dm::TDS__SetHostname& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetHostname");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetHostname(parameters.serialize(QString::fromLatin1("SetHostname")));// elementargumentserializer.cpp:102
    _valueSetHostname.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetHostname.setQualified(true);
    message = _valueSetHostname;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetHostname"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetHostnameFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetHostnameFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setHostnameError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setHostname"), reply);
    } else {
        dm::TDS__SetHostnameResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setHostnameDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetHostnameFromDHCPResponse dm::DeviceBindingService::setHostnameFromDHCP( const dm::TDS__SetHostnameFromDHCP& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetHostnameFromDHCP(parameters.serialize(QString::fromLatin1("SetHostnameFromDHCP")));// elementargumentserializer.cpp:102
    _valueSetHostnameFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetHostnameFromDHCP.setQualified(true);
    message = _valueSetHostnameFromDHCP;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetHostnameFromDHCP"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetHostnameFromDHCPResponse();
    dm::TDS__SetHostnameFromDHCPResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetHostnameFromDHCP( const dm::TDS__SetHostnameFromDHCP& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetHostnameFromDHCP(parameters.serialize(QString::fromLatin1("SetHostnameFromDHCP")));// elementargumentserializer.cpp:102
    _valueSetHostnameFromDHCP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetHostnameFromDHCP.setQualified(true);
    message = _valueSetHostnameFromDHCP;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetHostnameFromDHCP"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetHostnameFromDHCPFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetHostnameFromDHCPFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setHostnameFromDHCPError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setHostnameFromDHCP"), reply);
    } else {
        dm::TDS__SetHostnameFromDHCPResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setHostnameFromDHCPDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetDNSResponse dm::DeviceBindingService::getDNS( const dm::TDS__GetDNS& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDNS");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDNS(parameters.serialize(QString::fromLatin1("GetDNS")));// elementargumentserializer.cpp:102
    _valueGetDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDNS.setQualified(true);
    message = _valueGetDNS;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDNS"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetDNSResponse();
    dm::TDS__GetDNSResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetDNS( const dm::TDS__GetDNS& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDNS");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDNS(parameters.serialize(QString::fromLatin1("GetDNS")));// elementargumentserializer.cpp:102
    _valueGetDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDNS.setQualified(true);
    message = _valueGetDNS;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDNS"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDNSFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetDNSFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDNSError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getDNS"), reply);
    } else {
        dm::TDS__GetDNSResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getDNSDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetDNSResponse dm::DeviceBindingService::setDNS( const dm::TDS__SetDNS& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDNS");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDNS(parameters.serialize(QString::fromLatin1("SetDNS")));// elementargumentserializer.cpp:102
    _valueSetDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDNS.setQualified(true);
    message = _valueSetDNS;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetDNS"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetDNSResponse();
    dm::TDS__SetDNSResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetDNS( const dm::TDS__SetDNS& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDNS");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDNS(parameters.serialize(QString::fromLatin1("SetDNS")));// elementargumentserializer.cpp:102
    _valueSetDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDNS.setQualified(true);
    message = _valueSetDNS;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetDNS"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetDNSFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetDNSFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setDNSError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setDNS"), reply);
    } else {
        dm::TDS__SetDNSResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setDNSDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetNTPResponse dm::DeviceBindingService::getNTP( const dm::TDS__GetNTP& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetNTP");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNTP(parameters.serialize(QString::fromLatin1("GetNTP")));// elementargumentserializer.cpp:102
    _valueGetNTP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetNTP.setQualified(true);
    message = _valueGetNTP;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetNTP"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetNTPResponse();
    dm::TDS__GetNTPResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetNTP( const dm::TDS__GetNTP& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetNTP");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNTP(parameters.serialize(QString::fromLatin1("GetNTP")));// elementargumentserializer.cpp:102
    _valueGetNTP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetNTP.setQualified(true);
    message = _valueGetNTP;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetNTP"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetNTPFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetNTPFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getNTPError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getNTP"), reply);
    } else {
        dm::TDS__GetNTPResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getNTPDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetNTPResponse dm::DeviceBindingService::setNTP( const dm::TDS__SetNTP& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetNTP");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetNTP(parameters.serialize(QString::fromLatin1("SetNTP")));// elementargumentserializer.cpp:102
    _valueSetNTP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetNTP.setQualified(true);
    message = _valueSetNTP;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetNTP"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetNTPResponse();
    dm::TDS__SetNTPResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetNTP( const dm::TDS__SetNTP& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetNTP");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetNTP(parameters.serialize(QString::fromLatin1("SetNTP")));// elementargumentserializer.cpp:102
    _valueSetNTP.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetNTP.setQualified(true);
    message = _valueSetNTP;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetNTP"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetNTPFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetNTPFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setNTPError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setNTP"), reply);
    } else {
        dm::TDS__SetNTPResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setNTPDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetDynamicDNSResponse dm::DeviceBindingService::getDynamicDNS( const dm::TDS__GetDynamicDNS& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDynamicDNS(parameters.serialize(QString::fromLatin1("GetDynamicDNS")));// elementargumentserializer.cpp:102
    _valueGetDynamicDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDynamicDNS.setQualified(true);
    message = _valueGetDynamicDNS;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDynamicDNS"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetDynamicDNSResponse();
    dm::TDS__GetDynamicDNSResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetDynamicDNS( const dm::TDS__GetDynamicDNS& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDynamicDNS(parameters.serialize(QString::fromLatin1("GetDynamicDNS")));// elementargumentserializer.cpp:102
    _valueGetDynamicDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDynamicDNS.setQualified(true);
    message = _valueGetDynamicDNS;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDynamicDNS"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDynamicDNSFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetDynamicDNSFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDynamicDNSError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getDynamicDNS"), reply);
    } else {
        dm::TDS__GetDynamicDNSResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getDynamicDNSDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetDynamicDNSResponse dm::DeviceBindingService::setDynamicDNS( const dm::TDS__SetDynamicDNS& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDynamicDNS(parameters.serialize(QString::fromLatin1("SetDynamicDNS")));// elementargumentserializer.cpp:102
    _valueSetDynamicDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDynamicDNS.setQualified(true);
    message = _valueSetDynamicDNS;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetDynamicDNS"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetDynamicDNSResponse();
    dm::TDS__SetDynamicDNSResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetDynamicDNS( const dm::TDS__SetDynamicDNS& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDynamicDNS(parameters.serialize(QString::fromLatin1("SetDynamicDNS")));// elementargumentserializer.cpp:102
    _valueSetDynamicDNS.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDynamicDNS.setQualified(true);
    message = _valueSetDynamicDNS;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetDynamicDNS"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetDynamicDNSFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetDynamicDNSFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setDynamicDNSError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setDynamicDNS"), reply);
    } else {
        dm::TDS__SetDynamicDNSResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setDynamicDNSDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetNetworkInterfacesResponse dm::DeviceBindingService::getNetworkInterfaces( const dm::TDS__GetNetworkInterfaces& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNetworkInterfaces(parameters.serialize(QString::fromLatin1("GetNetworkInterfaces")));// elementargumentserializer.cpp:102
    _valueGetNetworkInterfaces.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetNetworkInterfaces.setQualified(true);
    message = _valueGetNetworkInterfaces;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetNetworkInterfaces"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetNetworkInterfacesResponse();
    dm::TDS__GetNetworkInterfacesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetNetworkInterfaces( const dm::TDS__GetNetworkInterfaces& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNetworkInterfaces(parameters.serialize(QString::fromLatin1("GetNetworkInterfaces")));// elementargumentserializer.cpp:102
    _valueGetNetworkInterfaces.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetNetworkInterfaces.setQualified(true);
    message = _valueGetNetworkInterfaces;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetNetworkInterfaces"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetNetworkInterfacesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetNetworkInterfacesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getNetworkInterfacesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getNetworkInterfaces"), reply);
    } else {
        dm::TDS__GetNetworkInterfacesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getNetworkInterfacesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetNetworkInterfacesResponse dm::DeviceBindingService::setNetworkInterfaces( const dm::TDS__SetNetworkInterfaces& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetNetworkInterfaces(parameters.serialize(QString::fromLatin1("SetNetworkInterfaces")));// elementargumentserializer.cpp:102
    _valueSetNetworkInterfaces.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetNetworkInterfaces.setQualified(true);
    message = _valueSetNetworkInterfaces;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetNetworkInterfaces"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetNetworkInterfacesResponse();
    dm::TDS__SetNetworkInterfacesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetNetworkInterfaces( const dm::TDS__SetNetworkInterfaces& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetNetworkInterfaces(parameters.serialize(QString::fromLatin1("SetNetworkInterfaces")));// elementargumentserializer.cpp:102
    _valueSetNetworkInterfaces.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetNetworkInterfaces.setQualified(true);
    message = _valueSetNetworkInterfaces;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetNetworkInterfaces"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetNetworkInterfacesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetNetworkInterfacesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setNetworkInterfacesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setNetworkInterfaces"), reply);
    } else {
        dm::TDS__SetNetworkInterfacesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setNetworkInterfacesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetNetworkProtocolsResponse dm::DeviceBindingService::getNetworkProtocols( const dm::TDS__GetNetworkProtocols& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNetworkProtocols(parameters.serialize(QString::fromLatin1("GetNetworkProtocols")));// elementargumentserializer.cpp:102
    _valueGetNetworkProtocols.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetNetworkProtocols.setQualified(true);
    message = _valueGetNetworkProtocols;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetNetworkProtocols"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetNetworkProtocolsResponse();
    dm::TDS__GetNetworkProtocolsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetNetworkProtocols( const dm::TDS__GetNetworkProtocols& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNetworkProtocols(parameters.serialize(QString::fromLatin1("GetNetworkProtocols")));// elementargumentserializer.cpp:102
    _valueGetNetworkProtocols.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetNetworkProtocols.setQualified(true);
    message = _valueGetNetworkProtocols;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetNetworkProtocols"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetNetworkProtocolsFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetNetworkProtocolsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getNetworkProtocolsError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getNetworkProtocols"), reply);
    } else {
        dm::TDS__GetNetworkProtocolsResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getNetworkProtocolsDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetNetworkProtocolsResponse dm::DeviceBindingService::setNetworkProtocols( const dm::TDS__SetNetworkProtocols& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetNetworkProtocols(parameters.serialize(QString::fromLatin1("SetNetworkProtocols")));// elementargumentserializer.cpp:102
    _valueSetNetworkProtocols.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetNetworkProtocols.setQualified(true);
    message = _valueSetNetworkProtocols;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetNetworkProtocols"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetNetworkProtocolsResponse();
    dm::TDS__SetNetworkProtocolsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetNetworkProtocols( const dm::TDS__SetNetworkProtocols& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetNetworkProtocols(parameters.serialize(QString::fromLatin1("SetNetworkProtocols")));// elementargumentserializer.cpp:102
    _valueSetNetworkProtocols.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetNetworkProtocols.setQualified(true);
    message = _valueSetNetworkProtocols;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetNetworkProtocols"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetNetworkProtocolsFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetNetworkProtocolsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setNetworkProtocolsError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setNetworkProtocols"), reply);
    } else {
        dm::TDS__SetNetworkProtocolsResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setNetworkProtocolsDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetNetworkDefaultGatewayResponse dm::DeviceBindingService::getNetworkDefaultGateway( const dm::TDS__GetNetworkDefaultGateway& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNetworkDefaultGateway(parameters.serialize(QString::fromLatin1("GetNetworkDefaultGateway")));// elementargumentserializer.cpp:102
    _valueGetNetworkDefaultGateway.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetNetworkDefaultGateway.setQualified(true);
    message = _valueGetNetworkDefaultGateway;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetNetworkDefaultGateway"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetNetworkDefaultGatewayResponse();
    dm::TDS__GetNetworkDefaultGatewayResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetNetworkDefaultGateway( const dm::TDS__GetNetworkDefaultGateway& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNetworkDefaultGateway(parameters.serialize(QString::fromLatin1("GetNetworkDefaultGateway")));// elementargumentserializer.cpp:102
    _valueGetNetworkDefaultGateway.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetNetworkDefaultGateway.setQualified(true);
    message = _valueGetNetworkDefaultGateway;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetNetworkDefaultGateway"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetNetworkDefaultGatewayFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetNetworkDefaultGatewayFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getNetworkDefaultGatewayError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getNetworkDefaultGateway"), reply);
    } else {
        dm::TDS__GetNetworkDefaultGatewayResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getNetworkDefaultGatewayDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetNetworkDefaultGatewayResponse dm::DeviceBindingService::setNetworkDefaultGateway( const dm::TDS__SetNetworkDefaultGateway& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetNetworkDefaultGateway(parameters.serialize(QString::fromLatin1("SetNetworkDefaultGateway")));// elementargumentserializer.cpp:102
    _valueSetNetworkDefaultGateway.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetNetworkDefaultGateway.setQualified(true);
    message = _valueSetNetworkDefaultGateway;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetNetworkDefaultGateway"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetNetworkDefaultGatewayResponse();
    dm::TDS__SetNetworkDefaultGatewayResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetNetworkDefaultGateway( const dm::TDS__SetNetworkDefaultGateway& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetNetworkDefaultGateway(parameters.serialize(QString::fromLatin1("SetNetworkDefaultGateway")));// elementargumentserializer.cpp:102
    _valueSetNetworkDefaultGateway.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetNetworkDefaultGateway.setQualified(true);
    message = _valueSetNetworkDefaultGateway;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetNetworkDefaultGateway"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetNetworkDefaultGatewayFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetNetworkDefaultGatewayFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setNetworkDefaultGatewayError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setNetworkDefaultGateway"), reply);
    } else {
        dm::TDS__SetNetworkDefaultGatewayResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setNetworkDefaultGatewayDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetZeroConfigurationResponse dm::DeviceBindingService::getZeroConfiguration( const dm::TDS__GetZeroConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetZeroConfiguration(parameters.serialize(QString::fromLatin1("GetZeroConfiguration")));// elementargumentserializer.cpp:102
    _valueGetZeroConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetZeroConfiguration.setQualified(true);
    message = _valueGetZeroConfiguration;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetZeroConfiguration"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetZeroConfigurationResponse();
    dm::TDS__GetZeroConfigurationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetZeroConfiguration( const dm::TDS__GetZeroConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetZeroConfiguration(parameters.serialize(QString::fromLatin1("GetZeroConfiguration")));// elementargumentserializer.cpp:102
    _valueGetZeroConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetZeroConfiguration.setQualified(true);
    message = _valueGetZeroConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetZeroConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetZeroConfigurationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetZeroConfigurationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getZeroConfigurationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getZeroConfiguration"), reply);
    } else {
        dm::TDS__GetZeroConfigurationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getZeroConfigurationDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetZeroConfigurationResponse dm::DeviceBindingService::setZeroConfiguration( const dm::TDS__SetZeroConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetZeroConfiguration(parameters.serialize(QString::fromLatin1("SetZeroConfiguration")));// elementargumentserializer.cpp:102
    _valueSetZeroConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetZeroConfiguration.setQualified(true);
    message = _valueSetZeroConfiguration;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetZeroConfiguration"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetZeroConfigurationResponse();
    dm::TDS__SetZeroConfigurationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetZeroConfiguration( const dm::TDS__SetZeroConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetZeroConfiguration(parameters.serialize(QString::fromLatin1("SetZeroConfiguration")));// elementargumentserializer.cpp:102
    _valueSetZeroConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetZeroConfiguration.setQualified(true);
    message = _valueSetZeroConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetZeroConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetZeroConfigurationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetZeroConfigurationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setZeroConfigurationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setZeroConfiguration"), reply);
    } else {
        dm::TDS__SetZeroConfigurationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setZeroConfigurationDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetIPAddressFilterResponse dm::DeviceBindingService::getIPAddressFilter( const dm::TDS__GetIPAddressFilter& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetIPAddressFilter(parameters.serialize(QString::fromLatin1("GetIPAddressFilter")));// elementargumentserializer.cpp:102
    _valueGetIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetIPAddressFilter.setQualified(true);
    message = _valueGetIPAddressFilter;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetIPAddressFilter"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetIPAddressFilterResponse();
    dm::TDS__GetIPAddressFilterResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetIPAddressFilter( const dm::TDS__GetIPAddressFilter& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetIPAddressFilter(parameters.serialize(QString::fromLatin1("GetIPAddressFilter")));// elementargumentserializer.cpp:102
    _valueGetIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetIPAddressFilter.setQualified(true);
    message = _valueGetIPAddressFilter;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetIPAddressFilter"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetIPAddressFilterFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetIPAddressFilterFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getIPAddressFilterError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getIPAddressFilter"), reply);
    } else {
        dm::TDS__GetIPAddressFilterResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getIPAddressFilterDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetIPAddressFilterResponse dm::DeviceBindingService::setIPAddressFilter( const dm::TDS__SetIPAddressFilter& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetIPAddressFilter(parameters.serialize(QString::fromLatin1("SetIPAddressFilter")));// elementargumentserializer.cpp:102
    _valueSetIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetIPAddressFilter.setQualified(true);
    message = _valueSetIPAddressFilter;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetIPAddressFilter"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetIPAddressFilterResponse();
    dm::TDS__SetIPAddressFilterResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetIPAddressFilter( const dm::TDS__SetIPAddressFilter& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetIPAddressFilter(parameters.serialize(QString::fromLatin1("SetIPAddressFilter")));// elementargumentserializer.cpp:102
    _valueSetIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetIPAddressFilter.setQualified(true);
    message = _valueSetIPAddressFilter;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetIPAddressFilter"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetIPAddressFilterFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetIPAddressFilterFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setIPAddressFilterError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setIPAddressFilter"), reply);
    } else {
        dm::TDS__SetIPAddressFilterResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setIPAddressFilterDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__AddIPAddressFilterResponse dm::DeviceBindingService::addIPAddressFilter( const dm::TDS__AddIPAddressFilter& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueAddIPAddressFilter(parameters.serialize(QString::fromLatin1("AddIPAddressFilter")));// elementargumentserializer.cpp:102
    _valueAddIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueAddIPAddressFilter.setQualified(true);
    message = _valueAddIPAddressFilter;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("AddIPAddressFilter"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__AddIPAddressFilterResponse();
    dm::TDS__AddIPAddressFilterResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncAddIPAddressFilter( const dm::TDS__AddIPAddressFilter& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueAddIPAddressFilter(parameters.serialize(QString::fromLatin1("AddIPAddressFilter")));// elementargumentserializer.cpp:102
    _valueAddIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueAddIPAddressFilter.setQualified(true);
    message = _valueAddIPAddressFilter;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("AddIPAddressFilter"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotAddIPAddressFilterFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotAddIPAddressFilterFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT addIPAddressFilterError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("addIPAddressFilter"), reply);
    } else {
        dm::TDS__AddIPAddressFilterResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT addIPAddressFilterDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__RemoveIPAddressFilterResponse dm::DeviceBindingService::removeIPAddressFilter( const dm::TDS__RemoveIPAddressFilter& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRemoveIPAddressFilter(parameters.serialize(QString::fromLatin1("RemoveIPAddressFilter")));// elementargumentserializer.cpp:102
    _valueRemoveIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRemoveIPAddressFilter.setQualified(true);
    message = _valueRemoveIPAddressFilter;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("RemoveIPAddressFilter"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__RemoveIPAddressFilterResponse();
    dm::TDS__RemoveIPAddressFilterResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncRemoveIPAddressFilter( const dm::TDS__RemoveIPAddressFilter& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueRemoveIPAddressFilter(parameters.serialize(QString::fromLatin1("RemoveIPAddressFilter")));// elementargumentserializer.cpp:102
    _valueRemoveIPAddressFilter.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueRemoveIPAddressFilter.setQualified(true);
    message = _valueRemoveIPAddressFilter;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("RemoveIPAddressFilter"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotRemoveIPAddressFilterFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotRemoveIPAddressFilterFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT removeIPAddressFilterError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("removeIPAddressFilter"), reply);
    } else {
        dm::TDS__RemoveIPAddressFilterResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT removeIPAddressFilterDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetAccessPolicyResponse dm::DeviceBindingService::getAccessPolicy( const dm::TDS__GetAccessPolicy& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetAccessPolicy(parameters.serialize(QString::fromLatin1("GetAccessPolicy")));// elementargumentserializer.cpp:102
    _valueGetAccessPolicy.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetAccessPolicy.setQualified(true);
    message = _valueGetAccessPolicy;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetAccessPolicy"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetAccessPolicyResponse();
    dm::TDS__GetAccessPolicyResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetAccessPolicy( const dm::TDS__GetAccessPolicy& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetAccessPolicy(parameters.serialize(QString::fromLatin1("GetAccessPolicy")));// elementargumentserializer.cpp:102
    _valueGetAccessPolicy.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetAccessPolicy.setQualified(true);
    message = _valueGetAccessPolicy;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetAccessPolicy"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetAccessPolicyFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetAccessPolicyFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getAccessPolicyError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getAccessPolicy"), reply);
    } else {
        dm::TDS__GetAccessPolicyResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getAccessPolicyDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetAccessPolicyResponse dm::DeviceBindingService::setAccessPolicy( const dm::TDS__SetAccessPolicy& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetAccessPolicy(parameters.serialize(QString::fromLatin1("SetAccessPolicy")));// elementargumentserializer.cpp:102
    _valueSetAccessPolicy.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetAccessPolicy.setQualified(true);
    message = _valueSetAccessPolicy;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetAccessPolicy"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetAccessPolicyResponse();
    dm::TDS__SetAccessPolicyResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetAccessPolicy( const dm::TDS__SetAccessPolicy& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetAccessPolicy(parameters.serialize(QString::fromLatin1("SetAccessPolicy")));// elementargumentserializer.cpp:102
    _valueSetAccessPolicy.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetAccessPolicy.setQualified(true);
    message = _valueSetAccessPolicy;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetAccessPolicy"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetAccessPolicyFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetAccessPolicyFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setAccessPolicyError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setAccessPolicy"), reply);
    } else {
        dm::TDS__SetAccessPolicyResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setAccessPolicyDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__CreateCertificateResponse dm::DeviceBindingService::createCertificate( const dm::TDS__CreateCertificate& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/CreateCertificate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateCertificate(parameters.serialize(QString::fromLatin1("CreateCertificate")));// elementargumentserializer.cpp:102
    _valueCreateCertificate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCreateCertificate.setQualified(true);
    message = _valueCreateCertificate;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateCertificate"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__CreateCertificateResponse();
    dm::TDS__CreateCertificateResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncCreateCertificate( const dm::TDS__CreateCertificate& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/CreateCertificate");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateCertificate(parameters.serialize(QString::fromLatin1("CreateCertificate")));// elementargumentserializer.cpp:102
    _valueCreateCertificate.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCreateCertificate.setQualified(true);
    message = _valueCreateCertificate;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateCertificate"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateCertificateFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotCreateCertificateFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createCertificateError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("createCertificate"), reply);
    } else {
        dm::TDS__CreateCertificateResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT createCertificateDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetCertificatesResponse dm::DeviceBindingService::getCertificates( const dm::TDS__GetCertificates& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCertificates(parameters.serialize(QString::fromLatin1("GetCertificates")));// elementargumentserializer.cpp:102
    _valueGetCertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCertificates.setQualified(true);
    message = _valueGetCertificates;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetCertificates"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetCertificatesResponse();
    dm::TDS__GetCertificatesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetCertificates( const dm::TDS__GetCertificates& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCertificates(parameters.serialize(QString::fromLatin1("GetCertificates")));// elementargumentserializer.cpp:102
    _valueGetCertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCertificates.setQualified(true);
    message = _valueGetCertificates;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetCertificates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetCertificatesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetCertificatesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getCertificatesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getCertificates"), reply);
    } else {
        dm::TDS__GetCertificatesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getCertificatesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetCertificatesStatusResponse dm::DeviceBindingService::getCertificatesStatus( const dm::TDS__GetCertificatesStatus& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCertificatesStatus(parameters.serialize(QString::fromLatin1("GetCertificatesStatus")));// elementargumentserializer.cpp:102
    _valueGetCertificatesStatus.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCertificatesStatus.setQualified(true);
    message = _valueGetCertificatesStatus;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetCertificatesStatus"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetCertificatesStatusResponse();
    dm::TDS__GetCertificatesStatusResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetCertificatesStatus( const dm::TDS__GetCertificatesStatus& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCertificatesStatus(parameters.serialize(QString::fromLatin1("GetCertificatesStatus")));// elementargumentserializer.cpp:102
    _valueGetCertificatesStatus.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCertificatesStatus.setQualified(true);
    message = _valueGetCertificatesStatus;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetCertificatesStatus"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetCertificatesStatusFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetCertificatesStatusFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getCertificatesStatusError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getCertificatesStatus"), reply);
    } else {
        dm::TDS__GetCertificatesStatusResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getCertificatesStatusDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetCertificatesStatusResponse dm::DeviceBindingService::setCertificatesStatus( const dm::TDS__SetCertificatesStatus& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetCertificatesStatus(parameters.serialize(QString::fromLatin1("SetCertificatesStatus")));// elementargumentserializer.cpp:102
    _valueSetCertificatesStatus.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetCertificatesStatus.setQualified(true);
    message = _valueSetCertificatesStatus;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetCertificatesStatus"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetCertificatesStatusResponse();
    dm::TDS__SetCertificatesStatusResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetCertificatesStatus( const dm::TDS__SetCertificatesStatus& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetCertificatesStatus(parameters.serialize(QString::fromLatin1("SetCertificatesStatus")));// elementargumentserializer.cpp:102
    _valueSetCertificatesStatus.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetCertificatesStatus.setQualified(true);
    message = _valueSetCertificatesStatus;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetCertificatesStatus"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetCertificatesStatusFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetCertificatesStatusFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setCertificatesStatusError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setCertificatesStatus"), reply);
    } else {
        dm::TDS__SetCertificatesStatusResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setCertificatesStatusDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__DeleteCertificatesResponse dm::DeviceBindingService::deleteCertificates( const dm::TDS__DeleteCertificates& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/DeleteCertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteCertificates(parameters.serialize(QString::fromLatin1("DeleteCertificates")));// elementargumentserializer.cpp:102
    _valueDeleteCertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDeleteCertificates.setQualified(true);
    message = _valueDeleteCertificates;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("DeleteCertificates"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__DeleteCertificatesResponse();
    dm::TDS__DeleteCertificatesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncDeleteCertificates( const dm::TDS__DeleteCertificates& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/DeleteCertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteCertificates(parameters.serialize(QString::fromLatin1("DeleteCertificates")));// elementargumentserializer.cpp:102
    _valueDeleteCertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDeleteCertificates.setQualified(true);
    message = _valueDeleteCertificates;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("DeleteCertificates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotDeleteCertificatesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotDeleteCertificatesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT deleteCertificatesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("deleteCertificates"), reply);
    } else {
        dm::TDS__DeleteCertificatesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT deleteCertificatesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetPkcs10RequestResponse dm::DeviceBindingService::getPkcs10Request( const dm::TDS__GetPkcs10Request& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetPkcs10Request(parameters.serialize(QString::fromLatin1("GetPkcs10Request")));// elementargumentserializer.cpp:102
    _valueGetPkcs10Request.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetPkcs10Request.setQualified(true);
    message = _valueGetPkcs10Request;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetPkcs10Request"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetPkcs10RequestResponse();
    dm::TDS__GetPkcs10RequestResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetPkcs10Request( const dm::TDS__GetPkcs10Request& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetPkcs10Request(parameters.serialize(QString::fromLatin1("GetPkcs10Request")));// elementargumentserializer.cpp:102
    _valueGetPkcs10Request.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetPkcs10Request.setQualified(true);
    message = _valueGetPkcs10Request;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetPkcs10Request"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetPkcs10RequestFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetPkcs10RequestFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getPkcs10RequestError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getPkcs10Request"), reply);
    } else {
        dm::TDS__GetPkcs10RequestResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getPkcs10RequestDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__LoadCertificatesResponse dm::DeviceBindingService::loadCertificates( const dm::TDS__LoadCertificates& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/LoadCertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueLoadCertificates(parameters.serialize(QString::fromLatin1("LoadCertificates")));// elementargumentserializer.cpp:102
    _valueLoadCertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueLoadCertificates.setQualified(true);
    message = _valueLoadCertificates;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("LoadCertificates"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__LoadCertificatesResponse();
    dm::TDS__LoadCertificatesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncLoadCertificates( const dm::TDS__LoadCertificates& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/LoadCertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueLoadCertificates(parameters.serialize(QString::fromLatin1("LoadCertificates")));// elementargumentserializer.cpp:102
    _valueLoadCertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueLoadCertificates.setQualified(true);
    message = _valueLoadCertificates;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("LoadCertificates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotLoadCertificatesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotLoadCertificatesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT loadCertificatesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("loadCertificates"), reply);
    } else {
        dm::TDS__LoadCertificatesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT loadCertificatesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetClientCertificateModeResponse dm::DeviceBindingService::getClientCertificateMode( const dm::TDS__GetClientCertificateMode& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetClientCertificateMode(parameters.serialize(QString::fromLatin1("GetClientCertificateMode")));// elementargumentserializer.cpp:102
    _valueGetClientCertificateMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetClientCertificateMode.setQualified(true);
    message = _valueGetClientCertificateMode;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetClientCertificateMode"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetClientCertificateModeResponse();
    dm::TDS__GetClientCertificateModeResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetClientCertificateMode( const dm::TDS__GetClientCertificateMode& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetClientCertificateMode(parameters.serialize(QString::fromLatin1("GetClientCertificateMode")));// elementargumentserializer.cpp:102
    _valueGetClientCertificateMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetClientCertificateMode.setQualified(true);
    message = _valueGetClientCertificateMode;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetClientCertificateMode"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetClientCertificateModeFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetClientCertificateModeFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getClientCertificateModeError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getClientCertificateMode"), reply);
    } else {
        dm::TDS__GetClientCertificateModeResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getClientCertificateModeDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetClientCertificateModeResponse dm::DeviceBindingService::setClientCertificateMode( const dm::TDS__SetClientCertificateMode& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetClientCertificateMode(parameters.serialize(QString::fromLatin1("SetClientCertificateMode")));// elementargumentserializer.cpp:102
    _valueSetClientCertificateMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetClientCertificateMode.setQualified(true);
    message = _valueSetClientCertificateMode;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetClientCertificateMode"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetClientCertificateModeResponse();
    dm::TDS__SetClientCertificateModeResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetClientCertificateMode( const dm::TDS__SetClientCertificateMode& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetClientCertificateMode(parameters.serialize(QString::fromLatin1("SetClientCertificateMode")));// elementargumentserializer.cpp:102
    _valueSetClientCertificateMode.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetClientCertificateMode.setQualified(true);
    message = _valueSetClientCertificateMode;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetClientCertificateMode"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetClientCertificateModeFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetClientCertificateModeFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setClientCertificateModeError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setClientCertificateMode"), reply);
    } else {
        dm::TDS__SetClientCertificateModeResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setClientCertificateModeDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetRelayOutputsResponse dm::DeviceBindingService::getRelayOutputs( const dm::TDS__GetRelayOutputs& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetRelayOutputs(parameters.serialize(QString::fromLatin1("GetRelayOutputs")));// elementargumentserializer.cpp:102
    _valueGetRelayOutputs.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetRelayOutputs.setQualified(true);
    message = _valueGetRelayOutputs;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetRelayOutputs"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetRelayOutputsResponse();
    dm::TDS__GetRelayOutputsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetRelayOutputs( const dm::TDS__GetRelayOutputs& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetRelayOutputs(parameters.serialize(QString::fromLatin1("GetRelayOutputs")));// elementargumentserializer.cpp:102
    _valueGetRelayOutputs.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetRelayOutputs.setQualified(true);
    message = _valueGetRelayOutputs;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetRelayOutputs"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetRelayOutputsFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetRelayOutputsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getRelayOutputsError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getRelayOutputs"), reply);
    } else {
        dm::TDS__GetRelayOutputsResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getRelayOutputsDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetRelayOutputSettingsResponse dm::DeviceBindingService::setRelayOutputSettings( const dm::TDS__SetRelayOutputSettings& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetRelayOutputSettings(parameters.serialize(QString::fromLatin1("SetRelayOutputSettings")));// elementargumentserializer.cpp:102
    _valueSetRelayOutputSettings.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetRelayOutputSettings.setQualified(true);
    message = _valueSetRelayOutputSettings;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetRelayOutputSettings"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetRelayOutputSettingsResponse();
    dm::TDS__SetRelayOutputSettingsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetRelayOutputSettings( const dm::TDS__SetRelayOutputSettings& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetRelayOutputSettings(parameters.serialize(QString::fromLatin1("SetRelayOutputSettings")));// elementargumentserializer.cpp:102
    _valueSetRelayOutputSettings.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetRelayOutputSettings.setQualified(true);
    message = _valueSetRelayOutputSettings;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetRelayOutputSettings"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetRelayOutputSettingsFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetRelayOutputSettingsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setRelayOutputSettingsError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setRelayOutputSettings"), reply);
    } else {
        dm::TDS__SetRelayOutputSettingsResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setRelayOutputSettingsDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetRelayOutputStateResponse dm::DeviceBindingService::setRelayOutputState( const dm::TDS__SetRelayOutputState& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetRelayOutputState(parameters.serialize(QString::fromLatin1("SetRelayOutputState")));// elementargumentserializer.cpp:102
    _valueSetRelayOutputState.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetRelayOutputState.setQualified(true);
    message = _valueSetRelayOutputState;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetRelayOutputState"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetRelayOutputStateResponse();
    dm::TDS__SetRelayOutputStateResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetRelayOutputState( const dm::TDS__SetRelayOutputState& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetRelayOutputState(parameters.serialize(QString::fromLatin1("SetRelayOutputState")));// elementargumentserializer.cpp:102
    _valueSetRelayOutputState.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetRelayOutputState.setQualified(true);
    message = _valueSetRelayOutputState;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetRelayOutputState"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetRelayOutputStateFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetRelayOutputStateFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setRelayOutputStateError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setRelayOutputState"), reply);
    } else {
        dm::TDS__SetRelayOutputStateResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setRelayOutputStateDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SendAuxiliaryCommandResponse dm::DeviceBindingService::sendAuxiliaryCommand( const dm::TDS__SendAuxiliaryCommand& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSendAuxiliaryCommand(parameters.serialize(QString::fromLatin1("SendAuxiliaryCommand")));// elementargumentserializer.cpp:102
    _valueSendAuxiliaryCommand.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSendAuxiliaryCommand.setQualified(true);
    message = _valueSendAuxiliaryCommand;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SendAuxiliaryCommand"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SendAuxiliaryCommandResponse();
    dm::TDS__SendAuxiliaryCommandResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSendAuxiliaryCommand( const dm::TDS__SendAuxiliaryCommand& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSendAuxiliaryCommand(parameters.serialize(QString::fromLatin1("SendAuxiliaryCommand")));// elementargumentserializer.cpp:102
    _valueSendAuxiliaryCommand.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSendAuxiliaryCommand.setQualified(true);
    message = _valueSendAuxiliaryCommand;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SendAuxiliaryCommand"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSendAuxiliaryCommandFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSendAuxiliaryCommandFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT sendAuxiliaryCommandError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("sendAuxiliaryCommand"), reply);
    } else {
        dm::TDS__SendAuxiliaryCommandResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT sendAuxiliaryCommandDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetCACertificatesResponse dm::DeviceBindingService::getCACertificates( const dm::TDS__GetCACertificates& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCACertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCACertificates(parameters.serialize(QString::fromLatin1("GetCACertificates")));// elementargumentserializer.cpp:102
    _valueGetCACertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCACertificates.setQualified(true);
    message = _valueGetCACertificates;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetCACertificates"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetCACertificatesResponse();
    dm::TDS__GetCACertificatesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetCACertificates( const dm::TDS__GetCACertificates& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCACertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCACertificates(parameters.serialize(QString::fromLatin1("GetCACertificates")));// elementargumentserializer.cpp:102
    _valueGetCACertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCACertificates.setQualified(true);
    message = _valueGetCACertificates;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetCACertificates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetCACertificatesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetCACertificatesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getCACertificatesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getCACertificates"), reply);
    } else {
        dm::TDS__GetCACertificatesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getCACertificatesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__LoadCertificateWithPrivateKeyResponse dm::DeviceBindingService::loadCertificateWithPrivateKey( const dm::TDS__LoadCertificateWithPrivateKey& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueLoadCertificateWithPrivateKey(parameters.serialize(QString::fromLatin1("LoadCertificateWithPrivateKey")));// elementargumentserializer.cpp:102
    _valueLoadCertificateWithPrivateKey.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueLoadCertificateWithPrivateKey.setQualified(true);
    message = _valueLoadCertificateWithPrivateKey;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("LoadCertificateWithPrivateKey"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__LoadCertificateWithPrivateKeyResponse();
    dm::TDS__LoadCertificateWithPrivateKeyResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncLoadCertificateWithPrivateKey( const dm::TDS__LoadCertificateWithPrivateKey& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueLoadCertificateWithPrivateKey(parameters.serialize(QString::fromLatin1("LoadCertificateWithPrivateKey")));// elementargumentserializer.cpp:102
    _valueLoadCertificateWithPrivateKey.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueLoadCertificateWithPrivateKey.setQualified(true);
    message = _valueLoadCertificateWithPrivateKey;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("LoadCertificateWithPrivateKey"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotLoadCertificateWithPrivateKeyFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotLoadCertificateWithPrivateKeyFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT loadCertificateWithPrivateKeyError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("loadCertificateWithPrivateKey"), reply);
    } else {
        dm::TDS__LoadCertificateWithPrivateKeyResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT loadCertificateWithPrivateKeyDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetCertificateInformationResponse dm::DeviceBindingService::getCertificateInformation( const dm::TDS__GetCertificateInformation& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCertificateInformation(parameters.serialize(QString::fromLatin1("GetCertificateInformation")));// elementargumentserializer.cpp:102
    _valueGetCertificateInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCertificateInformation.setQualified(true);
    message = _valueGetCertificateInformation;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetCertificateInformation"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetCertificateInformationResponse();
    dm::TDS__GetCertificateInformationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetCertificateInformation( const dm::TDS__GetCertificateInformation& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCertificateInformation(parameters.serialize(QString::fromLatin1("GetCertificateInformation")));// elementargumentserializer.cpp:102
    _valueGetCertificateInformation.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetCertificateInformation.setQualified(true);
    message = _valueGetCertificateInformation;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetCertificateInformation"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetCertificateInformationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetCertificateInformationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getCertificateInformationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getCertificateInformation"), reply);
    } else {
        dm::TDS__GetCertificateInformationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getCertificateInformationDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__LoadCACertificatesResponse dm::DeviceBindingService::loadCACertificates( const dm::TDS__LoadCACertificates& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/LoadCACertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueLoadCACertificates(parameters.serialize(QString::fromLatin1("LoadCACertificates")));// elementargumentserializer.cpp:102
    _valueLoadCACertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueLoadCACertificates.setQualified(true);
    message = _valueLoadCACertificates;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("LoadCACertificates"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__LoadCACertificatesResponse();
    dm::TDS__LoadCACertificatesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncLoadCACertificates( const dm::TDS__LoadCACertificates& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/LoadCACertificates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueLoadCACertificates(parameters.serialize(QString::fromLatin1("LoadCACertificates")));// elementargumentserializer.cpp:102
    _valueLoadCACertificates.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueLoadCACertificates.setQualified(true);
    message = _valueLoadCACertificates;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("LoadCACertificates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotLoadCACertificatesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotLoadCACertificatesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT loadCACertificatesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("loadCACertificates"), reply);
    } else {
        dm::TDS__LoadCACertificatesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT loadCACertificatesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__CreateDot1XConfigurationResponse dm::DeviceBindingService::createDot1XConfiguration( const dm::TDS__CreateDot1XConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateDot1XConfiguration(parameters.serialize(QString::fromLatin1("CreateDot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueCreateDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCreateDot1XConfiguration.setQualified(true);
    message = _valueCreateDot1XConfiguration;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateDot1XConfiguration"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__CreateDot1XConfigurationResponse();
    dm::TDS__CreateDot1XConfigurationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncCreateDot1XConfiguration( const dm::TDS__CreateDot1XConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateDot1XConfiguration(parameters.serialize(QString::fromLatin1("CreateDot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueCreateDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCreateDot1XConfiguration.setQualified(true);
    message = _valueCreateDot1XConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateDot1XConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateDot1XConfigurationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotCreateDot1XConfigurationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createDot1XConfigurationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("createDot1XConfiguration"), reply);
    } else {
        dm::TDS__CreateDot1XConfigurationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT createDot1XConfigurationDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetDot1XConfigurationResponse dm::DeviceBindingService::setDot1XConfiguration( const dm::TDS__SetDot1XConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDot1XConfiguration(parameters.serialize(QString::fromLatin1("SetDot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueSetDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDot1XConfiguration.setQualified(true);
    message = _valueSetDot1XConfiguration;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetDot1XConfiguration"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetDot1XConfigurationResponse();
    dm::TDS__SetDot1XConfigurationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetDot1XConfiguration( const dm::TDS__SetDot1XConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetDot1XConfiguration(parameters.serialize(QString::fromLatin1("SetDot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueSetDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetDot1XConfiguration.setQualified(true);
    message = _valueSetDot1XConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetDot1XConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetDot1XConfigurationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetDot1XConfigurationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setDot1XConfigurationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setDot1XConfiguration"), reply);
    } else {
        dm::TDS__SetDot1XConfigurationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setDot1XConfigurationDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetDot1XConfigurationResponse dm::DeviceBindingService::getDot1XConfiguration( const dm::TDS__GetDot1XConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDot1XConfiguration(parameters.serialize(QString::fromLatin1("GetDot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueGetDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDot1XConfiguration.setQualified(true);
    message = _valueGetDot1XConfiguration;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDot1XConfiguration"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetDot1XConfigurationResponse();
    dm::TDS__GetDot1XConfigurationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetDot1XConfiguration( const dm::TDS__GetDot1XConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDot1XConfiguration(parameters.serialize(QString::fromLatin1("GetDot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueGetDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDot1XConfiguration.setQualified(true);
    message = _valueGetDot1XConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDot1XConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDot1XConfigurationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetDot1XConfigurationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDot1XConfigurationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getDot1XConfiguration"), reply);
    } else {
        dm::TDS__GetDot1XConfigurationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getDot1XConfigurationDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetDot1XConfigurationsResponse dm::DeviceBindingService::getDot1XConfigurations( const dm::TDS__GetDot1XConfigurations& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDot1XConfigurations(parameters.serialize(QString::fromLatin1("GetDot1XConfigurations")));// elementargumentserializer.cpp:102
    _valueGetDot1XConfigurations.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDot1XConfigurations.setQualified(true);
    message = _valueGetDot1XConfigurations;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDot1XConfigurations"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetDot1XConfigurationsResponse();
    dm::TDS__GetDot1XConfigurationsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetDot1XConfigurations( const dm::TDS__GetDot1XConfigurations& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDot1XConfigurations(parameters.serialize(QString::fromLatin1("GetDot1XConfigurations")));// elementargumentserializer.cpp:102
    _valueGetDot1XConfigurations.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDot1XConfigurations.setQualified(true);
    message = _valueGetDot1XConfigurations;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDot1XConfigurations"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDot1XConfigurationsFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetDot1XConfigurationsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDot1XConfigurationsError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getDot1XConfigurations"), reply);
    } else {
        dm::TDS__GetDot1XConfigurationsResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getDot1XConfigurationsDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__DeleteDot1XConfigurationResponse dm::DeviceBindingService::deleteDot1XConfiguration( const dm::TDS__DeleteDot1XConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteDot1XConfiguration(parameters.serialize(QString::fromLatin1("DeleteDot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueDeleteDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDeleteDot1XConfiguration.setQualified(true);
    message = _valueDeleteDot1XConfiguration;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("DeleteDot1XConfiguration"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__DeleteDot1XConfigurationResponse();
    dm::TDS__DeleteDot1XConfigurationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncDeleteDot1XConfiguration( const dm::TDS__DeleteDot1XConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteDot1XConfiguration(parameters.serialize(QString::fromLatin1("DeleteDot1XConfiguration")));// elementargumentserializer.cpp:102
    _valueDeleteDot1XConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDeleteDot1XConfiguration.setQualified(true);
    message = _valueDeleteDot1XConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("DeleteDot1XConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotDeleteDot1XConfigurationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotDeleteDot1XConfigurationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT deleteDot1XConfigurationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("deleteDot1XConfiguration"), reply);
    } else {
        dm::TDS__DeleteDot1XConfigurationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT deleteDot1XConfigurationDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetDot11CapabilitiesResponse dm::DeviceBindingService::getDot11Capabilities( const dm::TDS__GetDot11Capabilities& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDot11Capabilities(parameters.serialize(QString::fromLatin1("GetDot11Capabilities")));// elementargumentserializer.cpp:102
    _valueGetDot11Capabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDot11Capabilities.setQualified(true);
    message = _valueGetDot11Capabilities;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDot11Capabilities"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetDot11CapabilitiesResponse();
    dm::TDS__GetDot11CapabilitiesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetDot11Capabilities( const dm::TDS__GetDot11Capabilities& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDot11Capabilities(parameters.serialize(QString::fromLatin1("GetDot11Capabilities")));// elementargumentserializer.cpp:102
    _valueGetDot11Capabilities.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDot11Capabilities.setQualified(true);
    message = _valueGetDot11Capabilities;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDot11Capabilities"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDot11CapabilitiesFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetDot11CapabilitiesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDot11CapabilitiesError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getDot11Capabilities"), reply);
    } else {
        dm::TDS__GetDot11CapabilitiesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getDot11CapabilitiesDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetDot11StatusResponse dm::DeviceBindingService::getDot11Status( const dm::TDS__GetDot11Status& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDot11Status");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDot11Status(parameters.serialize(QString::fromLatin1("GetDot11Status")));// elementargumentserializer.cpp:102
    _valueGetDot11Status.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDot11Status.setQualified(true);
    message = _valueGetDot11Status;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDot11Status"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetDot11StatusResponse();
    dm::TDS__GetDot11StatusResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetDot11Status( const dm::TDS__GetDot11Status& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetDot11Status");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDot11Status(parameters.serialize(QString::fromLatin1("GetDot11Status")));// elementargumentserializer.cpp:102
    _valueGetDot11Status.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetDot11Status.setQualified(true);
    message = _valueGetDot11Status;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDot11Status"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDot11StatusFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetDot11StatusFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDot11StatusError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getDot11Status"), reply);
    } else {
        dm::TDS__GetDot11StatusResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getDot11StatusDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__ScanAvailableDot11NetworksResponse dm::DeviceBindingService::scanAvailableDot11Networks( const dm::TDS__ScanAvailableDot11Networks& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueScanAvailableDot11Networks(parameters.serialize(QString::fromLatin1("ScanAvailableDot11Networks")));// elementargumentserializer.cpp:102
    _valueScanAvailableDot11Networks.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueScanAvailableDot11Networks.setQualified(true);
    message = _valueScanAvailableDot11Networks;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("ScanAvailableDot11Networks"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__ScanAvailableDot11NetworksResponse();
    dm::TDS__ScanAvailableDot11NetworksResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncScanAvailableDot11Networks( const dm::TDS__ScanAvailableDot11Networks& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueScanAvailableDot11Networks(parameters.serialize(QString::fromLatin1("ScanAvailableDot11Networks")));// elementargumentserializer.cpp:102
    _valueScanAvailableDot11Networks.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueScanAvailableDot11Networks.setQualified(true);
    message = _valueScanAvailableDot11Networks;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("ScanAvailableDot11Networks"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotScanAvailableDot11NetworksFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotScanAvailableDot11NetworksFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT scanAvailableDot11NetworksError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("scanAvailableDot11Networks"), reply);
    } else {
        dm::TDS__ScanAvailableDot11NetworksResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT scanAvailableDot11NetworksDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetSystemUrisResponse dm::DeviceBindingService::getSystemUris( const dm::TDS__GetSystemUris& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemUris");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemUris(parameters.serialize(QString::fromLatin1("GetSystemUris")));// elementargumentserializer.cpp:102
    _valueGetSystemUris.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemUris.setQualified(true);
    message = _valueGetSystemUris;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetSystemUris"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetSystemUrisResponse();
    dm::TDS__GetSystemUrisResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetSystemUris( const dm::TDS__GetSystemUris& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetSystemUris");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSystemUris(parameters.serialize(QString::fromLatin1("GetSystemUris")));// elementargumentserializer.cpp:102
    _valueGetSystemUris.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetSystemUris.setQualified(true);
    message = _valueGetSystemUris;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetSystemUris"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetSystemUrisFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetSystemUrisFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getSystemUrisError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getSystemUris"), reply);
    } else {
        dm::TDS__GetSystemUrisResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getSystemUrisDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__StartFirmwareUpgradeResponse dm::DeviceBindingService::startFirmwareUpgrade( const dm::TDS__StartFirmwareUpgrade& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueStartFirmwareUpgrade(parameters.serialize(QString::fromLatin1("StartFirmwareUpgrade")));// elementargumentserializer.cpp:102
    _valueStartFirmwareUpgrade.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueStartFirmwareUpgrade.setQualified(true);
    message = _valueStartFirmwareUpgrade;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("StartFirmwareUpgrade"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__StartFirmwareUpgradeResponse();
    dm::TDS__StartFirmwareUpgradeResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncStartFirmwareUpgrade( const dm::TDS__StartFirmwareUpgrade& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueStartFirmwareUpgrade(parameters.serialize(QString::fromLatin1("StartFirmwareUpgrade")));// elementargumentserializer.cpp:102
    _valueStartFirmwareUpgrade.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueStartFirmwareUpgrade.setQualified(true);
    message = _valueStartFirmwareUpgrade;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("StartFirmwareUpgrade"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotStartFirmwareUpgradeFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotStartFirmwareUpgradeFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT startFirmwareUpgradeError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("startFirmwareUpgrade"), reply);
    } else {
        dm::TDS__StartFirmwareUpgradeResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT startFirmwareUpgradeDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__StartSystemRestoreResponse dm::DeviceBindingService::startSystemRestore( const dm::TDS__StartSystemRestore& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/StartSystemRestore");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueStartSystemRestore(parameters.serialize(QString::fromLatin1("StartSystemRestore")));// elementargumentserializer.cpp:102
    _valueStartSystemRestore.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueStartSystemRestore.setQualified(true);
    message = _valueStartSystemRestore;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("StartSystemRestore"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__StartSystemRestoreResponse();
    dm::TDS__StartSystemRestoreResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncStartSystemRestore( const dm::TDS__StartSystemRestore& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/StartSystemRestore");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueStartSystemRestore(parameters.serialize(QString::fromLatin1("StartSystemRestore")));// elementargumentserializer.cpp:102
    _valueStartSystemRestore.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueStartSystemRestore.setQualified(true);
    message = _valueStartSystemRestore;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("StartSystemRestore"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotStartSystemRestoreFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotStartSystemRestoreFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT startSystemRestoreError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("startSystemRestore"), reply);
    } else {
        dm::TDS__StartSystemRestoreResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT startSystemRestoreDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetStorageConfigurationsResponse dm::DeviceBindingService::getStorageConfigurations( const dm::TDS__GetStorageConfigurations& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurations");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetStorageConfigurations(parameters.serialize(QString::fromLatin1("GetStorageConfigurations")));// elementargumentserializer.cpp:102
    _valueGetStorageConfigurations.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetStorageConfigurations.setQualified(true);
    message = _valueGetStorageConfigurations;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetStorageConfigurations"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetStorageConfigurationsResponse();
    dm::TDS__GetStorageConfigurationsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetStorageConfigurations( const dm::TDS__GetStorageConfigurations& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurations");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetStorageConfigurations(parameters.serialize(QString::fromLatin1("GetStorageConfigurations")));// elementargumentserializer.cpp:102
    _valueGetStorageConfigurations.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetStorageConfigurations.setQualified(true);
    message = _valueGetStorageConfigurations;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetStorageConfigurations"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetStorageConfigurationsFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetStorageConfigurationsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getStorageConfigurationsError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getStorageConfigurations"), reply);
    } else {
        dm::TDS__GetStorageConfigurationsResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getStorageConfigurationsDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__CreateStorageConfigurationResponse dm::DeviceBindingService::createStorageConfiguration( const dm::TDS__CreateStorageConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/CreateStorageConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateStorageConfiguration(parameters.serialize(QString::fromLatin1("CreateStorageConfiguration")));// elementargumentserializer.cpp:102
    _valueCreateStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCreateStorageConfiguration.setQualified(true);
    message = _valueCreateStorageConfiguration;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateStorageConfiguration"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__CreateStorageConfigurationResponse();
    dm::TDS__CreateStorageConfigurationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncCreateStorageConfiguration( const dm::TDS__CreateStorageConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/CreateStorageConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateStorageConfiguration(parameters.serialize(QString::fromLatin1("CreateStorageConfiguration")));// elementargumentserializer.cpp:102
    _valueCreateStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueCreateStorageConfiguration.setQualified(true);
    message = _valueCreateStorageConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateStorageConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateStorageConfigurationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotCreateStorageConfigurationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createStorageConfigurationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("createStorageConfiguration"), reply);
    } else {
        dm::TDS__CreateStorageConfigurationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT createStorageConfigurationDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__GetStorageConfigurationResponse dm::DeviceBindingService::getStorageConfiguration( const dm::TDS__GetStorageConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetStorageConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetStorageConfiguration(parameters.serialize(QString::fromLatin1("GetStorageConfiguration")));// elementargumentserializer.cpp:102
    _valueGetStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetStorageConfiguration.setQualified(true);
    message = _valueGetStorageConfiguration;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetStorageConfiguration"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__GetStorageConfigurationResponse();
    dm::TDS__GetStorageConfigurationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncGetStorageConfiguration( const dm::TDS__GetStorageConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/GetStorageConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetStorageConfiguration(parameters.serialize(QString::fromLatin1("GetStorageConfiguration")));// elementargumentserializer.cpp:102
    _valueGetStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueGetStorageConfiguration.setQualified(true);
    message = _valueGetStorageConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetStorageConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetStorageConfigurationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotGetStorageConfigurationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getStorageConfigurationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("getStorageConfiguration"), reply);
    } else {
        dm::TDS__GetStorageConfigurationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT getStorageConfigurationDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__SetStorageConfigurationResponse dm::DeviceBindingService::setStorageConfiguration( const dm::TDS__SetStorageConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetStorageConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetStorageConfiguration(parameters.serialize(QString::fromLatin1("SetStorageConfiguration")));// elementargumentserializer.cpp:102
    _valueSetStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetStorageConfiguration.setQualified(true);
    message = _valueSetStorageConfiguration;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetStorageConfiguration"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__SetStorageConfigurationResponse();
    dm::TDS__SetStorageConfigurationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncSetStorageConfiguration( const dm::TDS__SetStorageConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/SetStorageConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetStorageConfiguration(parameters.serialize(QString::fromLatin1("SetStorageConfiguration")));// elementargumentserializer.cpp:102
    _valueSetStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueSetStorageConfiguration.setQualified(true);
    message = _valueSetStorageConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetStorageConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetStorageConfigurationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotSetStorageConfigurationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setStorageConfigurationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("setStorageConfiguration"), reply);
    } else {
        dm::TDS__SetStorageConfigurationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT setStorageConfigurationDone( ret );
    }
    watcher->deleteLater();
}

dm::TDS__DeleteStorageConfigurationResponse dm::DeviceBindingService::deleteStorageConfiguration( const dm::TDS__DeleteStorageConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteStorageConfiguration(parameters.serialize(QString::fromLatin1("DeleteStorageConfiguration")));// elementargumentserializer.cpp:102
    _valueDeleteStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDeleteStorageConfiguration.setQualified(true);
    message = _valueDeleteStorageConfiguration;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("DeleteStorageConfiguration"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return dm::TDS__DeleteStorageConfigurationResponse();
    dm::TDS__DeleteStorageConfigurationResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:553
    return ret;// converter_clientstub.cpp:607
}

void dm::DeviceBindingService::asyncDeleteStorageConfiguration( const dm::TDS__DeleteStorageConfiguration& parameters )
{
    const QString action = QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfiguration");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueDeleteStorageConfiguration(parameters.serialize(QString::fromLatin1("DeleteStorageConfiguration")));// elementargumentserializer.cpp:102
    _valueDeleteStorageConfiguration.setNamespaceUri(QString::fromLatin1("http://www.onvif.org/ver10/device/wsdl"));
    _valueDeleteStorageConfiguration.setQualified(true);
    message = _valueDeleteStorageConfiguration;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("DeleteStorageConfiguration"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotDeleteStorageConfigurationFinished(KDSoapPendingCallWatcher*)));
}

void dm::DeviceBindingService::_kd_slotDeleteStorageConfigurationFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT deleteStorageConfigurationError(reply);// converter_clientstub.cpp:717
        Q_EMIT soapError(QLatin1String("deleteStorageConfiguration"), reply);
    } else {
        dm::TDS__DeleteStorageConfigurationResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:553
        Q_EMIT deleteStorageConfigurationDone( ret );
    }
    watcher->deleteLater();
}


