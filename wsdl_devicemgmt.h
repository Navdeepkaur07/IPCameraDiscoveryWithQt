                                                                                                                                                 // This file is generated by KDAB's kdwsdl2cpp from devicemgmt.wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/
#ifndef WSDL_DEVICEMGMT_H
#define WSDL_DEVICEMGMT_H

#include <QtCore/QString>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QStringList>
#include <QtCore/QSharedData>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDDateTime.h>
#include <KDSoapClient/KDSoapJob.h>
#include <QtCore/QObject>
#include <KDSoapClient/KDSoapClientInterface.h>

class KDSoapMessage;
class KDSoapPendingCallWatcher;
class KDSoapValue;
namespace dm {
    class DeviceBindingService;
    class TDS__Capabilities;
    class TDS__DeviceServiceCapabilities;
    class TDS__EAPMethodTypes;
    class TDS__Extension;
    class TDS__MiscCapabilities;
    class TDS__NetworkCapabilities;
    class TDS__SecurityCapabilities;
    class TDS__Service;
    class TDS__StorageConfiguration;
    class TDS__StorageConfigurationData;
    class TDS__SystemCapabilities;
    class TDS__UserCredential;
    class TT__AnalyticsCapabilities;
    class TT__AnalyticsDeviceCapabilities;
    class TT__AnalyticsDeviceExtension;
    class TT__AttachmentData;
    class TT__AutoFocusMode;
    class TT__AuxiliaryData;
    class TT__BacklightCompensation;
    class TT__BacklightCompensation20;
    class TT__BacklightCompensationMode;
    class TT__BackupFile;
    class TT__BinaryData;
    class TT__Capabilities;
    class TT__CapabilitiesExtension;
    class TT__CapabilitiesExtension2;
    class TT__CapabilityCategory;
    class TT__Certificate;
    class TT__CertificateInformation;
    class TT__CertificateInformationExtension;
    class TT__CertificateStatus;
    class TT__CertificateUsage;
    class TT__CertificateWithPrivateKey;
    class TT__Color;
    class TT__DNSInformation;
    class TT__DNSInformationExtension;
    class TT__DNSName;
    class TT__Date;
    class TT__DateTime;
    class TT__DateTimeRange;
    class TT__Defogging;
    class TT__DefoggingExtension;
    class TT__DeviceCapabilities;
    class TT__DeviceCapabilitiesExtension;
    class TT__DeviceEntity;
    class TT__DeviceIOCapabilities;
    class TT__DiscoveryMode;
    class TT__DisplayCapabilities;
    class TT__Dot11AuthAndMangementSuite;
    class TT__Dot11AvailableNetworks;
    class TT__Dot11AvailableNetworksExtension;
    class TT__Dot11Capabilities;
    class TT__Dot11Cipher;
    class TT__Dot11Configuration;
    class TT__Dot11PSK;
    class TT__Dot11PSKPassphrase;
    class TT__Dot11PSKSet;
    class TT__Dot11PSKSetExtension;
    class TT__Dot11SSIDType;
    class TT__Dot11SecurityConfiguration;
    class TT__Dot11SecurityConfigurationExtension;
    class TT__Dot11SecurityMode;
    class TT__Dot11SignalStrength;
    class TT__Dot11StationMode;
    class TT__Dot11Status;
    class TT__Dot1XConfiguration;
    class TT__Dot1XConfigurationExtension;
    class TT__Dot3Configuration;
    class TT__Duplex;
    class TT__DynamicDNSInformation;
    class TT__DynamicDNSInformationExtension;
    class TT__DynamicDNSType;
    class TT__EAPMethodConfiguration;
    class TT__EapMethodExtension;
    class TT__EventCapabilities;
    class TT__Exposure;
    class TT__Exposure20;
    class TT__ExposureMode;
    class TT__ExposurePriority;
    class TT__FactoryDefaultType;
    class TT__FloatRange;
    class TT__FocusConfiguration;
    class TT__FocusConfiguration20;
    class TT__FocusConfiguration20Extension;
    class TT__HostnameInformation;
    class TT__HostnameInformationExtension;
    class TT__HwAddress;
    class TT__IANA_IfTypes;
    class TT__IOCapabilities;
    class TT__IOCapabilitiesExtension;
    class TT__IOCapabilitiesExtension2;
    class TT__IPAddress;
    class TT__IPAddressFilter;
    class TT__IPAddressFilterExtension;
    class TT__IPAddressFilterType;
    class TT__IPType;
    class TT__IPv4Address;
    class TT__IPv4Configuration;
    class TT__IPv4NetworkInterface;
    class TT__IPv4NetworkInterfaceSetConfiguration;
    class TT__IPv6Address;
    class TT__IPv6Configuration;
    class TT__IPv6ConfigurationExtension;
    class TT__IPv6DHCPConfiguration;
    class TT__IPv6NetworkInterface;
    class TT__IPv6NetworkInterfaceSetConfiguration;
    class TT__ImageStabilization;
    class TT__ImageStabilizationExtension;
    class TT__ImageStabilizationMode;
    class TT__ImagingCapabilities;
    class TT__ImagingSettings;
    class TT__ImagingSettings20;
    class TT__ImagingSettingsExtension;
    class TT__ImagingSettingsExtension20;
    class TT__ImagingSettingsExtension202;
    class TT__ImagingSettingsExtension203;
    class TT__ImagingSettingsExtension204;
    class TT__IrCutFilterAutoAdjustment;
    class TT__IrCutFilterAutoAdjustmentExtension;
    class TT__IrCutFilterMode;
    class TT__Layout;
    class TT__LayoutExtension;
    class TT__MediaCapabilities;
    class TT__MediaCapabilitiesExtension;
    class TT__NTPInformation;
    class TT__NTPInformationExtension;
    class TT__Name;
    class TT__NetworkCapabilities;
    class TT__NetworkCapabilitiesExtension;
    class TT__NetworkCapabilitiesExtension2;
    class TT__NetworkGateway;
    class TT__NetworkHost;
    class TT__NetworkHostExtension;
    class TT__NetworkHostType;
    class TT__NetworkInterface;
    class TT__NetworkInterfaceConfigPriority;
    class TT__NetworkInterfaceConnectionSetting;
    class TT__NetworkInterfaceExtension;
    class TT__NetworkInterfaceExtension2;
    class TT__NetworkInterfaceInfo;
    class TT__NetworkInterfaceLink;
    class TT__NetworkInterfaceSetConfiguration;
    class TT__NetworkInterfaceSetConfigurationExtension;
    class TT__NetworkInterfaceSetConfigurationExtension2;
    class TT__NetworkProtocol;
    class TT__NetworkProtocolExtension;
    class TT__NetworkProtocolType;
    class TT__NetworkZeroConfiguration;
    class TT__NetworkZeroConfigurationExtension;
    class TT__NetworkZeroConfigurationExtension2;
    class TT__NoiseReduction;
    class TT__OSDColor;
    class TT__OSDConfigurationExtension;
    class TT__OSDImgConfiguration;
    class TT__OSDImgConfigurationExtension;
    class TT__OSDPosConfiguration;
    class TT__OSDPosConfigurationExtension;
    class TT__OSDReference;
    class TT__OSDTextConfiguration;
    class TT__OSDTextConfigurationExtension;
    class TT__OSDType;
    class TT__OnvifVersion;
    class TT__PTZCapabilities;
    class TT__PTZNodeExtension;
    class TT__PTZNodeExtension2;
    class TT__PTZPresetTourOperation;
    class TT__PTZPresetTourSupported;
    class TT__PTZPresetTourSupportedExtension;
    class TT__PTZSpaces;
    class TT__PTZSpacesExtension;
    class TT__PaneLayout;
    class TT__PrefixedIPv4Address;
    class TT__PrefixedIPv6Address;
    class TT__ProfileCapabilities;
    class TT__RealTimeStreamingCapabilities;
    class TT__RealTimeStreamingCapabilitiesExtension;
    class TT__ReceiverCapabilities;
    class TT__RecordingCapabilities;
    class TT__Rectangle;
    class TT__ReferenceToken;
    class TT__RelayIdleState;
    class TT__RelayLogicalState;
    class TT__RelayMode;
    class TT__RelayOutput;
    class TT__RelayOutputSettings;
    class TT__RemoteUser;
    class TT__ReplayCapabilities;
    class TT__Scope;
    class TT__ScopeDefinition;
    class TT__SearchCapabilities;
    class TT__SecurityCapabilities;
    class TT__SecurityCapabilitiesExtension;
    class TT__SecurityCapabilitiesExtension2;
    class TT__SetDateTimeType;
    class TT__Space1DDescription;
    class TT__Space2DDescription;
    class TT__StringAttrList;
    class TT__SupportInformation;
    class TT__SystemCapabilities;
    class TT__SystemCapabilitiesExtension;
    class TT__SystemCapabilitiesExtension2;
    class TT__SystemDateTime;
    class TT__SystemDateTimeExtension;
    class TT__SystemLog;
    class TT__SystemLogType;
    class TT__SystemLogUri;
    class TT__SystemLogUriList;
    class TT__TLSConfiguration;
    class TT__Time;
    class TT__TimeZone;
    class TT__ToneCompensation;
    class TT__ToneCompensationExtension;
    class TT__User;
    class TT__UserExtension;
    class TT__UserLevel;
    class TT__Vector;
    class TT__VideoOutputExtension;
    class TT__VideoResolution;
    class TT__VideoSourceExtension;
    class TT__VideoSourceExtension2;
    class TT__WhiteBalance;
    class TT__WhiteBalance20;
    class TT__WhiteBalance20Extension;
    class TT__WhiteBalanceMode;
    class TT__WideDynamicMode;
    class TT__WideDynamicRange;
    class TT__WideDynamicRange20;
    class XMIME__ContentType;
    class XOP__Include;
}


namespace dm {
    /**
        Enumeration describing the available factory default modes.
     */
    class TT__FactoryDefaultType
    {
    public:
        enum Type { Hard, Soft };

    public:
        TT__FactoryDefaultType( const Type &type );
        void setType( Type type );
        dm::TT__FactoryDefaultType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__FactoryDefaultType();
        ~TT__FactoryDefaultType();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a simple type.
        Whenever you have to pass an object of type TT__AuxiliaryData you can
        also pass the value directly as a QString.
     */
    class TT__AuxiliaryData
    {
    public:
        void setValue( const QString& value );
        QString value() const;
        TT__AuxiliaryData( const QString& value );
        operator QString() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__AuxiliaryData();
        ~TT__AuxiliaryData();

    private:
        QString mValue;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__DiscoveryMode you can
        also pass the enum directly.
        Example:
        someMethod(TT__DiscoveryMode::Discoverable).
     */
    class TT__DiscoveryMode
    {
    public:
        enum Type { Discoverable, NonDiscoverable };

    public:
        TT__DiscoveryMode( const Type &type );
        void setType( Type type );
        dm::TT__DiscoveryMode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__DiscoveryMode();
        ~TT__DiscoveryMode();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__CapabilityCategory you
        can also pass the enum directly.
        Example:
        someMethod(TT__CapabilityCategory::All).
     */
    class TT__CapabilityCategory
    {
    public:
        enum Type { All, Analytics, Device, Events, Imaging, Media, PTZ };

    public:
        TT__CapabilityCategory( const Type &type );
        void setType( Type type );
        dm::TT__CapabilityCategory::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__CapabilityCategory();
        ~TT__CapabilityCategory();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a simple type.
        Whenever you have to pass an object of type TT__IPv4Address you can
        also pass the value directly as a QString.
     */
    class TT__IPv4Address
    {
    public:
        void setValue( const QString& value );
        QString value() const;
        TT__IPv4Address( const QString& value );
        operator QString() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__IPv4Address();
        ~TT__IPv4Address();

    private:
        QString mValue;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__SetDateTimeType you can
        also pass the enum directly.
        Example:
        someMethod(TT__SetDateTimeType::Manual).
     */
    class TT__SetDateTimeType
    {
    public:
        enum Type { Manual, NTP };

    public:
        TT__SetDateTimeType( const Type &type );
        void setType( Type type );
        dm::TT__SetDateTimeType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__SetDateTimeType();
        ~TT__SetDateTimeType();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a simple type.
        Whenever you have to pass an object of type TT__DNSName you can also
        pass the value directly as a QString.
     */
    class TT__DNSName
    {
    public:
        void setValue( const QString& value );
        QString value() const;
        TT__DNSName( const QString& value );
        operator QString() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__DNSName();
        ~TT__DNSName();

    private:
        QString mValue;
};
} // namespace end

namespace dm {
    /**
        Enumeration describing the available system log modes.
     */
    class TT__SystemLogType
    {
    public:
        enum Type { System, Access };

    public:
        TT__SystemLogType( const Type &type );
        void setType( Type type );
        dm::TT__SystemLogType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__SystemLogType();
        ~TT__SystemLogType();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__RelayLogicalState you
        can also pass the enum directly.
        Example:
        someMethod(TT__RelayLogicalState::Active).
     */
    class TT__RelayLogicalState
    {
    public:
        enum Type { Active, Inactive };

    public:
        TT__RelayLogicalState( const Type &type );
        void setType( Type type );
        dm::TT__RelayLogicalState::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__RelayLogicalState();
        ~TT__RelayLogicalState();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        Unique identifier for a physical or logical resource. Tokens should be
        assigned such that they are unique within a device. Tokens must be at
        least unique within its class. Length up to 64 characters.
     */
    class TT__ReferenceToken
    {
    public:
        void setValue( const QString& value );
        QString value() const;
        TT__ReferenceToken( const QString& value );
        operator QString() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__ReferenceToken();
        ~TT__ReferenceToken();

    private:
        QString mValue;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__DynamicDNSType you can
        also pass the enum directly.
        Example:
        someMethod(TT__DynamicDNSType::NoUpdate).
     */
    class TT__DynamicDNSType
    {
    public:
        enum Type { NoUpdate, ClientUpdates, ServerUpdates };

    public:
        TT__DynamicDNSType( const Type &type );
        void setType( Type type );
        dm::TT__DynamicDNSType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__DynamicDNSType();
        ~TT__DynamicDNSType();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a simple type.
        Whenever you have to pass an object of type TT__IPv6Address you can
        also pass the value directly as a QString.
     */
    class TT__IPv6Address
    {
    public:
        void setValue( const QString& value );
        QString value() const;
        TT__IPv6Address( const QString& value );
        operator QString() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__IPv6Address();
        ~TT__IPv6Address();

    private:
        QString mValue;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a simple type.
        Whenever you have to pass an object of type TT__Dot11SSIDType you can
        also pass the value directly as a QByteArray.
     */
    class TT__Dot11SSIDType
    {
    public:
        void setValue( const QByteArray& value );
        QByteArray value() const;
        TT__Dot11SSIDType( const QByteArray& value );
        operator QByteArray() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__Dot11SSIDType();
        ~TT__Dot11SSIDType();

    private:
        QByteArray mValue;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type
        TT__Dot11AuthAndMangementSuite you can also pass the enum directly.
        Example:
        someMethod(TT__Dot11AuthAndMangementSuite::None).
     */
    class TT__Dot11AuthAndMangementSuite
    {
    public:
        enum Type { None, Dot1X, PSK, Extended };

    public:
        TT__Dot11AuthAndMangementSuite( const Type &type );
        void setType( Type type );
        dm::TT__Dot11AuthAndMangementSuite::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__Dot11AuthAndMangementSuite();
        ~TT__Dot11AuthAndMangementSuite();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__UserLevel you can also
        pass the enum directly.
        Example:
        someMethod(TT__UserLevel::Administrator).
     */
    class TT__UserLevel
    {
    public:
        enum Type { Administrator, Operator, User, Anonymous, Extended };

    public:
        TT__UserLevel( const Type &type );
        void setType( Type type );
        dm::TT__UserLevel::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__UserLevel();
        ~TT__UserLevel();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__RelayMode you can also
        pass the enum directly. Example:
        someMethod(TT__RelayMode::Monostable).
     */
    class TT__RelayMode
    {
    public:
        enum Type { Monostable, Bistable };

    public:
        TT__RelayMode( const Type &type );
        void setType( Type type );
        dm::TT__RelayMode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__RelayMode();
        ~TT__RelayMode();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__NetworkProtocolType you
        can also pass the enum directly.
        Example:
        someMethod(TT__NetworkProtocolType::HTTP).
     */
    class TT__NetworkProtocolType
    {
    public:
        enum Type { HTTP, HTTPS, RTSP };

    public:
        TT__NetworkProtocolType( const Type &type );
        void setType( Type type );
        dm::TT__NetworkProtocolType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__NetworkProtocolType();
        ~TT__NetworkProtocolType();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__RelayIdleState you can
        also pass the enum directly.
        Example:
        someMethod(TT__RelayIdleState::Closed).
     */
    class TT__RelayIdleState
    {
    public:
        enum Type { Closed, Open };

    public:
        TT__RelayIdleState( const Type &type );
        void setType( Type type );
        dm::TT__RelayIdleState::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__RelayIdleState();
        ~TT__RelayIdleState();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__ScopeDefinition you can
        also pass the enum directly.
        Example:
        someMethod(TT__ScopeDefinition::Fixed).
     */
    class TT__ScopeDefinition
    {
    public:
        enum Type { Fixed, Configurable };

    public:
        TT__ScopeDefinition( const Type &type );
        void setType( Type type );
        dm::TT__ScopeDefinition::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__ScopeDefinition();
        ~TT__ScopeDefinition();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__IPType you can also
        pass the enum directly. Example:
        someMethod(TT__IPType::IPv4).
     */
    class TT__IPType
    {
    public:
        enum Type { IPv4, IPv6 };

    public:
        TT__IPType( const Type &type );
        void setType( Type type );
        dm::TT__IPType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__IPType();
        ~TT__IPType();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a simple type.
        Whenever you have to pass an object of type XMIME__ContentType you can
        also pass the value directly as a QString.
     */
    class XMIME__ContentType
    {
    public:
        void setValue( const QString& value );
        QString value() const;
        XMIME__ContentType( const QString& value );
        operator QString() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        XMIME__ContentType();
        ~XMIME__ContentType();

    private:
        QString mValue;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__IPAddressFilterType you
        can also pass the enum directly.
        Example:
        someMethod(TT__IPAddressFilterType::Allow).
     */
    class TT__IPAddressFilterType
    {
    public:
        enum Type { Allow, Deny };

    public:
        TT__IPAddressFilterType( const Type &type );
        void setType( Type type );
        dm::TT__IPAddressFilterType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__IPAddressFilterType();
        ~TT__IPAddressFilterType();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__Dot11SignalStrength you
        can also pass the enum directly.
        Example:
        someMethod(TT__Dot11SignalStrength::None).
     */
    class TT__Dot11SignalStrength
    {
    public:
        enum Type { None, Very_Bad, Bad, Good, Very_Good, Extended };

    public:
        TT__Dot11SignalStrength( const Type &type );
        void setType( Type type );
        dm::TT__Dot11SignalStrength::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__Dot11SignalStrength();
        ~TT__Dot11SignalStrength();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__Dot11Cipher you can
        also pass the enum directly.
        Example:
        someMethod(TT__Dot11Cipher::CCMP).
     */
    class TT__Dot11Cipher
    {
    public:
        enum Type { CCMP, TKIP, Any, Extended };

    public:
        TT__Dot11Cipher( const Type &type );
        void setType( Type type );
        dm::TT__Dot11Cipher::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__Dot11Cipher();
        ~TT__Dot11Cipher();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__NetworkHostType you can
        also pass the enum directly.
        Example:
        someMethod(TT__NetworkHostType::IPv4).
     */
    class TT__NetworkHostType
    {
    public:
        enum Type { IPv4, IPv6, DNS };

    public:
        TT__NetworkHostType( const Type &type );
        void setType( Type type );
        dm::TT__NetworkHostType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__NetworkHostType();
        ~TT__NetworkHostType();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__Duplex you can also
        pass the enum directly. Example:
        someMethod(TT__Duplex::Full).
     */
    class TT__Duplex
    {
    public:
        enum Type { Full, Half };

    public:
        TT__Duplex( const Type &type );
        void setType( Type type );
        dm::TT__Duplex::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__Duplex();
        ~TT__Duplex();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a list type.
     */
    class TT__StringAttrList
    {
    public:
        void setEntries( const QStringList& entries );
        QStringList entries() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__StringAttrList();
        ~TT__StringAttrList();

    private:
        QStringList mEntries;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__IPv6DHCPConfiguration
        you can also pass the enum directly.
        Example:
        someMethod(TT__IPv6DHCPConfiguration::Auto).
     */
    class TT__IPv6DHCPConfiguration
    {
    public:
        enum Type { Auto, Stateful, Stateless, Off };

    public:
        TT__IPv6DHCPConfiguration( const Type &type );
        void setType( Type type );
        dm::TT__IPv6DHCPConfiguration::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__IPv6DHCPConfiguration();
        ~TT__IPv6DHCPConfiguration();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a simple type.
        Whenever you have to pass an object of type TT__IANA_IfTypes you can
        also pass the value directly as a int.
     */
    class TT__IANA_IfTypes
    {
    public:
        void setValue( int value );
        int value() const;
        TT__IANA_IfTypes( int value );
        operator int() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__IANA_IfTypes();
        ~TT__IANA_IfTypes();

    private:
        int mValue;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a list type.
     */
    class TDS__EAPMethodTypes
    {
    public:
        void setEntries( const QList< int >& entries );
        QList< int > entries() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TDS__EAPMethodTypes();
        ~TDS__EAPMethodTypes();

    private:
        QList< int > mEntries;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a simple type.
        Whenever you have to pass an object of type TT__HwAddress you can also
        pass the value directly as a QString.
     */
    class TT__HwAddress
    {
    public:
        void setValue( const QString& value );
        QString value() const;
        TT__HwAddress( const QString& value );
        operator QString() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__HwAddress();
        ~TT__HwAddress();

    private:
        QString mValue;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__OSDType you can also
        pass the enum directly. Example:
        someMethod(TT__OSDType::Text).
     */
    class TT__OSDType
    {
    public:
        enum Type { Text, Image, Extended };

    public:
        TT__OSDType( const Type &type );
        void setType( Type type );
        dm::TT__OSDType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__OSDType();
        ~TT__OSDType();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__Dot11StationMode you
        can also pass the enum directly.
        Example:
        someMethod(TT__Dot11StationMode::Ad_hoc).
     */
    class TT__Dot11StationMode
    {
    public:
        enum Type { Ad_hoc, Infrastructure, Extended };

    public:
        TT__Dot11StationMode( const Type &type );
        void setType( Type type );
        dm::TT__Dot11StationMode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__Dot11StationMode();
        ~TT__Dot11StationMode();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a simple type.
        Whenever you have to pass an object of type
        TT__NetworkInterfaceConfigPriority you can also pass the value directly
        as a qint64.
     */
    class TT__NetworkInterfaceConfigPriority
    {
    public:
        void setValue( qint64 value );
        qint64 value() const;
        TT__NetworkInterfaceConfigPriority( qint64 value );
        operator qint64() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__NetworkInterfaceConfigPriority();
        ~TT__NetworkInterfaceConfigPriority();

    private:
        qint64 mValue;
};
} // namespace end

namespace dm {
    /**
        User readable name. Length up to 64 characters.
     */
    class TT__Name
    {
    public:
        void setValue( const QString& value );
        QString value() const;
        TT__Name( const QString& value );
        operator QString() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__Name();
        ~TT__Name();

    private:
        QString mValue;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__Dot11SecurityMode you
        can also pass the enum directly.
        Example:
        someMethod(TT__Dot11SecurityMode::None).
     */
    class TT__Dot11SecurityMode
    {
    public:
        enum Type { None, WEP, PSK, Dot1X, Extended };

    public:
        TT__Dot11SecurityMode( const Type &type );
        void setType( Type type );
        dm::TT__Dot11SecurityMode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__Dot11SecurityMode();
        ~TT__Dot11SecurityMode();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__IrCutFilterMode you can
        also pass the enum directly.
        Example:
        someMethod(TT__IrCutFilterMode::ON).
     */
    class TT__IrCutFilterMode
    {
    public:
        enum Type { ON, OFF, AUTO };

    public:
        TT__IrCutFilterMode( const Type &type );
        void setType( Type type );
        dm::TT__IrCutFilterMode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__IrCutFilterMode();
        ~TT__IrCutFilterMode();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__WideDynamicMode you can
        also pass the enum directly.
        Example:
        someMethod(TT__WideDynamicMode::OFF).
     */
    class TT__WideDynamicMode
    {
    public:
        enum Type { OFF, ON };

    public:
        TT__WideDynamicMode( const Type &type );
        void setType( Type type );
        dm::TT__WideDynamicMode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__WideDynamicMode();
        ~TT__WideDynamicMode();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__ExposureMode you can
        also pass the enum directly.
        Example:
        someMethod(TT__ExposureMode::AUTO).
     */
    class TT__ExposureMode
    {
    public:
        enum Type { AUTO, MANUAL };

    public:
        TT__ExposureMode( const Type &type );
        void setType( Type type );
        dm::TT__ExposureMode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__ExposureMode();
        ~TT__ExposureMode();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__ExposurePriority you
        can also pass the enum directly.
        Example:
        someMethod(TT__ExposurePriority::LowNoise).
     */
    class TT__ExposurePriority
    {
    public:
        enum Type { LowNoise, FrameRate };

    public:
        TT__ExposurePriority( const Type &type );
        void setType( Type type );
        dm::TT__ExposurePriority::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__ExposurePriority();
        ~TT__ExposurePriority();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a simple type.
        Whenever you have to pass an object of type TT__Dot11PSK you can also
        pass the value directly as a QByteArray.
     */
    class TT__Dot11PSK
    {
    public:
        void setValue( const QByteArray& value );
        QByteArray value() const;
        TT__Dot11PSK( const QByteArray& value );
        operator QByteArray() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__Dot11PSK();
        ~TT__Dot11PSK();

    private:
        QByteArray mValue;
};
} // namespace end

namespace dm {
    /**
        Enumeration describing the available backlight compenstation modes.
     */
    class TT__BacklightCompensationMode
    {
    public:
        enum Type { OFF, ON };

    public:
        TT__BacklightCompensationMode( const Type &type );
        void setType( Type type );
        dm::TT__BacklightCompensationMode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__BacklightCompensationMode();
        ~TT__BacklightCompensationMode();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__AutoFocusMode you can
        also pass the enum directly.
        Example:
        someMethod(TT__AutoFocusMode::AUTO).
     */
    class TT__AutoFocusMode
    {
    public:
        enum Type { AUTO, MANUAL };

    public:
        TT__AutoFocusMode( const Type &type );
        void setType( Type type );
        dm::TT__AutoFocusMode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__AutoFocusMode();
        ~TT__AutoFocusMode();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__PTZPresetTourOperation
        you can also pass the enum directly.
        Example:
        someMethod(TT__PTZPresetTourOperation::Start).
     */
    class TT__PTZPresetTourOperation
    {
    public:
        enum Type { Start, Stop, Pause, Extended };

    public:
        TT__PTZPresetTourOperation( const Type &type );
        void setType( Type type );
        dm::TT__PTZPresetTourOperation::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__PTZPresetTourOperation();
        ~TT__PTZPresetTourOperation();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class encapsulates a simple type.
        Whenever you have to pass an object of type TT__Dot11PSKPassphrase you
        can also pass the value directly as a QString.
     */
    class TT__Dot11PSKPassphrase
    {
    public:
        void setValue( const QString& value );
        QString value() const;
        TT__Dot11PSKPassphrase( const QString& value );
        operator QString() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__Dot11PSKPassphrase();
        ~TT__Dot11PSKPassphrase();

    private:
        QString mValue;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__WhiteBalanceMode you
        can also pass the enum directly.
        Example:
        someMethod(TT__WhiteBalanceMode::AUTO).
     */
    class TT__WhiteBalanceMode
    {
    public:
        enum Type { AUTO, MANUAL };

    public:
        TT__WhiteBalanceMode( const Type &type );
        void setType( Type type );
        dm::TT__WhiteBalanceMode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__WhiteBalanceMode();
        ~TT__WhiteBalanceMode();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type TT__ImageStabilizationMode
        you can also pass the enum directly.
        Example:
        someMethod(TT__ImageStabilizationMode::OFF).
     */
    class TT__ImageStabilizationMode
    {
    public:
        enum Type { OFF, ON, AUTO, Extended };

    public:
        TT__ImageStabilizationMode( const Type &type );
        void setType( Type type );
        dm::TT__ImageStabilizationMode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        TT__ImageStabilizationMode();
        ~TT__ImageStabilizationMode();

    private:
        Type mType;
};
} // namespace end

namespace dm {
    class TT__IPAddress
    {
    public:
        void setType( const dm::TT__IPType& _type );
        dm::TT__IPType type() const;
        void setIPv4Address( const dm::TT__IPv4Address& _iPv4Address );
        dm::TT__IPv4Address iPv4Address() const;
        void setIPv6Address( const dm::TT__IPv6Address& _iPv6Address );
        dm::TT__IPv6Address iPv6Address() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IPAddress();
        ~TT__IPAddress();

    public:
        TT__IPAddress( const TT__IPAddress& );
        TT__IPAddress &operator=( const TT__IPAddress& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__OSDTextConfiguration
    {
    public:
        void setType( const QString& _type );
        QString type() const;
        void setDateFormat( const QString& _dateFormat );
        QString dateFormat() const;
        void setTimeFormat( const QString& _timeFormat );
        QString timeFormat() const;
        void setFontSize( int _fontSize );
        int fontSize() const;
        void setFontColor( const dm::TT__OSDColor& _fontColor );
        dm::TT__OSDColor fontColor() const;
        void setBackgroundColor( const dm::TT__OSDColor& _backgroundColor );
        dm::TT__OSDColor backgroundColor() const;
        void setPlainText( const QString& _plainText );
        QString plainText() const;
        void setExtension( const dm::TT__OSDTextConfigurationExtension& _extension );
        dm::TT__OSDTextConfigurationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__OSDTextConfiguration();
        ~TT__OSDTextConfiguration();

    public:
        TT__OSDTextConfiguration( const TT__OSDTextConfiguration& );
        TT__OSDTextConfiguration &operator=( const TT__OSDTextConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__RestoreSystemResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__RestoreSystemResponse();
        ~TDS__RestoreSystemResponse();

};
} // namespace end

namespace dm {
    class TDS__GetIPAddressFilter
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetIPAddressFilter();
        ~TDS__GetIPAddressFilter();

};
} // namespace end

namespace dm {
    class TDS__GetSystemUris
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetSystemUris();
        ~TDS__GetSystemUris();

};
} // namespace end

namespace dm {
    class TDS__SetDiscoveryModeResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetDiscoveryModeResponse();
        ~TDS__SetDiscoveryModeResponse();

};
} // namespace end

namespace dm {
    class TDS__SetNetworkInterfaces
    {
    public:
        void setInterfaceToken( const dm::TT__ReferenceToken& _interfaceToken );
        dm::TT__ReferenceToken interfaceToken() const;
        void setNetworkInterface( const dm::TT__NetworkInterfaceSetConfiguration& _networkInterface );
        dm::TT__NetworkInterfaceSetConfiguration networkInterface() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetNetworkInterfaces();
        ~TDS__SetNetworkInterfaces();

    public:
        TDS__SetNetworkInterfaces( const TDS__SetNetworkInterfaces& );
        TDS__SetNetworkInterfaces &operator=( const TDS__SetNetworkInterfaces& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Dot11SecurityConfigurationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Dot11SecurityConfigurationExtension();
        ~TT__Dot11SecurityConfigurationExtension();

    public:
        TT__Dot11SecurityConfigurationExtension( const TT__Dot11SecurityConfigurationExtension& );
        TT__Dot11SecurityConfigurationExtension &operator=( const TT__Dot11SecurityConfigurationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDNSResponse
    {
    public:
        void setDNSInformation( const dm::TT__DNSInformation& _dNSInformation );
        dm::TT__DNSInformation dNSInformation() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDNSResponse();
        ~TDS__GetDNSResponse();

    public:
        TDS__GetDNSResponse( const TDS__GetDNSResponse& );
        TDS__GetDNSResponse &operator=( const TDS__GetDNSResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetNetworkProtocols
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetNetworkProtocols();
        ~TDS__GetNetworkProtocols();

};
} // namespace end

namespace dm {
    class TDS__SetDot1XConfiguration
    {
    public:
        void setDot1XConfiguration( const dm::TT__Dot1XConfiguration& _dot1XConfiguration );
        dm::TT__Dot1XConfiguration dot1XConfiguration() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetDot1XConfiguration();
        ~TDS__SetDot1XConfiguration();

    public:
        TDS__SetDot1XConfiguration( const TDS__SetDot1XConfiguration& );
        TDS__SetDot1XConfiguration &operator=( const TDS__SetDot1XConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    /**
        Type describing whether BLC mode is enabled or disabled (on/off).
     */
    class TT__BacklightCompensation20
    {
    public:
        void setMode( const dm::TT__BacklightCompensationMode& _mode );
        dm::TT__BacklightCompensationMode mode() const;
        void setLevel( float _level );
        float level() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__BacklightCompensation20();
        ~TT__BacklightCompensation20();

    public:
        TT__BacklightCompensation20( const TT__BacklightCompensation20& );
        TT__BacklightCompensation20 &operator=( const TT__BacklightCompensation20& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__TLSConfiguration
    {
    public:
        void setCertificateID( const QString& _certificateID );
        QString certificateID() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__TLSConfiguration();
        ~TT__TLSConfiguration();

    public:
        TT__TLSConfiguration( const TT__TLSConfiguration& );
        TT__TLSConfiguration &operator=( const TT__TLSConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetDPAddressesResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetDPAddressesResponse();
        ~TDS__SetDPAddressesResponse();

};
} // namespace end

namespace dm {
    /**
        General date time inforamtion returned by the GetSystemDateTime method.
     */
    class TT__SystemDateTime
    {
    public:
        void setDateTimeType( const dm::TT__SetDateTimeType& _dateTimeType );
        dm::TT__SetDateTimeType dateTimeType() const;
        void setDaylightSavings( bool _daylightSavings );
        bool daylightSavings() const;
        void setTimeZone( const dm::TT__TimeZone& _timeZone );
        dm::TT__TimeZone timeZone() const;
        void setUTCDateTime( const dm::TT__DateTime& _uTCDateTime );
        dm::TT__DateTime uTCDateTime() const;
        void setLocalDateTime( const dm::TT__DateTime& _localDateTime );
        dm::TT__DateTime localDateTime() const;
        void setExtension( const dm::TT__SystemDateTimeExtension& _extension );
        dm::TT__SystemDateTimeExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SystemDateTime();
        ~TT__SystemDateTime();

    public:
        TT__SystemDateTime( const TT__SystemDateTime& );
        TT__SystemDateTime &operator=( const TT__SystemDateTime& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__DeviceIOCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setVideoSources( int _videoSources );
        int videoSources() const;
        void setVideoOutputs( int _videoOutputs );
        int videoOutputs() const;
        void setAudioSources( int _audioSources );
        int audioSources() const;
        void setAudioOutputs( int _audioOutputs );
        int audioOutputs() const;
        void setRelayOutputs( int _relayOutputs );
        int relayOutputs() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__DeviceIOCapabilities();
        ~TT__DeviceIOCapabilities();

    public:
        TT__DeviceIOCapabilities( const TT__DeviceIOCapabilities& );
        TT__DeviceIOCapabilities &operator=( const TT__DeviceIOCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__WideDynamicRange
    {
    public:
        void setMode( const dm::TT__WideDynamicMode& _mode );
        dm::TT__WideDynamicMode mode() const;
        void setLevel( float _level );
        float level() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__WideDynamicRange();
        ~TT__WideDynamicRange();

    public:
        TT__WideDynamicRange( const TT__WideDynamicRange& );
        TT__WideDynamicRange &operator=( const TT__WideDynamicRange& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetScopesResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetScopesResponse();
        ~TDS__SetScopesResponse();

};
} // namespace end

namespace dm {
    class TT__IPv4NetworkInterfaceSetConfiguration
    {
    public:
        void setEnabled( bool _enabled );
        bool enabled() const;
        void setManual( const QList< dm::TT__PrefixedIPv4Address >& _manual );
        QList< dm::TT__PrefixedIPv4Address > manual() const;
        void setDHCP( bool _dHCP );
        bool dHCP() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IPv4NetworkInterfaceSetConfiguration();
        ~TT__IPv4NetworkInterfaceSetConfiguration();

    public:
        TT__IPv4NetworkInterfaceSetConfiguration( const TT__IPv4NetworkInterfaceSetConfiguration& );
        TT__IPv4NetworkInterfaceSetConfiguration &operator=( const TT__IPv4NetworkInterfaceSetConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Scope
    {
    public:
        void setScopeDef( const dm::TT__ScopeDefinition& _scopeDef );
        dm::TT__ScopeDefinition scopeDef() const;
        void setScopeItem( const QString& _scopeItem );
        QString scopeItem() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Scope();
        ~TT__Scope();

    public:
        TT__Scope( const TT__Scope& );
        TT__Scope &operator=( const TT__Scope& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetStorageConfigurationResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetStorageConfigurationResponse();
        ~TDS__SetStorageConfigurationResponse();

};
} // namespace end

namespace dm {
    class TT__ToneCompensation
    {
    public:
        void setMode( const QString& _mode );
        QString mode() const;
        void setLevel( float _level );
        float level() const;
        void setExtension( const dm::TT__ToneCompensationExtension& _extension );
        dm::TT__ToneCompensationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ToneCompensation();
        ~TT__ToneCompensation();

    public:
        TT__ToneCompensation( const TT__ToneCompensation& );
        TT__ToneCompensation &operator=( const TT__ToneCompensation& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Defogging
    {
    public:
        void setMode( const QString& _mode );
        QString mode() const;
        void setLevel( float _level );
        float level() const;
        void setExtension( const dm::TT__DefoggingExtension& _extension );
        dm::TT__DefoggingExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Defogging();
        ~TT__Defogging();

    public:
        TT__Defogging( const TT__Defogging& );
        TT__Defogging &operator=( const TT__Defogging& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetUsers
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetUsers();
        ~TDS__GetUsers();

};
} // namespace end

namespace dm {
    class TDS__SetDot1XConfigurationResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetDot1XConfigurationResponse();
        ~TDS__SetDot1XConfigurationResponse();

};
} // namespace end

namespace dm {
    class TT__DeviceCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setNetwork( const dm::TT__NetworkCapabilities& _network );
        dm::TT__NetworkCapabilities network() const;
        void setSystem( const dm::TT__SystemCapabilities& _system );
        dm::TT__SystemCapabilities system() const;
        void setIO( const dm::TT__IOCapabilities& _iO );
        dm::TT__IOCapabilities iO() const;
        void setSecurity( const dm::TT__SecurityCapabilities& _security );
        dm::TT__SecurityCapabilities security() const;
        void setExtension( const dm::TT__DeviceCapabilitiesExtension& _extension );
        dm::TT__DeviceCapabilitiesExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__DeviceCapabilities();
        ~TT__DeviceCapabilities();

    public:
        TT__DeviceCapabilities( const TT__DeviceCapabilities& );
        TT__DeviceCapabilities &operator=( const TT__DeviceCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__PTZSpacesExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__PTZSpacesExtension();
        ~TT__PTZSpacesExtension();

    public:
        TT__PTZSpacesExtension( const TT__PTZSpacesExtension& );
        TT__PTZSpacesExtension &operator=( const TT__PTZSpacesExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class XOP__Include
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setHref( const QString& _href );
        QString href() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        XOP__Include();
        ~XOP__Include();

    public:
        XOP__Include( const XOP__Include& );
        XOP__Include &operator=( const XOP__Include& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetNetworkProtocols
    {
    public:
        void setNetworkProtocols( const QList< dm::TT__NetworkProtocol >& _networkProtocols );
        QList< dm::TT__NetworkProtocol > networkProtocols() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetNetworkProtocols();
        ~TDS__SetNetworkProtocols();

    public:
        TDS__SetNetworkProtocols( const TDS__SetNetworkProtocols& );
        TDS__SetNetworkProtocols &operator=( const TDS__SetNetworkProtocols& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__StartFirmwareUpgradeResponse
    {
    public:
        void setUploadUri( const QString& _uploadUri );
        QString uploadUri() const;
        void setUploadDelay( const QString& _uploadDelay );
        QString uploadDelay() const;
        void setExpectedDownTime( const QString& _expectedDownTime );
        QString expectedDownTime() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__StartFirmwareUpgradeResponse();
        ~TDS__StartFirmwareUpgradeResponse();

    public:
        TDS__StartFirmwareUpgradeResponse( const TDS__StartFirmwareUpgradeResponse& );
        TDS__StartFirmwareUpgradeResponse &operator=( const TDS__StartFirmwareUpgradeResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__StorageConfigurationData
    {
    public:
        void setLocalPath( const QString& _localPath );
        QString localPath() const;
        void setStorageUri( const QString& _storageUri );
        QString storageUri() const;
        void setUser( const dm::TDS__UserCredential& _user );
        dm::TDS__UserCredential user() const;
        void setExtension( const dm::TDS__Extension& _extension );
        dm::TDS__Extension extension() const;
        void setType( const QString& _type );
        QString type() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__StorageConfigurationData();
        ~TDS__StorageConfigurationData();

    public:
        TDS__StorageConfigurationData( const TDS__StorageConfigurationData& );
        TDS__StorageConfigurationData &operator=( const TDS__StorageConfigurationData& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetHostnameFromDHCPResponse
    {
    public:
        void setRebootNeeded( bool _rebootNeeded );
        bool rebootNeeded() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetHostnameFromDHCPResponse();
        ~TDS__SetHostnameFromDHCPResponse();

    public:
        TDS__SetHostnameFromDHCPResponse( const TDS__SetHostnameFromDHCPResponse& );
        TDS__SetHostnameFromDHCPResponse &operator=( const TDS__SetHostnameFromDHCPResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkZeroConfiguration
    {
    public:
        void setInterfaceToken( const dm::TT__ReferenceToken& _interfaceToken );
        dm::TT__ReferenceToken interfaceToken() const;
        void setEnabled( bool _enabled );
        bool enabled() const;
        void setAddresses( const QList< dm::TT__IPv4Address >& _addresses );
        QList< dm::TT__IPv4Address > addresses() const;
        void setExtension( const dm::TT__NetworkZeroConfigurationExtension& _extension );
        dm::TT__NetworkZeroConfigurationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkZeroConfiguration();
        ~TT__NetworkZeroConfiguration();

    public:
        TT__NetworkZeroConfiguration( const TT__NetworkZeroConfiguration& );
        TT__NetworkZeroConfiguration &operator=( const TT__NetworkZeroConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetRemoteUser
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetRemoteUser();
        ~TDS__GetRemoteUser();

};
} // namespace end

namespace dm {
    class TT__ImagingSettingsExtension202
    {
    public:
        void setIrCutFilterAutoAdjustment( const QList< dm::TT__IrCutFilterAutoAdjustment >& _irCutFilterAutoAdjustment );
        QList< dm::TT__IrCutFilterAutoAdjustment > irCutFilterAutoAdjustment() const;
        void setExtension( const dm::TT__ImagingSettingsExtension203& _extension );
        dm::TT__ImagingSettingsExtension203 extension() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ImagingSettingsExtension202();
        ~TT__ImagingSettingsExtension202();

    public:
        TT__ImagingSettingsExtension202( const TT__ImagingSettingsExtension202& );
        TT__ImagingSettingsExtension202 &operator=( const TT__ImagingSettingsExtension202& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetDPAddresses
    {
    public:
        void setDPAddress( const QList< dm::TT__NetworkHost >& _dPAddress );
        QList< dm::TT__NetworkHost > dPAddress() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetDPAddresses();
        ~TDS__SetDPAddresses();

    public:
        TDS__SetDPAddresses( const TDS__SetDPAddresses& );
        TDS__SetDPAddresses &operator=( const TDS__SetDPAddresses& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetPkcs10RequestResponse
    {
    public:
        void setPkcs10Request( const dm::TT__BinaryData& _pkcs10Request );
        dm::TT__BinaryData pkcs10Request() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetPkcs10RequestResponse();
        ~TDS__GetPkcs10RequestResponse();

    public:
        TDS__GetPkcs10RequestResponse( const TDS__GetPkcs10RequestResponse& );
        TDS__GetPkcs10RequestResponse &operator=( const TDS__GetPkcs10RequestResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Dot11AvailableNetworks
    {
    public:
        void setSSID( const dm::TT__Dot11SSIDType& _sSID );
        dm::TT__Dot11SSIDType sSID() const;
        void setBSSID( const QString& _bSSID );
        QString bSSID() const;
        void setAuthAndMangementSuite( const QList< dm::TT__Dot11AuthAndMangementSuite >& _authAndMangementSuite );
        QList< dm::TT__Dot11AuthAndMangementSuite > authAndMangementSuite() const;
        void setPairCipher( const QList< dm::TT__Dot11Cipher >& _pairCipher );
        QList< dm::TT__Dot11Cipher > pairCipher() const;
        void setGroupCipher( const QList< dm::TT__Dot11Cipher >& _groupCipher );
        QList< dm::TT__Dot11Cipher > groupCipher() const;
        void setSignalStrength( const dm::TT__Dot11SignalStrength& _signalStrength );
        dm::TT__Dot11SignalStrength signalStrength() const;
        void setExtension( const dm::TT__Dot11AvailableNetworksExtension& _extension );
        dm::TT__Dot11AvailableNetworksExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Dot11AvailableNetworks();
        ~TT__Dot11AvailableNetworks();

    public:
        TT__Dot11AvailableNetworks( const TT__Dot11AvailableNetworks& );
        TT__Dot11AvailableNetworks &operator=( const TT__Dot11AvailableNetworks& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__CertificateInformationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__CertificateInformationExtension();
        ~TT__CertificateInformationExtension();

    public:
        TT__CertificateInformationExtension( const TT__CertificateInformationExtension& );
        TT__CertificateInformationExtension &operator=( const TT__CertificateInformationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetZeroConfigurationResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetZeroConfigurationResponse();
        ~TDS__SetZeroConfigurationResponse();

};
} // namespace end

namespace dm {
    class TDS__SetStorageConfiguration
    {
    public:
        void setStorageConfiguration( const dm::TDS__StorageConfiguration& _storageConfiguration );
        dm::TDS__StorageConfiguration storageConfiguration() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetStorageConfiguration();
        ~TDS__SetStorageConfiguration();

    public:
        TDS__SetStorageConfiguration( const TDS__SetStorageConfiguration& );
        TDS__SetStorageConfiguration &operator=( const TDS__SetStorageConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkCapabilities
    {
    public:
        void setIPFilter( bool _iPFilter );
        bool iPFilter() const;
        void setZeroConfiguration( bool _zeroConfiguration );
        bool zeroConfiguration() const;
        void setIPVersion6( bool _iPVersion6 );
        bool iPVersion6() const;
        void setDynDNS( bool _dynDNS );
        bool dynDNS() const;
        void setExtension( const dm::TT__NetworkCapabilitiesExtension& _extension );
        dm::TT__NetworkCapabilitiesExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkCapabilities();
        ~TT__NetworkCapabilities();

    public:
        TT__NetworkCapabilities( const TT__NetworkCapabilities& );
        TT__NetworkCapabilities &operator=( const TT__NetworkCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__PTZPresetTourSupported
    {
    public:
        void setMaximumNumberOfPresetTours( int _maximumNumberOfPresetTours );
        int maximumNumberOfPresetTours() const;
        void setPTZPresetTourOperation( const QList< dm::TT__PTZPresetTourOperation >& _pTZPresetTourOperation );
        QList< dm::TT__PTZPresetTourOperation > pTZPresetTourOperation() const;
        void setExtension( const dm::TT__PTZPresetTourSupportedExtension& _extension );
        dm::TT__PTZPresetTourSupportedExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__PTZPresetTourSupported();
        ~TT__PTZPresetTourSupported();

    public:
        TT__PTZPresetTourSupported( const TT__PTZPresetTourSupported& );
        TT__PTZPresetTourSupported &operator=( const TT__PTZPresetTourSupported& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SystemRebootResponse
    {
    public:
        void setMessage( const QString& _message );
        QString message() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SystemRebootResponse();
        ~TDS__SystemRebootResponse();

    public:
        TDS__SystemRebootResponse( const TDS__SystemRebootResponse& );
        TDS__SystemRebootResponse &operator=( const TDS__SystemRebootResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__DeleteCertificates
    {
    public:
        void setCertificateID( const QStringList& _certificateID );
        QStringList certificateID() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__DeleteCertificates();
        ~TDS__DeleteCertificates();

    public:
        TDS__DeleteCertificates( const TDS__DeleteCertificates& );
        TDS__DeleteCertificates &operator=( const TDS__DeleteCertificates& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkInterfaceConnectionSetting
    {
    public:
        void setAutoNegotiation( bool _autoNegotiation );
        bool autoNegotiation() const;
        void setSpeed( int _speed );
        int speed() const;
        void setDuplex( const dm::TT__Duplex& _duplex );
        dm::TT__Duplex duplex() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkInterfaceConnectionSetting();
        ~TT__NetworkInterfaceConnectionSetting();

    public:
        TT__NetworkInterfaceConnectionSetting( const TT__NetworkInterfaceConnectionSetting& );
        TT__NetworkInterfaceConnectionSetting &operator=( const TT__NetworkInterfaceConnectionSetting& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__IPv4Configuration
    {
    public:
        void setManual( const QList< dm::TT__PrefixedIPv4Address >& _manual );
        QList< dm::TT__PrefixedIPv4Address > manual() const;
        void setLinkLocal( const dm::TT__PrefixedIPv4Address& _linkLocal );
        dm::TT__PrefixedIPv4Address linkLocal() const;
        void setFromDHCP( const dm::TT__PrefixedIPv4Address& _fromDHCP );
        dm::TT__PrefixedIPv4Address fromDHCP() const;
        void setDHCP( bool _dHCP );
        bool dHCP() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IPv4Configuration();
        ~TT__IPv4Configuration();

    public:
        TT__IPv4Configuration( const TT__IPv4Configuration& );
        TT__IPv4Configuration &operator=( const TT__IPv4Configuration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SendAuxiliaryCommandResponse
    {
    public:
        void setAuxiliaryCommandResponse( const dm::TT__AuxiliaryData& _auxiliaryCommandResponse );
        dm::TT__AuxiliaryData auxiliaryCommandResponse() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SendAuxiliaryCommandResponse();
        ~TDS__SendAuxiliaryCommandResponse();

    public:
        TDS__SendAuxiliaryCommandResponse( const TDS__SendAuxiliaryCommandResponse& );
        TDS__SendAuxiliaryCommandResponse &operator=( const TDS__SendAuxiliaryCommandResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkCapabilitiesExtension2
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkCapabilitiesExtension2();
        ~TT__NetworkCapabilitiesExtension2();

    public:
        TT__NetworkCapabilitiesExtension2( const TT__NetworkCapabilitiesExtension2& );
        TT__NetworkCapabilitiesExtension2 &operator=( const TT__NetworkCapabilitiesExtension2& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__CreateCertificate
    {
    public:
        void setCertificateID( const QString& _certificateID );
        QString certificateID() const;
        void setSubject( const QString& _subject );
        QString subject() const;
        void setValidNotBefore( const KDDateTime& _validNotBefore );
        KDDateTime validNotBefore() const;
        void setValidNotAfter( const KDDateTime& _validNotAfter );
        KDDateTime validNotAfter() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__CreateCertificate();
        ~TDS__CreateCertificate();

    public:
        TDS__CreateCertificate( const TDS__CreateCertificate& );
        TDS__CreateCertificate &operator=( const TDS__CreateCertificate& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkInterfaceSetConfigurationExtension2
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkInterfaceSetConfigurationExtension2();
        ~TT__NetworkInterfaceSetConfigurationExtension2();

    public:
        TT__NetworkInterfaceSetConfigurationExtension2( const TT__NetworkInterfaceSetConfigurationExtension2& );
        TT__NetworkInterfaceSetConfigurationExtension2 &operator=( const TT__NetworkInterfaceSetConfigurationExtension2& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__AnalyticsDeviceCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setRuleSupport( bool _ruleSupport );
        bool ruleSupport() const;
        void setExtension( const dm::TT__AnalyticsDeviceExtension& _extension );
        dm::TT__AnalyticsDeviceExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__AnalyticsDeviceCapabilities();
        ~TT__AnalyticsDeviceCapabilities();

    public:
        TT__AnalyticsDeviceCapabilities( const TT__AnalyticsDeviceCapabilities& );
        TT__AnalyticsDeviceCapabilities &operator=( const TT__AnalyticsDeviceCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__ScanAvailableDot11Networks
    {
    public:
        void setInterfaceToken( const dm::TT__ReferenceToken& _interfaceToken );
        dm::TT__ReferenceToken interfaceToken() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__ScanAvailableDot11Networks();
        ~TDS__ScanAvailableDot11Networks();

    public:
        TDS__ScanAvailableDot11Networks( const TDS__ScanAvailableDot11Networks& );
        TDS__ScanAvailableDot11Networks &operator=( const TDS__ScanAvailableDot11Networks& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__RemoveIPAddressFilterResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__RemoveIPAddressFilterResponse();
        ~TDS__RemoveIPAddressFilterResponse();

};
} // namespace end

namespace dm {
    class TT__AnalyticsCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setRuleSupport( bool _ruleSupport );
        bool ruleSupport() const;
        void setAnalyticsModuleSupport( bool _analyticsModuleSupport );
        bool analyticsModuleSupport() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__AnalyticsCapabilities();
        ~TT__AnalyticsCapabilities();

    public:
        TT__AnalyticsCapabilities( const TT__AnalyticsCapabilities& );
        TT__AnalyticsCapabilities &operator=( const TT__AnalyticsCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Dot11Status
    {
    public:
        void setSSID( const dm::TT__Dot11SSIDType& _sSID );
        dm::TT__Dot11SSIDType sSID() const;
        void setBSSID( const QString& _bSSID );
        QString bSSID() const;
        void setPairCipher( const dm::TT__Dot11Cipher& _pairCipher );
        dm::TT__Dot11Cipher pairCipher() const;
        void setGroupCipher( const dm::TT__Dot11Cipher& _groupCipher );
        dm::TT__Dot11Cipher groupCipher() const;
        void setSignalStrength( const dm::TT__Dot11SignalStrength& _signalStrength );
        dm::TT__Dot11SignalStrength signalStrength() const;
        void setActiveConfigAlias( const dm::TT__ReferenceToken& _activeConfigAlias );
        dm::TT__ReferenceToken activeConfigAlias() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Dot11Status();
        ~TT__Dot11Status();

    public:
        TT__Dot11Status( const TT__Dot11Status& );
        TT__Dot11Status &operator=( const TT__Dot11Status& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__OSDImgConfiguration
    {
    public:
        void setImgPath( const QString& _imgPath );
        QString imgPath() const;
        void setExtension( const dm::TT__OSDImgConfigurationExtension& _extension );
        dm::TT__OSDImgConfigurationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__OSDImgConfiguration();
        ~TT__OSDImgConfiguration();

    public:
        TT__OSDImgConfiguration( const TT__OSDImgConfiguration& );
        TT__OSDImgConfiguration &operator=( const TT__OSDImgConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetCertificateInformation
    {
    public:
        void setCertificateID( const QString& _certificateID );
        QString certificateID() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetCertificateInformation();
        ~TDS__GetCertificateInformation();

    public:
        TDS__GetCertificateInformation( const TDS__GetCertificateInformation& );
        TDS__GetCertificateInformation &operator=( const TDS__GetCertificateInformation& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetNetworkDefaultGateway
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetNetworkDefaultGateway();
        ~TDS__GetNetworkDefaultGateway();

};
} // namespace end

namespace dm {
    class TDS__SetNetworkProtocolsResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetNetworkProtocolsResponse();
        ~TDS__SetNetworkProtocolsResponse();

};
} // namespace end

namespace dm {
    class TT__OnvifVersion
    {
    public:
        void setMajor( int _major );
        int major() const;
        void setMinor( int _minor );
        int minor() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__OnvifVersion();
        ~TT__OnvifVersion();

    public:
        TT__OnvifVersion( const TT__OnvifVersion& );
        TT__OnvifVersion &operator=( const TT__OnvifVersion& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__FocusConfiguration20
    {
    public:
        void setAutoFocusMode( const dm::TT__AutoFocusMode& _autoFocusMode );
        dm::TT__AutoFocusMode autoFocusMode() const;
        void setDefaultSpeed( float _defaultSpeed );
        float defaultSpeed() const;
        void setNearLimit( float _nearLimit );
        float nearLimit() const;
        void setFarLimit( float _farLimit );
        float farLimit() const;
        void setExtension( const dm::TT__FocusConfiguration20Extension& _extension );
        dm::TT__FocusConfiguration20Extension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__FocusConfiguration20();
        ~TT__FocusConfiguration20();

    public:
        TT__FocusConfiguration20( const TT__FocusConfiguration20& );
        TT__FocusConfiguration20 &operator=( const TT__FocusConfiguration20& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    /**
        A layout describes a set of Video windows that are displayed
        simultaniously on a display.
     */
    class TT__Layout
    {
    public:
        void setPaneLayout( const QList< dm::TT__PaneLayout >& _paneLayout );
        QList< dm::TT__PaneLayout > paneLayout() const;
        void setExtension( const dm::TT__LayoutExtension& _extension );
        dm::TT__LayoutExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Layout();
        ~TT__Layout();

    public:
        TT__Layout( const TT__Layout& );
        TT__Layout &operator=( const TT__Layout& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetWsdlUrl
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetWsdlUrl();
        ~TDS__GetWsdlUrl();

};
} // namespace end

namespace dm {
    class TT__CertificateUsage
    {
    public:
        void setValue( const QString& _value );
        QString value() const;
        TT__CertificateUsage( const QString& value );
        operator QString() const;
        void setCritical( bool _critical );
        bool critical() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__CertificateUsage();
        ~TT__CertificateUsage();

    public:
        TT__CertificateUsage( const TT__CertificateUsage& );
        TT__CertificateUsage &operator=( const TT__CertificateUsage& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    /**
        Range of values greater equal Min value and less equal Max value.
     */
    class TT__FloatRange
    {
    public:
        void setMin( float _min );
        float min() const;
        void setMax( float _max );
        float max() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__FloatRange();
        ~TT__FloatRange();

    public:
        TT__FloatRange( const TT__FloatRange& );
        TT__FloatRange &operator=( const TT__FloatRange& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkZeroConfigurationExtension2
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkZeroConfigurationExtension2();
        ~TT__NetworkZeroConfigurationExtension2();

    public:
        TT__NetworkZeroConfigurationExtension2( const TT__NetworkZeroConfigurationExtension2& );
        TT__NetworkZeroConfigurationExtension2 &operator=( const TT__NetworkZeroConfigurationExtension2& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__OSDImgConfigurationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__OSDImgConfigurationExtension();
        ~TT__OSDImgConfigurationExtension();

    public:
        TT__OSDImgConfigurationExtension( const TT__OSDImgConfigurationExtension& );
        TT__OSDImgConfigurationExtension &operator=( const TT__OSDImgConfigurationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetDynamicDNS
    {
    public:
        void setType( const dm::TT__DynamicDNSType& _type );
        dm::TT__DynamicDNSType type() const;
        void setName( const dm::TT__DNSName& _name );
        dm::TT__DNSName name() const;
        void setTTL( const QString& _tTL );
        QString tTL() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetDynamicDNS();
        ~TDS__SetDynamicDNS();

    public:
        TDS__SetDynamicDNS( const TDS__SetDynamicDNS& );
        TDS__SetDynamicDNS &operator=( const TDS__SetDynamicDNS& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Exposure
    {
    public:
        void setMode( const dm::TT__ExposureMode& _mode );
        dm::TT__ExposureMode mode() const;
        void setPriority( const dm::TT__ExposurePriority& _priority );
        dm::TT__ExposurePriority priority() const;
        void setWindow( const dm::TT__Rectangle& _window );
        dm::TT__Rectangle window() const;
        void setMinExposureTime( float _minExposureTime );
        float minExposureTime() const;
        void setMaxExposureTime( float _maxExposureTime );
        float maxExposureTime() const;
        void setMinGain( float _minGain );
        float minGain() const;
        void setMaxGain( float _maxGain );
        float maxGain() const;
        void setMinIris( float _minIris );
        float minIris() const;
        void setMaxIris( float _maxIris );
        float maxIris() const;
        void setExposureTime( float _exposureTime );
        float exposureTime() const;
        void setGain( float _gain );
        float gain() const;
        void setIris( float _iris );
        float iris() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Exposure();
        ~TT__Exposure();

    public:
        TT__Exposure( const TT__Exposure& );
        TT__Exposure &operator=( const TT__Exposure& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetAccessPolicy
    {
    public:
        void setPolicyFile( const dm::TT__BinaryData& _policyFile );
        dm::TT__BinaryData policyFile() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetAccessPolicy();
        ~TDS__SetAccessPolicy();

    public:
        TDS__SetAccessPolicy( const TDS__SetAccessPolicy& );
        TDS__SetAccessPolicy &operator=( const TDS__SetAccessPolicy& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetUserResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetUserResponse();
        ~TDS__SetUserResponse();

};
} // namespace end

namespace dm {
    class TT__EventCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setWSSubscriptionPolicySupport( bool _wSSubscriptionPolicySupport );
        bool wSSubscriptionPolicySupport() const;
        void setWSPullPointSupport( bool _wSPullPointSupport );
        bool wSPullPointSupport() const;
        void setWSPausableSubscriptionManagerInterfaceSupport( bool _wSPausableSubscriptionManagerInterfaceSupport );
        bool wSPausableSubscriptionManagerInterfaceSupport() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__EventCapabilities();
        ~TT__EventCapabilities();

    public:
        TT__EventCapabilities( const TT__EventCapabilities& );
        TT__EventCapabilities &operator=( const TT__EventCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetZeroConfigurationResponse
    {
    public:
        void setZeroConfiguration( const dm::TT__NetworkZeroConfiguration& _zeroConfiguration );
        dm::TT__NetworkZeroConfiguration zeroConfiguration() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetZeroConfigurationResponse();
        ~TDS__GetZeroConfigurationResponse();

    public:
        TDS__GetZeroConfigurationResponse( const TDS__GetZeroConfigurationResponse& );
        TDS__GetZeroConfigurationResponse &operator=( const TDS__GetZeroConfigurationResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__CreateUsers
    {
    public:
        void setUser( const QList< dm::TT__User >& _user );
        QList< dm::TT__User > user() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__CreateUsers();
        ~TDS__CreateUsers();

    public:
        TDS__CreateUsers( const TDS__CreateUsers& );
        TDS__CreateUsers &operator=( const TDS__CreateUsers& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetUser
    {
    public:
        void setUser( const QList< dm::TT__User >& _user );
        QList< dm::TT__User > user() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetUser();
        ~TDS__SetUser();

    public:
        TDS__SetUser( const TDS__SetUser& );
        TDS__SetUser &operator=( const TDS__SetUser& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetSystemDateAndTimeResponse
    {
    public:
        void setSystemDateAndTime( const dm::TT__SystemDateTime& _systemDateAndTime );
        dm::TT__SystemDateTime systemDateAndTime() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetSystemDateAndTimeResponse();
        ~TDS__GetSystemDateAndTimeResponse();

    public:
        TDS__GetSystemDateAndTimeResponse( const TDS__GetSystemDateAndTimeResponse& );
        TDS__GetSystemDateAndTimeResponse &operator=( const TDS__GetSystemDateAndTimeResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__PTZNodeExtension2
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__PTZNodeExtension2();
        ~TT__PTZNodeExtension2();

    public:
        TT__PTZNodeExtension2( const TT__PTZNodeExtension2& );
        TT__PTZNodeExtension2 &operator=( const TT__PTZNodeExtension2& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__CreateDot1XConfiguration
    {
    public:
        void setDot1XConfiguration( const dm::TT__Dot1XConfiguration& _dot1XConfiguration );
        dm::TT__Dot1XConfiguration dot1XConfiguration() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__CreateDot1XConfiguration();
        ~TDS__CreateDot1XConfiguration();

    public:
        TDS__CreateDot1XConfiguration( const TDS__CreateDot1XConfiguration& );
        TDS__CreateDot1XConfiguration &operator=( const TDS__CreateDot1XConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDot1XConfigurationsResponse
    {
    public:
        void setDot1XConfiguration( const QList< dm::TT__Dot1XConfiguration >& _dot1XConfiguration );
        QList< dm::TT__Dot1XConfiguration > dot1XConfiguration() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDot1XConfigurationsResponse();
        ~TDS__GetDot1XConfigurationsResponse();

    public:
        TDS__GetDot1XConfigurationsResponse( const TDS__GetDot1XConfigurationsResponse& );
        TDS__GetDot1XConfigurationsResponse &operator=( const TDS__GetDot1XConfigurationsResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetHostname
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetHostname();
        ~TDS__GetHostname();

};
} // namespace end

namespace dm {
    class TDS__GetDPAddresses
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDPAddresses();
        ~TDS__GetDPAddresses();

};
} // namespace end

namespace dm {
    class TDS__GetRelayOutputs
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetRelayOutputs();
        ~TDS__GetRelayOutputs();

};
} // namespace end

namespace dm {
    class TT__IPv6Configuration
    {
    public:
        void setAcceptRouterAdvert( bool _acceptRouterAdvert );
        bool acceptRouterAdvert() const;
        void setDHCP( const dm::TT__IPv6DHCPConfiguration& _dHCP );
        dm::TT__IPv6DHCPConfiguration dHCP() const;
        void setManual( const QList< dm::TT__PrefixedIPv6Address >& _manual );
        QList< dm::TT__PrefixedIPv6Address > manual() const;
        void setLinkLocal( const QList< dm::TT__PrefixedIPv6Address >& _linkLocal );
        QList< dm::TT__PrefixedIPv6Address > linkLocal() const;
        void setFromDHCP( const QList< dm::TT__PrefixedIPv6Address >& _fromDHCP );
        QList< dm::TT__PrefixedIPv6Address > fromDHCP() const;
        void setFromRA( const QList< dm::TT__PrefixedIPv6Address >& _fromRA );
        QList< dm::TT__PrefixedIPv6Address > fromRA() const;
        void setExtension( const dm::TT__IPv6ConfigurationExtension& _extension );
        dm::TT__IPv6ConfigurationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IPv6Configuration();
        ~TT__IPv6Configuration();

    public:
        TT__IPv6Configuration( const TT__IPv6Configuration& );
        TT__IPv6Configuration &operator=( const TT__IPv6Configuration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__VideoOutputExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__VideoOutputExtension();
        ~TT__VideoOutputExtension();

    public:
        TT__VideoOutputExtension( const TT__VideoOutputExtension& );
        TT__VideoOutputExtension &operator=( const TT__VideoOutputExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__DefoggingExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__DefoggingExtension();
        ~TT__DefoggingExtension();

    public:
        TT__DefoggingExtension( const TT__DefoggingExtension& );
        TT__DefoggingExtension &operator=( const TT__DefoggingExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__DeleteStorageConfigurationResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__DeleteStorageConfigurationResponse();
        ~TDS__DeleteStorageConfigurationResponse();

};
} // namespace end

namespace dm {
    class TDS__ScanAvailableDot11NetworksResponse
    {
    public:
        void setNetworks( const QList< dm::TT__Dot11AvailableNetworks >& _networks );
        QList< dm::TT__Dot11AvailableNetworks > networks() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__ScanAvailableDot11NetworksResponse();
        ~TDS__ScanAvailableDot11NetworksResponse();

    public:
        TDS__ScanAvailableDot11NetworksResponse( const TDS__ScanAvailableDot11NetworksResponse& );
        TDS__ScanAvailableDot11NetworksResponse &operator=( const TDS__ScanAvailableDot11NetworksResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Certificate
    {
    public:
        void setCertificateID( const QString& _certificateID );
        QString certificateID() const;
        void setCertificate( const dm::TT__BinaryData& _certificate );
        dm::TT__BinaryData certificate() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Certificate();
        ~TT__Certificate();

    public:
        TT__Certificate( const TT__Certificate& );
        TT__Certificate &operator=( const TT__Certificate& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__WhiteBalance20
    {
    public:
        void setMode( const dm::TT__WhiteBalanceMode& _mode );
        dm::TT__WhiteBalanceMode mode() const;
        void setCrGain( float _crGain );
        float crGain() const;
        void setCbGain( float _cbGain );
        float cbGain() const;
        void setExtension( const dm::TT__WhiteBalance20Extension& _extension );
        dm::TT__WhiteBalance20Extension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__WhiteBalance20();
        ~TT__WhiteBalance20();

    public:
        TT__WhiteBalance20( const TT__WhiteBalance20& );
        TT__WhiteBalance20 &operator=( const TT__WhiteBalance20& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__RealTimeStreamingCapabilities
    {
    public:
        void setRTPMulticast( bool _rTPMulticast );
        bool rTPMulticast() const;
        void setRTP_TCP( bool _rTP_TCP );
        bool rTP_TCP() const;
        void setRTP_RTSP_TCP( bool _rTP_RTSP_TCP );
        bool rTP_RTSP_TCP() const;
        void setExtension( const dm::TT__RealTimeStreamingCapabilitiesExtension& _extension );
        dm::TT__RealTimeStreamingCapabilitiesExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__RealTimeStreamingCapabilities();
        ~TT__RealTimeStreamingCapabilities();

    public:
        TT__RealTimeStreamingCapabilities( const TT__RealTimeStreamingCapabilities& );
        TT__RealTimeStreamingCapabilities &operator=( const TT__RealTimeStreamingCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__LoadCACertificates
    {
    public:
        void setCACertificate( const QList< dm::TT__Certificate >& _cACertificate );
        QList< dm::TT__Certificate > cACertificate() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__LoadCACertificates();
        ~TDS__LoadCACertificates();

    public:
        TDS__LoadCACertificates( const TDS__LoadCACertificates& );
        TDS__LoadCACertificates &operator=( const TDS__LoadCACertificates& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkInterfaceExtension
    {
    public:
        void setInterfaceType( const dm::TT__IANA_IfTypes& _interfaceType );
        dm::TT__IANA_IfTypes interfaceType() const;
        void setDot3( const QList< dm::TT__Dot3Configuration >& _dot3 );
        QList< dm::TT__Dot3Configuration > dot3() const;
        void setDot11( const QList< dm::TT__Dot11Configuration >& _dot11 );
        QList< dm::TT__Dot11Configuration > dot11() const;
        void setExtension( const dm::TT__NetworkInterfaceExtension2& _extension );
        dm::TT__NetworkInterfaceExtension2 extension() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkInterfaceExtension();
        ~TT__NetworkInterfaceExtension();

    public:
        TT__NetworkInterfaceExtension( const TT__NetworkInterfaceExtension& );
        TT__NetworkInterfaceExtension &operator=( const TT__NetworkInterfaceExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Vector
    {
    public:
        void setX( float _x );
        float x() const;
        void setY( float _y );
        float y() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Vector();
        ~TT__Vector();

    public:
        TT__Vector( const TT__Vector& );
        TT__Vector &operator=( const TT__Vector& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__AddScopesResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__AddScopesResponse();
        ~TDS__AddScopesResponse();

};
} // namespace end

namespace dm {
    class TT__SystemDateTimeExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SystemDateTimeExtension();
        ~TT__SystemDateTimeExtension();

    public:
        TT__SystemDateTimeExtension( const TT__SystemDateTimeExtension& );
        TT__SystemDateTimeExtension &operator=( const TT__SystemDateTimeExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetCertificatesStatus
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetCertificatesStatus();
        ~TDS__GetCertificatesStatus();

};
} // namespace end

namespace dm {
    class TT__WhiteBalance
    {
    public:
        void setMode( const dm::TT__WhiteBalanceMode& _mode );
        dm::TT__WhiteBalanceMode mode() const;
        void setCrGain( float _crGain );
        float crGain() const;
        void setCbGain( float _cbGain );
        float cbGain() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__WhiteBalance();
        ~TT__WhiteBalance();

    public:
        TT__WhiteBalance( const TT__WhiteBalance& );
        TT__WhiteBalance &operator=( const TT__WhiteBalance& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetNTPResponse
    {
    public:
        void setNTPInformation( const dm::TT__NTPInformation& _nTPInformation );
        dm::TT__NTPInformation nTPInformation() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetNTPResponse();
        ~TDS__GetNTPResponse();

    public:
        TDS__GetNTPResponse( const TDS__GetNTPResponse& );
        TDS__GetNTPResponse &operator=( const TDS__GetNTPResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__ProfileCapabilities
    {
    public:
        void setMaximumNumberOfProfiles( int _maximumNumberOfProfiles );
        int maximumNumberOfProfiles() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ProfileCapabilities();
        ~TT__ProfileCapabilities();

    public:
        TT__ProfileCapabilities( const TT__ProfileCapabilities& );
        TT__ProfileCapabilities &operator=( const TT__ProfileCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__CertificateInformation
    {
    public:
        void setCertificateID( const QString& _certificateID );
        QString certificateID() const;
        void setIssuerDN( const QString& _issuerDN );
        QString issuerDN() const;
        void setSubjectDN( const QString& _subjectDN );
        QString subjectDN() const;
        void setKeyUsage( const dm::TT__CertificateUsage& _keyUsage );
        dm::TT__CertificateUsage keyUsage() const;
        void setExtendedKeyUsage( const dm::TT__CertificateUsage& _extendedKeyUsage );
        dm::TT__CertificateUsage extendedKeyUsage() const;
        void setKeyLength( int _keyLength );
        int keyLength() const;
        void setVersion( const QString& _version );
        QString version() const;
        void setSerialNum( const QString& _serialNum );
        QString serialNum() const;
        void setSignatureAlgorithm( const QString& _signatureAlgorithm );
        QString signatureAlgorithm() const;
        void setValidity( const dm::TT__DateTimeRange& _validity );
        dm::TT__DateTimeRange validity() const;
        void setExtension( const dm::TT__CertificateInformationExtension& _extension );
        dm::TT__CertificateInformationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__CertificateInformation();
        ~TT__CertificateInformation();

    public:
        TT__CertificateInformation( const TT__CertificateInformation& );
        TT__CertificateInformation &operator=( const TT__CertificateInformation& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkInterfaceSetConfigurationExtension
    {
    public:
        void setDot3( const QList< dm::TT__Dot3Configuration >& _dot3 );
        QList< dm::TT__Dot3Configuration > dot3() const;
        void setDot11( const QList< dm::TT__Dot11Configuration >& _dot11 );
        QList< dm::TT__Dot11Configuration > dot11() const;
        void setExtension( const dm::TT__NetworkInterfaceSetConfigurationExtension2& _extension );
        dm::TT__NetworkInterfaceSetConfigurationExtension2 extension() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkInterfaceSetConfigurationExtension();
        ~TT__NetworkInterfaceSetConfigurationExtension();

    public:
        TT__NetworkInterfaceSetConfigurationExtension( const TT__NetworkInterfaceSetConfigurationExtension& );
        TT__NetworkInterfaceSetConfigurationExtension &operator=( const TT__NetworkInterfaceSetConfigurationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkInterfaceLink
    {
    public:
        void setAdminSettings( const dm::TT__NetworkInterfaceConnectionSetting& _adminSettings );
        dm::TT__NetworkInterfaceConnectionSetting adminSettings() const;
        void setOperSettings( const dm::TT__NetworkInterfaceConnectionSetting& _operSettings );
        dm::TT__NetworkInterfaceConnectionSetting operSettings() const;
        void setInterfaceType( const dm::TT__IANA_IfTypes& _interfaceType );
        dm::TT__IANA_IfTypes interfaceType() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkInterfaceLink();
        ~TT__NetworkInterfaceLink();

    public:
        TT__NetworkInterfaceLink( const TT__NetworkInterfaceLink& );
        TT__NetworkInterfaceLink &operator=( const TT__NetworkInterfaceLink& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__IrCutFilterAutoAdjustmentExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IrCutFilterAutoAdjustmentExtension();
        ~TT__IrCutFilterAutoAdjustmentExtension();

    public:
        TT__IrCutFilterAutoAdjustmentExtension( const TT__IrCutFilterAutoAdjustmentExtension& );
        TT__IrCutFilterAutoAdjustmentExtension &operator=( const TT__IrCutFilterAutoAdjustmentExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SystemCapabilities
    {
    public:
        void setDiscoveryResolve( bool _discoveryResolve );
        bool discoveryResolve() const;
        void setDiscoveryBye( bool _discoveryBye );
        bool discoveryBye() const;
        void setRemoteDiscovery( bool _remoteDiscovery );
        bool remoteDiscovery() const;
        void setSystemBackup( bool _systemBackup );
        bool systemBackup() const;
        void setSystemLogging( bool _systemLogging );
        bool systemLogging() const;
        void setFirmwareUpgrade( bool _firmwareUpgrade );
        bool firmwareUpgrade() const;
        void setHttpFirmwareUpgrade( bool _httpFirmwareUpgrade );
        bool httpFirmwareUpgrade() const;
        void setHttpSystemBackup( bool _httpSystemBackup );
        bool httpSystemBackup() const;
        void setHttpSystemLogging( bool _httpSystemLogging );
        bool httpSystemLogging() const;
        void setHttpSupportInformation( bool _httpSupportInformation );
        bool httpSupportInformation() const;
        void setStorageConfiguration( bool _storageConfiguration );
        bool storageConfiguration() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SystemCapabilities();
        ~TDS__SystemCapabilities();

    public:
        TDS__SystemCapabilities( const TDS__SystemCapabilities& );
        TDS__SystemCapabilities &operator=( const TDS__SystemCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__SystemCapabilitiesExtension2
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SystemCapabilitiesExtension2();
        ~TT__SystemCapabilitiesExtension2();

    public:
        TT__SystemCapabilitiesExtension2( const TT__SystemCapabilitiesExtension2& );
        TT__SystemCapabilitiesExtension2 &operator=( const TT__SystemCapabilitiesExtension2& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__DeleteDot1XConfiguration
    {
    public:
        void setDot1XConfigurationToken( const QList< dm::TT__ReferenceToken >& _dot1XConfigurationToken );
        QList< dm::TT__ReferenceToken > dot1XConfigurationToken() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__DeleteDot1XConfiguration();
        ~TDS__DeleteDot1XConfiguration();

    public:
        TDS__DeleteDot1XConfiguration( const TDS__DeleteDot1XConfiguration& );
        TDS__DeleteDot1XConfiguration &operator=( const TDS__DeleteDot1XConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__SecurityCapabilitiesExtension2
    {
    public:
        void setDot1X( bool _dot1X );
        bool dot1X() const;
        void setSupportedEAPMethod( const QList< int >& _supportedEAPMethod );
        QList< int > supportedEAPMethod() const;
        void setRemoteUserHandling( bool _remoteUserHandling );
        bool remoteUserHandling() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SecurityCapabilitiesExtension2();
        ~TT__SecurityCapabilitiesExtension2();

    public:
        TT__SecurityCapabilitiesExtension2( const TT__SecurityCapabilitiesExtension2& );
        TT__SecurityCapabilitiesExtension2 &operator=( const TT__SecurityCapabilitiesExtension2& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__ImagingSettingsExtension204
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ImagingSettingsExtension204();
        ~TT__ImagingSettingsExtension204();

    public:
        TT__ImagingSettingsExtension204( const TT__ImagingSettingsExtension204& );
        TT__ImagingSettingsExtension204 &operator=( const TT__ImagingSettingsExtension204& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__UpgradeSystemFirmware
    {
    public:
        void setFirmware( const dm::TT__AttachmentData& _firmware );
        dm::TT__AttachmentData firmware() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__UpgradeSystemFirmware();
        ~TDS__UpgradeSystemFirmware();

    public:
        TDS__UpgradeSystemFirmware( const TDS__UpgradeSystemFirmware& );
        TDS__UpgradeSystemFirmware &operator=( const TDS__UpgradeSystemFirmware& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetNetworkInterfaces
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetNetworkInterfaces();
        ~TDS__GetNetworkInterfaces();

};
} // namespace end

namespace dm {
    class TDS__SetClientCertificateModeResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetClientCertificateModeResponse();
        ~TDS__SetClientCertificateModeResponse();

};
} // namespace end

namespace dm {
    class TT__ImagingSettingsExtension203
    {
    public:
        void setToneCompensation( const dm::TT__ToneCompensation& _toneCompensation );
        dm::TT__ToneCompensation toneCompensation() const;
        void setDefogging( const dm::TT__Defogging& _defogging );
        dm::TT__Defogging defogging() const;
        void setNoiseReduction( const dm::TT__NoiseReduction& _noiseReduction );
        dm::TT__NoiseReduction noiseReduction() const;
        void setExtension( const dm::TT__ImagingSettingsExtension204& _extension );
        dm::TT__ImagingSettingsExtension204 extension() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ImagingSettingsExtension203();
        ~TT__ImagingSettingsExtension203();

    public:
        TT__ImagingSettingsExtension203( const TT__ImagingSettingsExtension203& );
        TT__ImagingSettingsExtension203 &operator=( const TT__ImagingSettingsExtension203& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__MediaCapabilitiesExtension
    {
    public:
        void setProfileCapabilities( const dm::TT__ProfileCapabilities& _profileCapabilities );
        dm::TT__ProfileCapabilities profileCapabilities() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__MediaCapabilitiesExtension();
        ~TT__MediaCapabilitiesExtension();

    public:
        TT__MediaCapabilitiesExtension( const TT__MediaCapabilitiesExtension& );
        TT__MediaCapabilitiesExtension &operator=( const TT__MediaCapabilitiesExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__FocusConfiguration20Extension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__FocusConfiguration20Extension();
        ~TT__FocusConfiguration20Extension();

    public:
        TT__FocusConfiguration20Extension( const TT__FocusConfiguration20Extension& );
        TT__FocusConfiguration20Extension &operator=( const TT__FocusConfiguration20Extension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__PTZNodeExtension
    {
    public:
        void setSupportedPresetTour( const dm::TT__PTZPresetTourSupported& _supportedPresetTour );
        dm::TT__PTZPresetTourSupported supportedPresetTour() const;
        void setExtension( const dm::TT__PTZNodeExtension2& _extension );
        dm::TT__PTZNodeExtension2 extension() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__PTZNodeExtension();
        ~TT__PTZNodeExtension();

    public:
        TT__PTZNodeExtension( const TT__PTZNodeExtension& );
        TT__PTZNodeExtension &operator=( const TT__PTZNodeExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetSystemBackup
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetSystemBackup();
        ~TDS__GetSystemBackup();

};
} // namespace end

namespace dm {
    class TDS__LoadCACertificatesResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__LoadCACertificatesResponse();
        ~TDS__LoadCACertificatesResponse();

};
} // namespace end

namespace dm {
    class TDS__SetSystemFactoryDefault
    {
    public:
        void setFactoryDefault( const dm::TT__FactoryDefaultType& _factoryDefault );
        dm::TT__FactoryDefaultType factoryDefault() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetSystemFactoryDefault();
        ~TDS__SetSystemFactoryDefault();

    public:
        TDS__SetSystemFactoryDefault( const TDS__SetSystemFactoryDefault& );
        TDS__SetSystemFactoryDefault &operator=( const TDS__SetSystemFactoryDefault& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetRelayOutputsResponse
    {
    public:
        void setRelayOutputs( const QList< dm::TT__RelayOutput >& _relayOutputs );
        QList< dm::TT__RelayOutput > relayOutputs() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetRelayOutputsResponse();
        ~TDS__GetRelayOutputsResponse();

    public:
        TDS__GetRelayOutputsResponse( const TDS__GetRelayOutputsResponse& );
        TDS__GetRelayOutputsResponse &operator=( const TDS__GetRelayOutputsResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetNetworkDefaultGatewayResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetNetworkDefaultGatewayResponse();
        ~TDS__SetNetworkDefaultGatewayResponse();

};
} // namespace end

namespace dm {
    class TT__NetworkHost
    {
    public:
        void setType( const dm::TT__NetworkHostType& _type );
        dm::TT__NetworkHostType type() const;
        void setIPv4Address( const dm::TT__IPv4Address& _iPv4Address );
        dm::TT__IPv4Address iPv4Address() const;
        void setIPv6Address( const dm::TT__IPv6Address& _iPv6Address );
        dm::TT__IPv6Address iPv6Address() const;
        void setDNSname( const dm::TT__DNSName& _dNSname );
        dm::TT__DNSName dNSname() const;
        void setExtension( const dm::TT__NetworkHostExtension& _extension );
        dm::TT__NetworkHostExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkHost();
        ~TT__NetworkHost();

    public:
        TT__NetworkHost( const TT__NetworkHost& );
        TT__NetworkHost &operator=( const TT__NetworkHost& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetRemoteUserResponse
    {
    public:
        void setRemoteUser( const dm::TT__RemoteUser& _remoteUser );
        dm::TT__RemoteUser remoteUser() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetRemoteUserResponse();
        ~TDS__GetRemoteUserResponse();

    public:
        TDS__GetRemoteUserResponse( const TDS__GetRemoteUserResponse& );
        TDS__GetRemoteUserResponse &operator=( const TDS__GetRemoteUserResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Dot3Configuration
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Dot3Configuration();
        ~TT__Dot3Configuration();

    public:
        TT__Dot3Configuration( const TT__Dot3Configuration& );
        TT__Dot3Configuration &operator=( const TT__Dot3Configuration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetHostnameResponse
    {
    public:
        void setHostnameInformation( const dm::TT__HostnameInformation& _hostnameInformation );
        dm::TT__HostnameInformation hostnameInformation() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetHostnameResponse();
        ~TDS__GetHostnameResponse();

    public:
        TDS__GetHostnameResponse( const TDS__GetHostnameResponse& );
        TDS__GetHostnameResponse &operator=( const TDS__GetHostnameResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__IrCutFilterAutoAdjustment
    {
    public:
        void setBoundaryType( const QString& _boundaryType );
        QString boundaryType() const;
        void setBoundaryOffset( float _boundaryOffset );
        float boundaryOffset() const;
        void setResponseTime( const QString& _responseTime );
        QString responseTime() const;
        void setExtension( const dm::TT__IrCutFilterAutoAdjustmentExtension& _extension );
        dm::TT__IrCutFilterAutoAdjustmentExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IrCutFilterAutoAdjustment();
        ~TT__IrCutFilterAutoAdjustment();

    public:
        TT__IrCutFilterAutoAdjustment( const TT__IrCutFilterAutoAdjustment& );
        TT__IrCutFilterAutoAdjustment &operator=( const TT__IrCutFilterAutoAdjustment& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__Capabilities
    {
    public:
        void setAny( const KDSoapValue& _any );
        KDSoapValue any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__Capabilities();
        ~TDS__Capabilities();

    public:
        TDS__Capabilities( const TDS__Capabilities& );
        TDS__Capabilities &operator=( const TDS__Capabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetSystemLog
    {
    public:
        void setLogType( const dm::TT__SystemLogType& _logType );
        dm::TT__SystemLogType logType() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetSystemLog();
        ~TDS__GetSystemLog();

    public:
        TDS__GetSystemLog( const TDS__GetSystemLog& );
        TDS__GetSystemLog &operator=( const TDS__GetSystemLog& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Space1DDescription
    {
    public:
        void setURI( const QString& _uRI );
        QString uRI() const;
        void setXRange( const dm::TT__FloatRange& _xRange );
        dm::TT__FloatRange xRange() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Space1DDescription();
        ~TT__Space1DDescription();

    public:
        TT__Space1DDescription( const TT__Space1DDescription& );
        TT__Space1DDescription &operator=( const TT__Space1DDescription& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__CapabilitiesExtension
    {
    public:
        void setDeviceIO( const dm::TT__DeviceIOCapabilities& _deviceIO );
        dm::TT__DeviceIOCapabilities deviceIO() const;
        void setDisplay( const dm::TT__DisplayCapabilities& _display );
        dm::TT__DisplayCapabilities display() const;
        void setRecording( const dm::TT__RecordingCapabilities& _recording );
        dm::TT__RecordingCapabilities recording() const;
        void setSearch( const dm::TT__SearchCapabilities& _search );
        dm::TT__SearchCapabilities search() const;
        void setReplay( const dm::TT__ReplayCapabilities& _replay );
        dm::TT__ReplayCapabilities replay() const;
        void setReceiver( const dm::TT__ReceiverCapabilities& _receiver );
        dm::TT__ReceiverCapabilities receiver() const;
        void setAnalyticsDevice( const dm::TT__AnalyticsDeviceCapabilities& _analyticsDevice );
        dm::TT__AnalyticsDeviceCapabilities analyticsDevice() const;
        void setExtensions( const dm::TT__CapabilitiesExtension2& _extensions );
        dm::TT__CapabilitiesExtension2 extensions() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__CapabilitiesExtension();
        ~TT__CapabilitiesExtension();

    public:
        TT__CapabilitiesExtension( const TT__CapabilitiesExtension& );
        TT__CapabilitiesExtension &operator=( const TT__CapabilitiesExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Dot11PSKSetExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Dot11PSKSetExtension();
        ~TT__Dot11PSKSetExtension();

    public:
        TT__Dot11PSKSetExtension( const TT__Dot11PSKSetExtension& );
        TT__Dot11PSKSetExtension &operator=( const TT__Dot11PSKSetExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetRemoteDiscoveryModeResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetRemoteDiscoveryModeResponse();
        ~TDS__SetRemoteDiscoveryModeResponse();

};
} // namespace end

namespace dm {
    class TDS__SetSystemDateAndTime
    {
    public:
        void setDateTimeType( const dm::TT__SetDateTimeType& _dateTimeType );
        dm::TT__SetDateTimeType dateTimeType() const;
        void setDaylightSavings( bool _daylightSavings );
        bool daylightSavings() const;
        void setTimeZone( const dm::TT__TimeZone& _timeZone );
        dm::TT__TimeZone timeZone() const;
        void setUTCDateTime( const dm::TT__DateTime& _uTCDateTime );
        dm::TT__DateTime uTCDateTime() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetSystemDateAndTime();
        ~TDS__SetSystemDateAndTime();

    public:
        TDS__SetSystemDateAndTime( const TDS__SetSystemDateAndTime& );
        TDS__SetSystemDateAndTime &operator=( const TDS__SetSystemDateAndTime& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetCertificates
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetCertificates();
        ~TDS__GetCertificates();

};
} // namespace end

namespace dm {
    class TDS__LoadCertificateWithPrivateKey
    {
    public:
        void setCertificateWithPrivateKey( const QList< dm::TT__CertificateWithPrivateKey >& _certificateWithPrivateKey );
        QList< dm::TT__CertificateWithPrivateKey > certificateWithPrivateKey() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__LoadCertificateWithPrivateKey();
        ~TDS__LoadCertificateWithPrivateKey();

    public:
        TDS__LoadCertificateWithPrivateKey( const TDS__LoadCertificateWithPrivateKey& );
        TDS__LoadCertificateWithPrivateKey &operator=( const TDS__LoadCertificateWithPrivateKey& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__PrefixedIPv6Address
    {
    public:
        void setAddress( const dm::TT__IPv6Address& _address );
        dm::TT__IPv6Address address() const;
        void setPrefixLength( int _prefixLength );
        int prefixLength() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__PrefixedIPv6Address();
        ~TT__PrefixedIPv6Address();

    public:
        TT__PrefixedIPv6Address( const TT__PrefixedIPv6Address& );
        TT__PrefixedIPv6Address &operator=( const TT__PrefixedIPv6Address& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkInterfaceInfo
    {
    public:
        void setName( const QString& _name );
        QString name() const;
        void setHwAddress( const dm::TT__HwAddress& _hwAddress );
        dm::TT__HwAddress hwAddress() const;
        void setMTU( int _mTU );
        int mTU() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkInterfaceInfo();
        ~TT__NetworkInterfaceInfo();

    public:
        TT__NetworkInterfaceInfo( const TT__NetworkInterfaceInfo& );
        TT__NetworkInterfaceInfo &operator=( const TT__NetworkInterfaceInfo& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__SystemCapabilitiesExtension
    {
    public:
        void setHttpFirmwareUpgrade( bool _httpFirmwareUpgrade );
        bool httpFirmwareUpgrade() const;
        void setHttpSystemBackup( bool _httpSystemBackup );
        bool httpSystemBackup() const;
        void setHttpSystemLogging( bool _httpSystemLogging );
        bool httpSystemLogging() const;
        void setHttpSupportInformation( bool _httpSupportInformation );
        bool httpSupportInformation() const;
        void setExtension( const dm::TT__SystemCapabilitiesExtension2& _extension );
        dm::TT__SystemCapabilitiesExtension2 extension() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SystemCapabilitiesExtension();
        ~TT__SystemCapabilitiesExtension();

    public:
        TT__SystemCapabilitiesExtension( const TT__SystemCapabilitiesExtension& );
        TT__SystemCapabilitiesExtension &operator=( const TT__SystemCapabilitiesExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__CreateUsersResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__CreateUsersResponse();
        ~TDS__CreateUsersResponse();

};
} // namespace end

namespace dm {
    class TT__BackupFile
    {
    public:
        void setName( const QString& _name );
        QString name() const;
        void setData( const dm::TT__AttachmentData& _data );
        dm::TT__AttachmentData data() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__BackupFile();
        ~TT__BackupFile();

    public:
        TT__BackupFile( const TT__BackupFile& );
        TT__BackupFile &operator=( const TT__BackupFile& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__StartSystemRestore
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__StartSystemRestore();
        ~TDS__StartSystemRestore();

};
} // namespace end

namespace dm {
    class TT__VideoResolution
    {
    public:
        void setWidth( int _width );
        int width() const;
        void setHeight( int _height );
        int height() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__VideoResolution();
        ~TT__VideoResolution();

    public:
        TT__VideoResolution( const TT__VideoResolution& );
        TT__VideoResolution &operator=( const TT__VideoResolution& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetSystemBackupResponse
    {
    public:
        void setBackupFiles( const QList< dm::TT__BackupFile >& _backupFiles );
        QList< dm::TT__BackupFile > backupFiles() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetSystemBackupResponse();
        ~TDS__GetSystemBackupResponse();

    public:
        TDS__GetSystemBackupResponse( const TDS__GetSystemBackupResponse& );
        TDS__GetSystemBackupResponse &operator=( const TDS__GetSystemBackupResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetAccessPolicyResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetAccessPolicyResponse();
        ~TDS__SetAccessPolicyResponse();

};
} // namespace end

namespace dm {
    class TDS__UserCredential
    {
    public:
        void setUserName( const QString& _userName );
        QString userName() const;
        void setPassword( const QString& _password );
        QString password() const;
        void setExtension( const dm::TDS__Extension& _extension );
        dm::TDS__Extension extension() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__UserCredential();
        ~TDS__UserCredential();

    public:
        TDS__UserCredential( const TDS__UserCredential& );
        TDS__UserCredential &operator=( const TDS__UserCredential& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDot11Capabilities
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDot11Capabilities();
        ~TDS__GetDot11Capabilities();

    public:
        TDS__GetDot11Capabilities( const TDS__GetDot11Capabilities& );
        TDS__GetDot11Capabilities &operator=( const TDS__GetDot11Capabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetZeroConfiguration
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetZeroConfiguration();
        ~TDS__GetZeroConfiguration();

};
} // namespace end

namespace dm {
    class TT__DynamicDNSInformation
    {
    public:
        void setType( const dm::TT__DynamicDNSType& _type );
        dm::TT__DynamicDNSType type() const;
        void setName( const dm::TT__DNSName& _name );
        dm::TT__DNSName name() const;
        void setTTL( const QString& _tTL );
        QString tTL() const;
        void setExtension( const dm::TT__DynamicDNSInformationExtension& _extension );
        dm::TT__DynamicDNSInformationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__DynamicDNSInformation();
        ~TT__DynamicDNSInformation();

    public:
        TT__DynamicDNSInformation( const TT__DynamicDNSInformation& );
        TT__DynamicDNSInformation &operator=( const TT__DynamicDNSInformation& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Date
    {
    public:
        void setYear( int _year );
        int year() const;
        void setMonth( int _month );
        int month() const;
        void setDay( int _day );
        int day() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Date();
        ~TT__Date();

    public:
        TT__Date( const TT__Date& );
        TT__Date &operator=( const TT__Date& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__FocusConfiguration
    {
    public:
        void setAutoFocusMode( const dm::TT__AutoFocusMode& _autoFocusMode );
        dm::TT__AutoFocusMode autoFocusMode() const;
        void setDefaultSpeed( float _defaultSpeed );
        float defaultSpeed() const;
        void setNearLimit( float _nearLimit );
        float nearLimit() const;
        void setFarLimit( float _farLimit );
        float farLimit() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__FocusConfiguration();
        ~TT__FocusConfiguration();

    public:
        TT__FocusConfiguration( const TT__FocusConfiguration& );
        TT__FocusConfiguration &operator=( const TT__FocusConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__ImageStabilization
    {
    public:
        void setMode( const dm::TT__ImageStabilizationMode& _mode );
        dm::TT__ImageStabilizationMode mode() const;
        void setLevel( float _level );
        float level() const;
        void setExtension( const dm::TT__ImageStabilizationExtension& _extension );
        dm::TT__ImageStabilizationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ImageStabilization();
        ~TT__ImageStabilization();

    public:
        TT__ImageStabilization( const TT__ImageStabilization& );
        TT__ImageStabilization &operator=( const TT__ImageStabilization& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetStorageConfigurationResponse
    {
    public:
        void setStorageConfiguration( const dm::TDS__StorageConfiguration& _storageConfiguration );
        dm::TDS__StorageConfiguration storageConfiguration() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetStorageConfigurationResponse();
        ~TDS__GetStorageConfigurationResponse();

    public:
        TDS__GetStorageConfigurationResponse( const TDS__GetStorageConfigurationResponse& );
        TDS__GetStorageConfigurationResponse &operator=( const TDS__GetStorageConfigurationResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__IOCapabilitiesExtension2
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IOCapabilitiesExtension2();
        ~TT__IOCapabilitiesExtension2();

    public:
        TT__IOCapabilitiesExtension2( const TT__IOCapabilitiesExtension2& );
        TT__IOCapabilitiesExtension2 &operator=( const TT__IOCapabilitiesExtension2& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetSystemDateAndTime
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetSystemDateAndTime();
        ~TDS__GetSystemDateAndTime();

};
} // namespace end

namespace dm {
    /**
        Type describing the exposure settings.
     */
    class TT__Exposure20
    {
    public:
        void setMode( const dm::TT__ExposureMode& _mode );
        dm::TT__ExposureMode mode() const;
        void setPriority( const dm::TT__ExposurePriority& _priority );
        dm::TT__ExposurePriority priority() const;
        void setWindow( const dm::TT__Rectangle& _window );
        dm::TT__Rectangle window() const;
        void setMinExposureTime( float _minExposureTime );
        float minExposureTime() const;
        void setMaxExposureTime( float _maxExposureTime );
        float maxExposureTime() const;
        void setMinGain( float _minGain );
        float minGain() const;
        void setMaxGain( float _maxGain );
        float maxGain() const;
        void setMinIris( float _minIris );
        float minIris() const;
        void setMaxIris( float _maxIris );
        float maxIris() const;
        void setExposureTime( float _exposureTime );
        float exposureTime() const;
        void setGain( float _gain );
        float gain() const;
        void setIris( float _iris );
        float iris() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Exposure20();
        ~TT__Exposure20();

    public:
        TT__Exposure20( const TT__Exposure20& );
        TT__Exposure20 &operator=( const TT__Exposure20& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__DynamicDNSInformationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__DynamicDNSInformationExtension();
        ~TT__DynamicDNSInformationExtension();

    public:
        TT__DynamicDNSInformationExtension( const TT__DynamicDNSInformationExtension& );
        TT__DynamicDNSInformationExtension &operator=( const TT__DynamicDNSInformationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__StartSystemRestoreResponse
    {
    public:
        void setUploadUri( const QString& _uploadUri );
        QString uploadUri() const;
        void setExpectedDownTime( const QString& _expectedDownTime );
        QString expectedDownTime() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__StartSystemRestoreResponse();
        ~TDS__StartSystemRestoreResponse();

    public:
        TDS__StartSystemRestoreResponse( const TDS__StartSystemRestoreResponse& );
        TDS__StartSystemRestoreResponse &operator=( const TDS__StartSystemRestoreResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__ImageStabilizationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ImageStabilizationExtension();
        ~TT__ImageStabilizationExtension();

    public:
        TT__ImageStabilizationExtension( const TT__ImageStabilizationExtension& );
        TT__ImageStabilizationExtension &operator=( const TT__ImageStabilizationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkProtocol
    {
    public:
        void setName( const dm::TT__NetworkProtocolType& _name );
        dm::TT__NetworkProtocolType name() const;
        void setEnabled( bool _enabled );
        bool enabled() const;
        void setPort( const QList< int >& _port );
        QList< int > port() const;
        void setExtension( const dm::TT__NetworkProtocolExtension& _extension );
        dm::TT__NetworkProtocolExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkProtocol();
        ~TT__NetworkProtocol();

    public:
        TT__NetworkProtocol( const TT__NetworkProtocol& );
        TT__NetworkProtocol &operator=( const TT__NetworkProtocol& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__DeleteCertificatesResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__DeleteCertificatesResponse();
        ~TDS__DeleteCertificatesResponse();

};
} // namespace end

namespace dm {
    class TDS__GetCapabilities
    {
    public:
        void setCategory( const QList< dm::TT__CapabilityCategory >& _category );
        QList< dm::TT__CapabilityCategory > category() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetCapabilities();
        ~TDS__GetCapabilities();

    public:
        TDS__GetCapabilities( const TDS__GetCapabilities& );
        TDS__GetCapabilities &operator=( const TDS__GetCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetPkcs10Request
    {
    public:
        void setCertificateID( const QString& _certificateID );
        QString certificateID() const;
        void setSubject( const QString& _subject );
        QString subject() const;
        void setAttributes( const dm::TT__BinaryData& _attributes );
        dm::TT__BinaryData attributes() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetPkcs10Request();
        ~TDS__GetPkcs10Request();

    public:
        TDS__GetPkcs10Request( const TDS__GetPkcs10Request& );
        TDS__GetPkcs10Request &operator=( const TDS__GetPkcs10Request& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__BinaryData
    {
    public:
        void setData( const QByteArray& _data );
        QByteArray data() const;
        void setContentType( const dm::XMIME__ContentType& _contentType );
        dm::XMIME__ContentType contentType() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__BinaryData();
        ~TT__BinaryData();

    public:
        TT__BinaryData( const TT__BinaryData& );
        TT__BinaryData &operator=( const TT__BinaryData& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetSystemSupportInformation
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetSystemSupportInformation();
        ~TDS__GetSystemSupportInformation();

};
} // namespace end

namespace dm {
    class TDS__GetDeviceInformationResponse
    {
    public:
        void setManufacturer( const QString& _manufacturer );
        QString manufacturer() const;
        void setModel( const QString& _model );
        QString model() const;
        void setFirmwareVersion( const QString& _firmwareVersion );
        QString firmwareVersion() const;
        void setSerialNumber( const QString& _serialNumber );
        QString serialNumber() const;
        void setHardwareId( const QString& _hardwareId );
        QString hardwareId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDeviceInformationResponse();
        ~TDS__GetDeviceInformationResponse();

    public:
        TDS__GetDeviceInformationResponse( const TDS__GetDeviceInformationResponse& );
        TDS__GetDeviceInformationResponse &operator=( const TDS__GetDeviceInformationResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetCACertificatesResponse
    {
    public:
        void setCACertificate( const QList< dm::TT__Certificate >& _cACertificate );
        QList< dm::TT__Certificate > cACertificate() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetCACertificatesResponse();
        ~TDS__GetCACertificatesResponse();

    public:
        TDS__GetCACertificatesResponse( const TDS__GetCACertificatesResponse& );
        TDS__GetCACertificatesResponse &operator=( const TDS__GetCACertificatesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkGateway
    {
    public:
        void setIPv4Address( const QList< dm::TT__IPv4Address >& _iPv4Address );
        QList< dm::TT__IPv4Address > iPv4Address() const;
        void setIPv6Address( const QList< dm::TT__IPv6Address >& _iPv6Address );
        QList< dm::TT__IPv6Address > iPv6Address() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkGateway();
        ~TT__NetworkGateway();

    public:
        TT__NetworkGateway( const TT__NetworkGateway& );
        TT__NetworkGateway &operator=( const TT__NetworkGateway& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkHostExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkHostExtension();
        ~TT__NetworkHostExtension();

    public:
        TT__NetworkHostExtension( const TT__NetworkHostExtension& );
        TT__NetworkHostExtension &operator=( const TT__NetworkHostExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    /**
        The TZ format is specified by POSIX, please refer to POSIX 1003.1
        section 8.3 Example: Europe, Paris TZ=CET-1CEST,M3.5.0/2,M10.5.0/3 CET
        = designation for standard time when daylight saving is not in force -1
        = offset in hours = negative so 1 hour east of Greenwich meridian CEST
        = designation when daylight saving is in force ("Central European
        Summer Time") , = no offset number between code and comma, so default
        to one hour ahead for daylight saving M3.5.0 = when daylight saving
        starts = the last Sunday in March (the "5th" week means the last in the
        month) /2, = the local time when the switch occurs = 2 a.m. in this
        case M10.5.0 = when daylight saving ends = the last Sunday in October.
        /3, = the local time when the switch occurs = 3 a.m. in this case
     */
    class TT__TimeZone
    {
    public:
        void setTZ( const QString& _tZ );
        QString tZ() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__TimeZone();
        ~TT__TimeZone();

    public:
        TT__TimeZone( const TT__TimeZone& );
        TT__TimeZone &operator=( const TT__TimeZone& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetRemoteUserResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetRemoteUserResponse();
        ~TDS__SetRemoteUserResponse();

};
} // namespace end

namespace dm {
    class TT__SystemLog
    {
    public:
        void setBinary( const dm::TT__AttachmentData& _binary );
        dm::TT__AttachmentData binary() const;
        void setString( const QString& _string );
        QString string() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SystemLog();
        ~TT__SystemLog();

    public:
        TT__SystemLog( const TT__SystemLog& );
        TT__SystemLog &operator=( const TT__SystemLog& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__ImagingSettingsExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ImagingSettingsExtension();
        ~TT__ImagingSettingsExtension();

    public:
        TT__ImagingSettingsExtension( const TT__ImagingSettingsExtension& );
        TT__ImagingSettingsExtension &operator=( const TT__ImagingSettingsExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetUsersResponse
    {
    public:
        void setUser( const QList< dm::TT__User >& _user );
        QList< dm::TT__User > user() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetUsersResponse();
        ~TDS__GetUsersResponse();

    public:
        TDS__GetUsersResponse( const TDS__GetUsersResponse& );
        TDS__GetUsersResponse &operator=( const TDS__GetUsersResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Dot11SecurityConfiguration
    {
    public:
        void setMode( const dm::TT__Dot11SecurityMode& _mode );
        dm::TT__Dot11SecurityMode mode() const;
        void setAlgorithm( const dm::TT__Dot11Cipher& _algorithm );
        dm::TT__Dot11Cipher algorithm() const;
        void setPSK( const dm::TT__Dot11PSKSet& _pSK );
        dm::TT__Dot11PSKSet pSK() const;
        void setDot1X( const dm::TT__ReferenceToken& _dot1X );
        dm::TT__ReferenceToken dot1X() const;
        void setExtension( const dm::TT__Dot11SecurityConfigurationExtension& _extension );
        dm::TT__Dot11SecurityConfigurationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Dot11SecurityConfiguration();
        ~TT__Dot11SecurityConfiguration();

    public:
        TT__Dot11SecurityConfiguration( const TT__Dot11SecurityConfiguration& );
        TT__Dot11SecurityConfiguration &operator=( const TT__Dot11SecurityConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__SystemLogUri
    {
    public:
        void setType( const dm::TT__SystemLogType& _type );
        dm::TT__SystemLogType type() const;
        void setUri( const QString& _uri );
        QString uri() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SystemLogUri();
        ~TT__SystemLogUri();

    public:
        TT__SystemLogUri( const TT__SystemLogUri& );
        TT__SystemLogUri &operator=( const TT__SystemLogUri& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Dot11Configuration
    {
    public:
        void setSSID( const dm::TT__Dot11SSIDType& _sSID );
        dm::TT__Dot11SSIDType sSID() const;
        void setMode( const dm::TT__Dot11StationMode& _mode );
        dm::TT__Dot11StationMode mode() const;
        void setAlias( const dm::TT__Name& _alias );
        dm::TT__Name alias() const;
        void setPriority( const dm::TT__NetworkInterfaceConfigPriority& _priority );
        dm::TT__NetworkInterfaceConfigPriority priority() const;
        void setSecurity( const dm::TT__Dot11SecurityConfiguration& _security );
        dm::TT__Dot11SecurityConfiguration security() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Dot11Configuration();
        ~TT__Dot11Configuration();

    public:
        TT__Dot11Configuration( const TT__Dot11Configuration& );
        TT__Dot11Configuration &operator=( const TT__Dot11Configuration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetServicesResponse
    {
    public:
        void setService( const QList< dm::TDS__Service >& _service );
        QList< dm::TDS__Service > service() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetServicesResponse();
        ~TDS__GetServicesResponse();

    public:
        TDS__GetServicesResponse( const TDS__GetServicesResponse& );
        TDS__GetServicesResponse &operator=( const TDS__GetServicesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetScopes
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetScopes();
        ~TDS__GetScopes();

};
} // namespace end

namespace dm {
    class TDS__LoadCertificates
    {
    public:
        void setNVTCertificate( const QList< dm::TT__Certificate >& _nVTCertificate );
        QList< dm::TT__Certificate > nVTCertificate() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__LoadCertificates();
        ~TDS__LoadCertificates();

    public:
        TDS__LoadCertificates( const TDS__LoadCertificates& );
        TDS__LoadCertificates &operator=( const TDS__LoadCertificates& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SecurityCapabilities
    {
    public:
        void setTLS1_0( bool _tLS1_0 );
        bool tLS1_0() const;
        void setTLS1_1( bool _tLS1_1 );
        bool tLS1_1() const;
        void setTLS1_2( bool _tLS1_2 );
        bool tLS1_2() const;
        void setOnboardKeyGeneration( bool _onboardKeyGeneration );
        bool onboardKeyGeneration() const;
        void setAccessPolicyConfig( bool _accessPolicyConfig );
        bool accessPolicyConfig() const;
        void setDefaultAccessPolicy( bool _defaultAccessPolicy );
        bool defaultAccessPolicy() const;
        void setDot1X( bool _dot1X );
        bool dot1X() const;
        void setRemoteUserHandling( bool _remoteUserHandling );
        bool remoteUserHandling() const;
        void setX_509Token( bool _x_509Token );
        bool x_509Token() const;
        void setSAMLToken( bool _sAMLToken );
        bool sAMLToken() const;
        void setKerberosToken( bool _kerberosToken );
        bool kerberosToken() const;
        void setUsernameToken( bool _usernameToken );
        bool usernameToken() const;
        void setHttpDigest( bool _httpDigest );
        bool httpDigest() const;
        void setRELToken( bool _rELToken );
        bool rELToken() const;
        void setSupportedEAPMethods( const dm::TDS__EAPMethodTypes& _supportedEAPMethods );
        dm::TDS__EAPMethodTypes supportedEAPMethods() const;
        void setMaxUsers( int _maxUsers );
        int maxUsers() const;
        void setMaxUserNameLength( int _maxUserNameLength );
        int maxUserNameLength() const;
        void setMaxPasswordLength( int _maxPasswordLength );
        int maxPasswordLength() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SecurityCapabilities();
        ~TDS__SecurityCapabilities();

    public:
        TDS__SecurityCapabilities( const TDS__SecurityCapabilities& );
        TDS__SecurityCapabilities &operator=( const TDS__SecurityCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetNTP
    {
    public:
        void setFromDHCP( bool _fromDHCP );
        bool fromDHCP() const;
        void setNTPManual( const QList< dm::TT__NetworkHost >& _nTPManual );
        QList< dm::TT__NetworkHost > nTPManual() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetNTP();
        ~TDS__SetNTP();

    public:
        TDS__SetNTP( const TDS__SetNTP& );
        TDS__SetNTP &operator=( const TDS__SetNTP& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__SearchCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setMetadataSearch( bool _metadataSearch );
        bool metadataSearch() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SearchCapabilities();
        ~TT__SearchCapabilities();

    public:
        TT__SearchCapabilities( const TT__SearchCapabilities& );
        TT__SearchCapabilities &operator=( const TT__SearchCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__BacklightCompensation
    {
    public:
        void setMode( const dm::TT__BacklightCompensationMode& _mode );
        dm::TT__BacklightCompensationMode mode() const;
        void setLevel( float _level );
        float level() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__BacklightCompensation();
        ~TT__BacklightCompensation();

    public:
        TT__BacklightCompensation( const TT__BacklightCompensation& );
        TT__BacklightCompensation &operator=( const TT__BacklightCompensation& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetRelayOutputSettings
    {
    public:
        void setRelayOutputToken( const dm::TT__ReferenceToken& _relayOutputToken );
        dm::TT__ReferenceToken relayOutputToken() const;
        void setProperties( const dm::TT__RelayOutputSettings& _properties );
        dm::TT__RelayOutputSettings properties() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetRelayOutputSettings();
        ~TDS__SetRelayOutputSettings();

    public:
        TDS__SetRelayOutputSettings( const TDS__SetRelayOutputSettings& );
        TDS__SetRelayOutputSettings &operator=( const TDS__SetRelayOutputSettings& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__AddIPAddressFilterResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__AddIPAddressFilterResponse();
        ~TDS__AddIPAddressFilterResponse();

};
} // namespace end

namespace dm {
    class TDS__GetDiscoveryMode
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDiscoveryMode();
        ~TDS__GetDiscoveryMode();

};
} // namespace end

namespace dm {
    class TT__DisplayCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setFixedLayout( bool _fixedLayout );
        bool fixedLayout() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__DisplayCapabilities();
        ~TT__DisplayCapabilities();

    public:
        TT__DisplayCapabilities( const TT__DisplayCapabilities& );
        TT__DisplayCapabilities &operator=( const TT__DisplayCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Color
    {
    public:
        void setX( float _x );
        float x() const;
        void setY( float _y );
        float y() const;
        void setZ( float _z );
        float z() const;
        void setColorspace( const QString& _colorspace );
        QString colorspace() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Color();
        ~TT__Color();

    public:
        TT__Color( const TT__Color& );
        TT__Color &operator=( const TT__Color& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SystemReboot
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SystemReboot();
        ~TDS__SystemReboot();

};
} // namespace end

namespace dm {
    class TT__AnalyticsDeviceExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__AnalyticsDeviceExtension();
        ~TT__AnalyticsDeviceExtension();

    public:
        TT__AnalyticsDeviceExtension( const TT__AnalyticsDeviceExtension& );
        TT__AnalyticsDeviceExtension &operator=( const TT__AnalyticsDeviceExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetIPAddressFilterResponse
    {
    public:
        void setIPAddressFilter( const dm::TT__IPAddressFilter& _iPAddressFilter );
        dm::TT__IPAddressFilter iPAddressFilter() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetIPAddressFilterResponse();
        ~TDS__GetIPAddressFilterResponse();

    public:
        TDS__GetIPAddressFilterResponse( const TDS__GetIPAddressFilterResponse& );
        TDS__GetIPAddressFilterResponse &operator=( const TDS__GetIPAddressFilterResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetStorageConfigurations
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetStorageConfigurations();
        ~TDS__GetStorageConfigurations();

};
} // namespace end

namespace dm {
    class TT__DateTime
    {
    public:
        void setTime( const dm::TT__Time& _time );
        dm::TT__Time time() const;
        void setDate( const dm::TT__Date& _date );
        dm::TT__Date date() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__DateTime();
        ~TT__DateTime();

    public:
        TT__DateTime( const TT__DateTime& );
        TT__DateTime &operator=( const TT__DateTime& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Capabilities
    {
    public:
        void setAnalytics( const dm::TT__AnalyticsCapabilities& _analytics );
        dm::TT__AnalyticsCapabilities analytics() const;
        void setDevice( const dm::TT__DeviceCapabilities& _device );
        dm::TT__DeviceCapabilities device() const;
        void setEvents( const dm::TT__EventCapabilities& _events );
        dm::TT__EventCapabilities events() const;
        void setImaging( const dm::TT__ImagingCapabilities& _imaging );
        dm::TT__ImagingCapabilities imaging() const;
        void setMedia( const dm::TT__MediaCapabilities& _media );
        dm::TT__MediaCapabilities media() const;
        void setPTZ( const dm::TT__PTZCapabilities& _pTZ );
        dm::TT__PTZCapabilities pTZ() const;
        void setExtension( const dm::TT__CapabilitiesExtension& _extension );
        dm::TT__CapabilitiesExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Capabilities();
        ~TT__Capabilities();

    public:
        TT__Capabilities( const TT__Capabilities& );
        TT__Capabilities &operator=( const TT__Capabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDot11StatusResponse
    {
    public:
        void setStatus( const dm::TT__Dot11Status& _status );
        dm::TT__Dot11Status status() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDot11StatusResponse();
        ~TDS__GetDot11StatusResponse();

    public:
        TDS__GetDot11StatusResponse( const TDS__GetDot11StatusResponse& );
        TDS__GetDot11StatusResponse &operator=( const TDS__GetDot11StatusResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    /**
        Type describing whether WDR mode is enabled or disabled (on/off).
     */
    class TT__WideDynamicRange20
    {
    public:
        void setMode( const dm::TT__WideDynamicMode& _mode );
        dm::TT__WideDynamicMode mode() const;
        void setLevel( float _level );
        float level() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__WideDynamicRange20();
        ~TT__WideDynamicRange20();

    public:
        TT__WideDynamicRange20( const TT__WideDynamicRange20& );
        TT__WideDynamicRange20 &operator=( const TT__WideDynamicRange20& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetHostnameFromDHCP
    {
    public:
        void setFromDHCP( bool _fromDHCP );
        bool fromDHCP() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetHostnameFromDHCP();
        ~TDS__SetHostnameFromDHCP();

    public:
        TDS__SetHostnameFromDHCP( const TDS__SetHostnameFromDHCP& );
        TDS__SetHostnameFromDHCP &operator=( const TDS__SetHostnameFromDHCP& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__MediaCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setStreamingCapabilities( const dm::TT__RealTimeStreamingCapabilities& _streamingCapabilities );
        dm::TT__RealTimeStreamingCapabilities streamingCapabilities() const;
        void setExtension( const dm::TT__MediaCapabilitiesExtension& _extension );
        dm::TT__MediaCapabilitiesExtension extension() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__MediaCapabilities();
        ~TT__MediaCapabilities();

    public:
        TT__MediaCapabilities( const TT__MediaCapabilities& );
        TT__MediaCapabilities &operator=( const TT__MediaCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetDNS
    {
    public:
        void setFromDHCP( bool _fromDHCP );
        bool fromDHCP() const;
        void setSearchDomain( const QStringList& _searchDomain );
        QStringList searchDomain() const;
        void setDNSManual( const QList< dm::TT__IPAddress >& _dNSManual );
        QList< dm::TT__IPAddress > dNSManual() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetDNS();
        ~TDS__SetDNS();

    public:
        TDS__SetDNS( const TDS__SetDNS& );
        TDS__SetDNS &operator=( const TDS__SetDNS& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDiscoveryModeResponse
    {
    public:
        void setDiscoveryMode( const dm::TT__DiscoveryMode& _discoveryMode );
        dm::TT__DiscoveryMode discoveryMode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDiscoveryModeResponse();
        ~TDS__GetDiscoveryModeResponse();

    public:
        TDS__GetDiscoveryModeResponse( const TDS__GetDiscoveryModeResponse& );
        TDS__GetDiscoveryModeResponse &operator=( const TDS__GetDiscoveryModeResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__User
    {
    public:
        void setUsername( const QString& _username );
        QString username() const;
        void setPassword( const QString& _password );
        QString password() const;
        void setUserLevel( const dm::TT__UserLevel& _userLevel );
        dm::TT__UserLevel userLevel() const;
        void setExtension( const dm::TT__UserExtension& _extension );
        dm::TT__UserExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__User();
        ~TT__User();

    public:
        TT__User( const TT__User& );
        TT__User &operator=( const TT__User& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__DeleteUsersResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__DeleteUsersResponse();
        ~TDS__DeleteUsersResponse();

};
} // namespace end

namespace dm {
    class TDS__SetSystemDateAndTimeResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetSystemDateAndTimeResponse();
        ~TDS__SetSystemDateAndTimeResponse();

};
} // namespace end

namespace dm {
    class TDS__GetDot11Status
    {
    public:
        void setInterfaceToken( const dm::TT__ReferenceToken& _interfaceToken );
        dm::TT__ReferenceToken interfaceToken() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDot11Status();
        ~TDS__GetDot11Status();

    public:
        TDS__GetDot11Status( const TDS__GetDot11Status& );
        TDS__GetDot11Status &operator=( const TDS__GetDot11Status& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__UserExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__UserExtension();
        ~TT__UserExtension();

    public:
        TT__UserExtension( const TT__UserExtension& );
        TT__UserExtension &operator=( const TT__UserExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__MiscCapabilities
    {
    public:
        void setAuxiliaryCommands( const dm::TT__StringAttrList& _auxiliaryCommands );
        dm::TT__StringAttrList auxiliaryCommands() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__MiscCapabilities();
        ~TDS__MiscCapabilities();

    public:
        TDS__MiscCapabilities( const TDS__MiscCapabilities& );
        TDS__MiscCapabilities &operator=( const TDS__MiscCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetScopesResponse
    {
    public:
        void setScopes( const QList< dm::TT__Scope >& _scopes );
        QList< dm::TT__Scope > scopes() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetScopesResponse();
        ~TDS__GetScopesResponse();

    public:
        TDS__GetScopesResponse( const TDS__GetScopesResponse& );
        TDS__GetScopesResponse &operator=( const TDS__GetScopesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__RemoveIPAddressFilter
    {
    public:
        void setIPAddressFilter( const dm::TT__IPAddressFilter& _iPAddressFilter );
        dm::TT__IPAddressFilter iPAddressFilter() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__RemoveIPAddressFilter();
        ~TDS__RemoveIPAddressFilter();

    public:
        TDS__RemoveIPAddressFilter( const TDS__RemoveIPAddressFilter& );
        TDS__RemoveIPAddressFilter &operator=( const TDS__RemoveIPAddressFilter& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__Service
    {
    public:
        void setNamespace( const QString& _namespace_ );
        QString namespace_() const;
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setCapabilities( const dm::TDS__Capabilities& _capabilities );
        dm::TDS__Capabilities capabilities() const;
        void setVersion( const dm::TT__OnvifVersion& _version );
        dm::TT__OnvifVersion version() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__Service();
        ~TDS__Service();

    public:
        TDS__Service( const TDS__Service& );
        TDS__Service &operator=( const TDS__Service& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetCertificatesResponse
    {
    public:
        void setNvtCertificate( const QList< dm::TT__Certificate >& _nvtCertificate );
        QList< dm::TT__Certificate > nvtCertificate() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetCertificatesResponse();
        ~TDS__GetCertificatesResponse();

    public:
        TDS__GetCertificatesResponse( const TDS__GetCertificatesResponse& );
        TDS__GetCertificatesResponse &operator=( const TDS__GetCertificatesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetSystemUrisResponse
    {
    public:
        void setSystemLogUris( const dm::TT__SystemLogUriList& _systemLogUris );
        dm::TT__SystemLogUriList systemLogUris() const;
        void setSupportInfoUri( const QString& _supportInfoUri );
        QString supportInfoUri() const;
        void setSystemBackupUri( const QString& _systemBackupUri );
        QString systemBackupUri() const;
        void setExtension( const dm::TDS__Extension& _extension );
        dm::TDS__Extension extension() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetSystemUrisResponse();
        ~TDS__GetSystemUrisResponse();

    public:
        TDS__GetSystemUrisResponse( const TDS__GetSystemUrisResponse& );
        TDS__GetSystemUrisResponse &operator=( const TDS__GetSystemUrisResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Dot1XConfigurationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Dot1XConfigurationExtension();
        ~TT__Dot1XConfigurationExtension();

    public:
        TT__Dot1XConfigurationExtension( const TT__Dot1XConfigurationExtension& );
        TT__Dot1XConfigurationExtension &operator=( const TT__Dot1XConfigurationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__DeleteUsers
    {
    public:
        void setUsername( const QStringList& _username );
        QStringList username() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__DeleteUsers();
        ~TDS__DeleteUsers();

    public:
        TDS__DeleteUsers( const TDS__DeleteUsers& );
        TDS__DeleteUsers &operator=( const TDS__DeleteUsers& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetCACertificates
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetCACertificates();
        ~TDS__GetCACertificates();

};
} // namespace end

namespace dm {
    /**
        The value range of "Transparent" could be defined by vendors only
        should follow this rule: the minimum value means non-transparent and
        the maximum value maens fully transparent.
     */
    class TT__OSDColor
    {
    public:
        void setColor( const dm::TT__Color& _color );
        dm::TT__Color color() const;
        void setTransparent( int _transparent );
        int transparent() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__OSDColor();
        ~TT__OSDColor();

    public:
        TT__OSDColor( const TT__OSDColor& );
        TT__OSDColor &operator=( const TT__OSDColor& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__ImagingCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ImagingCapabilities();
        ~TT__ImagingCapabilities();

    public:
        TT__ImagingCapabilities( const TT__ImagingCapabilities& );
        TT__ImagingCapabilities &operator=( const TT__ImagingCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetServiceCapabilities
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetServiceCapabilities();
        ~TDS__GetServiceCapabilities();

};
} // namespace end

namespace dm {
    class TDS__GetNetworkInterfacesResponse
    {
    public:
        void setNetworkInterfaces( const QList< dm::TT__NetworkInterface >& _networkInterfaces );
        QList< dm::TT__NetworkInterface > networkInterfaces() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetNetworkInterfacesResponse();
        ~TDS__GetNetworkInterfacesResponse();

    public:
        TDS__GetNetworkInterfacesResponse( const TDS__GetNetworkInterfacesResponse& );
        TDS__GetNetworkInterfacesResponse &operator=( const TDS__GetNetworkInterfacesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NTPInformationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NTPInformationExtension();
        ~TT__NTPInformationExtension();

    public:
        TT__NTPInformationExtension( const TT__NTPInformationExtension& );
        TT__NTPInformationExtension &operator=( const TT__NTPInformationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__OSDConfigurationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__OSDConfigurationExtension();
        ~TT__OSDConfigurationExtension();

    public:
        TT__OSDConfigurationExtension( const TT__OSDConfigurationExtension& );
        TT__OSDConfigurationExtension &operator=( const TT__OSDConfigurationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__ImagingSettings
    {
    public:
        void setBacklightCompensation( const dm::TT__BacklightCompensation& _backlightCompensation );
        dm::TT__BacklightCompensation backlightCompensation() const;
        void setBrightness( float _brightness );
        float brightness() const;
        void setColorSaturation( float _colorSaturation );
        float colorSaturation() const;
        void setContrast( float _contrast );
        float contrast() const;
        void setExposure( const dm::TT__Exposure& _exposure );
        dm::TT__Exposure exposure() const;
        void setFocus( const dm::TT__FocusConfiguration& _focus );
        dm::TT__FocusConfiguration focus() const;
        void setIrCutFilter( const dm::TT__IrCutFilterMode& _irCutFilter );
        dm::TT__IrCutFilterMode irCutFilter() const;
        void setSharpness( float _sharpness );
        float sharpness() const;
        void setWideDynamicRange( const dm::TT__WideDynamicRange& _wideDynamicRange );
        dm::TT__WideDynamicRange wideDynamicRange() const;
        void setWhiteBalance( const dm::TT__WhiteBalance& _whiteBalance );
        dm::TT__WhiteBalance whiteBalance() const;
        void setExtension( const dm::TT__ImagingSettingsExtension& _extension );
        dm::TT__ImagingSettingsExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ImagingSettings();
        ~TT__ImagingSettings();

    public:
        TT__ImagingSettings( const TT__ImagingSettings& );
        TT__ImagingSettings &operator=( const TT__ImagingSettings& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Time
    {
    public:
        void setHour( int _hour );
        int hour() const;
        void setMinute( int _minute );
        int minute() const;
        void setSecond( int _second );
        int second() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Time();
        ~TT__Time();

    public:
        TT__Time( const TT__Time& );
        TT__Time &operator=( const TT__Time& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDot1XConfigurations
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDot1XConfigurations();
        ~TDS__GetDot1XConfigurations();

};
} // namespace end

namespace dm {
    class TT__DNSInformation
    {
    public:
        void setFromDHCP( bool _fromDHCP );
        bool fromDHCP() const;
        void setSearchDomain( const QStringList& _searchDomain );
        QStringList searchDomain() const;
        void setDNSFromDHCP( const QList< dm::TT__IPAddress >& _dNSFromDHCP );
        QList< dm::TT__IPAddress > dNSFromDHCP() const;
        void setDNSManual( const QList< dm::TT__IPAddress >& _dNSManual );
        QList< dm::TT__IPAddress > dNSManual() const;
        void setExtension( const dm::TT__DNSInformationExtension& _extension );
        dm::TT__DNSInformationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__DNSInformation();
        ~TT__DNSInformation();

    public:
        TT__DNSInformation( const TT__DNSInformation& );
        TT__DNSInformation &operator=( const TT__DNSInformation& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetIPAddressFilter
    {
    public:
        void setIPAddressFilter( const dm::TT__IPAddressFilter& _iPAddressFilter );
        dm::TT__IPAddressFilter iPAddressFilter() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetIPAddressFilter();
        ~TDS__SetIPAddressFilter();

    public:
        TDS__SetIPAddressFilter( const TDS__SetIPAddressFilter& );
        TDS__SetIPAddressFilter &operator=( const TDS__SetIPAddressFilter& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__OSDTextConfigurationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__OSDTextConfigurationExtension();
        ~TT__OSDTextConfigurationExtension();

    public:
        TT__OSDTextConfigurationExtension( const TT__OSDTextConfigurationExtension& );
        TT__OSDTextConfigurationExtension &operator=( const TT__OSDTextConfigurationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__ToneCompensationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ToneCompensationExtension();
        ~TT__ToneCompensationExtension();

    public:
        TT__ToneCompensationExtension( const TT__ToneCompensationExtension& );
        TT__ToneCompensationExtension &operator=( const TT__ToneCompensationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__StartFirmwareUpgrade
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__StartFirmwareUpgrade();
        ~TDS__StartFirmwareUpgrade();

};
} // namespace end

namespace dm {
    class TDS__SendAuxiliaryCommand
    {
    public:
        void setAuxiliaryCommand( const dm::TT__AuxiliaryData& _auxiliaryCommand );
        dm::TT__AuxiliaryData auxiliaryCommand() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SendAuxiliaryCommand();
        ~TDS__SendAuxiliaryCommand();

    public:
        TDS__SendAuxiliaryCommand( const TDS__SendAuxiliaryCommand& );
        TDS__SendAuxiliaryCommand &operator=( const TDS__SendAuxiliaryCommand& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetClientCertificateModeResponse
    {
    public:
        void setEnabled( bool _enabled );
        bool enabled() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetClientCertificateModeResponse();
        ~TDS__GetClientCertificateModeResponse();

    public:
        TDS__GetClientCertificateModeResponse( const TDS__GetClientCertificateModeResponse& );
        TDS__GetClientCertificateModeResponse &operator=( const TDS__GetClientCertificateModeResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__HostnameInformationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__HostnameInformationExtension();
        ~TT__HostnameInformationExtension();

    public:
        TT__HostnameInformationExtension( const TT__HostnameInformationExtension& );
        TT__HostnameInformationExtension &operator=( const TT__HostnameInformationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetDynamicDNSResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetDynamicDNSResponse();
        ~TDS__SetDynamicDNSResponse();

};
} // namespace end

namespace dm {
    class TT__CertificateWithPrivateKey
    {
    public:
        void setCertificateID( const QString& _certificateID );
        QString certificateID() const;
        void setCertificate( const dm::TT__BinaryData& _certificate );
        dm::TT__BinaryData certificate() const;
        void setPrivateKey( const dm::TT__BinaryData& _privateKey );
        dm::TT__BinaryData privateKey() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__CertificateWithPrivateKey();
        ~TT__CertificateWithPrivateKey();

    public:
        TT__CertificateWithPrivateKey( const TT__CertificateWithPrivateKey& );
        TT__CertificateWithPrivateKey &operator=( const TT__CertificateWithPrivateKey& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetHostname
    {
    public:
        void setName( const QString& _name );
        QString name() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetHostname();
        ~TDS__SetHostname();

    public:
        TDS__SetHostname( const TDS__SetHostname& );
        TDS__SetHostname &operator=( const TDS__SetHostname& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__CapabilitiesExtension2
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__CapabilitiesExtension2();
        ~TT__CapabilitiesExtension2();

    public:
        TT__CapabilitiesExtension2( const TT__CapabilitiesExtension2& );
        TT__CapabilitiesExtension2 &operator=( const TT__CapabilitiesExtension2& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__RemoveScopes
    {
    public:
        void setScopeItem( const QStringList& _scopeItem );
        QStringList scopeItem() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__RemoveScopes();
        ~TDS__RemoveScopes();

    public:
        TDS__RemoveScopes( const TDS__RemoveScopes& );
        TDS__RemoveScopes &operator=( const TDS__RemoveScopes& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__AddIPAddressFilter
    {
    public:
        void setIPAddressFilter( const dm::TT__IPAddressFilter& _iPAddressFilter );
        dm::TT__IPAddressFilter iPAddressFilter() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__AddIPAddressFilter();
        ~TDS__AddIPAddressFilter();

    public:
        TDS__AddIPAddressFilter( const TDS__AddIPAddressFilter& );
        TDS__AddIPAddressFilter &operator=( const TDS__AddIPAddressFilter& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetDiscoveryMode
    {
    public:
        void setDiscoveryMode( const dm::TT__DiscoveryMode& _discoveryMode );
        dm::TT__DiscoveryMode discoveryMode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetDiscoveryMode();
        ~TDS__SetDiscoveryMode();

    public:
        TDS__SetDiscoveryMode( const TDS__SetDiscoveryMode& );
        TDS__SetDiscoveryMode &operator=( const TDS__SetDiscoveryMode& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__SystemLogUriList
    {
    public:
        void setSystemLog( const QList< dm::TT__SystemLogUri >& _systemLog );
        QList< dm::TT__SystemLogUri > systemLog() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SystemLogUriList();
        ~TT__SystemLogUriList();

    public:
        TT__SystemLogUriList( const TT__SystemLogUriList& );
        TT__SystemLogUriList &operator=( const TT__SystemLogUriList& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetNetworkDefaultGateway
    {
    public:
        void setIPv4Address( const QList< dm::TT__IPv4Address >& _iPv4Address );
        QList< dm::TT__IPv4Address > iPv4Address() const;
        void setIPv6Address( const QList< dm::TT__IPv6Address >& _iPv6Address );
        QList< dm::TT__IPv6Address > iPv6Address() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetNetworkDefaultGateway();
        ~TDS__SetNetworkDefaultGateway();

    public:
        TDS__SetNetworkDefaultGateway( const TDS__SetNetworkDefaultGateway& );
        TDS__SetNetworkDefaultGateway &operator=( const TDS__SetNetworkDefaultGateway& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetServiceCapabilitiesResponse
    {
    public:
        void setCapabilities( const dm::TDS__DeviceServiceCapabilities& _capabilities );
        dm::TDS__DeviceServiceCapabilities capabilities() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetServiceCapabilitiesResponse();
        ~TDS__GetServiceCapabilitiesResponse();

    public:
        TDS__GetServiceCapabilitiesResponse( const TDS__GetServiceCapabilitiesResponse& );
        TDS__GetServiceCapabilitiesResponse &operator=( const TDS__GetServiceCapabilitiesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__NetworkCapabilities
    {
    public:
        void setIPFilter( bool _iPFilter );
        bool iPFilter() const;
        void setZeroConfiguration( bool _zeroConfiguration );
        bool zeroConfiguration() const;
        void setIPVersion6( bool _iPVersion6 );
        bool iPVersion6() const;
        void setDynDNS( bool _dynDNS );
        bool dynDNS() const;
        void setDot11Configuration( bool _dot11Configuration );
        bool dot11Configuration() const;
        void setDot1XConfigurations( int _dot1XConfigurations );
        int dot1XConfigurations() const;
        void setHostnameFromDHCP( bool _hostnameFromDHCP );
        bool hostnameFromDHCP() const;
        void setNTP( int _nTP );
        int nTP() const;
        void setDHCPv6( bool _dHCPv6 );
        bool dHCPv6() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__NetworkCapabilities();
        ~TDS__NetworkCapabilities();

    public:
        TDS__NetworkCapabilities( const TDS__NetworkCapabilities& );
        TDS__NetworkCapabilities &operator=( const TDS__NetworkCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__LoadCertificatesResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__LoadCertificatesResponse();
        ~TDS__LoadCertificatesResponse();

};
} // namespace end

namespace dm {
    class TDS__RestoreSystem
    {
    public:
        void setBackupFiles( const QList< dm::TT__BackupFile >& _backupFiles );
        QList< dm::TT__BackupFile > backupFiles() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__RestoreSystem();
        ~TDS__RestoreSystem();

    public:
        TDS__RestoreSystem( const TDS__RestoreSystem& );
        TDS__RestoreSystem &operator=( const TDS__RestoreSystem& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    /**
        A pane layout describes one Video window of a display. It links a pane
        configuration to a region of the screen.
     */
    class TT__PaneLayout
    {
    public:
        void setPane( const dm::TT__ReferenceToken& _pane );
        dm::TT__ReferenceToken pane() const;
        void setArea( const dm::TT__Rectangle& _area );
        dm::TT__Rectangle area() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__PaneLayout();
        ~TT__PaneLayout();

    public:
        TT__PaneLayout( const TT__PaneLayout& );
        TT__PaneLayout &operator=( const TT__PaneLayout& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__ImagingSettingsExtension20
    {
    public:
        void setImageStabilization( const dm::TT__ImageStabilization& _imageStabilization );
        dm::TT__ImageStabilization imageStabilization() const;
        void setExtension( const dm::TT__ImagingSettingsExtension202& _extension );
        dm::TT__ImagingSettingsExtension202 extension() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ImagingSettingsExtension20();
        ~TT__ImagingSettingsExtension20();

    public:
        TT__ImagingSettingsExtension20( const TT__ImagingSettingsExtension20& );
        TT__ImagingSettingsExtension20 &operator=( const TT__ImagingSettingsExtension20& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetNTPResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetNTPResponse();
        ~TDS__SetNTPResponse();

};
} // namespace end

namespace dm {
    class TDS__GetSystemLogResponse
    {
    public:
        void setSystemLog( const dm::TT__SystemLog& _systemLog );
        dm::TT__SystemLog systemLog() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetSystemLogResponse();
        ~TDS__GetSystemLogResponse();

    public:
        TDS__GetSystemLogResponse( const TDS__GetSystemLogResponse& );
        TDS__GetSystemLogResponse &operator=( const TDS__GetSystemLogResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__DateTimeRange
    {
    public:
        void setFrom( const KDDateTime& _from );
        KDDateTime from() const;
        void setUntil( const KDDateTime& _until );
        KDDateTime until() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__DateTimeRange();
        ~TT__DateTimeRange();

    public:
        TT__DateTimeRange( const TT__DateTimeRange& );
        TT__DateTimeRange &operator=( const TT__DateTimeRange& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__RelayOutputSettings
    {
    public:
        void setMode( const dm::TT__RelayMode& _mode );
        dm::TT__RelayMode mode() const;
        void setDelayTime( const QString& _delayTime );
        QString delayTime() const;
        void setIdleState( const dm::TT__RelayIdleState& _idleState );
        dm::TT__RelayIdleState idleState() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__RelayOutputSettings();
        ~TT__RelayOutputSettings();

    public:
        TT__RelayOutputSettings( const TT__RelayOutputSettings& );
        TT__RelayOutputSettings &operator=( const TT__RelayOutputSettings& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetRemoteDiscoveryMode
    {
    public:
        void setRemoteDiscoveryMode( const dm::TT__DiscoveryMode& _remoteDiscoveryMode );
        dm::TT__DiscoveryMode remoteDiscoveryMode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetRemoteDiscoveryMode();
        ~TDS__SetRemoteDiscoveryMode();

    public:
        TDS__SetRemoteDiscoveryMode( const TDS__SetRemoteDiscoveryMode& );
        TDS__SetRemoteDiscoveryMode &operator=( const TDS__SetRemoteDiscoveryMode& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetStorageConfiguration
    {
    public:
        void setToken( const dm::TT__ReferenceToken& _token );
        dm::TT__ReferenceToken token() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetStorageConfiguration();
        ~TDS__GetStorageConfiguration();

    public:
        TDS__GetStorageConfiguration( const TDS__GetStorageConfiguration& );
        TDS__GetStorageConfiguration &operator=( const TDS__GetStorageConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetWsdlUrlResponse
    {
    public:
        void setWsdlUrl( const QString& _wsdlUrl );
        QString wsdlUrl() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetWsdlUrlResponse();
        ~TDS__GetWsdlUrlResponse();

    public:
        TDS__GetWsdlUrlResponse( const TDS__GetWsdlUrlResponse& );
        TDS__GetWsdlUrlResponse &operator=( const TDS__GetWsdlUrlResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetClientCertificateMode
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetClientCertificateMode();
        ~TDS__GetClientCertificateMode();

};
} // namespace end

namespace dm {
    class TDS__GetDot11CapabilitiesResponse
    {
    public:
        void setCapabilities( const dm::TT__Dot11Capabilities& _capabilities );
        dm::TT__Dot11Capabilities capabilities() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDot11CapabilitiesResponse();
        ~TDS__GetDot11CapabilitiesResponse();

    public:
        TDS__GetDot11CapabilitiesResponse( const TDS__GetDot11CapabilitiesResponse& );
        TDS__GetDot11CapabilitiesResponse &operator=( const TDS__GetDot11CapabilitiesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetRelayOutputState
    {
    public:
        void setRelayOutputToken( const dm::TT__ReferenceToken& _relayOutputToken );
        dm::TT__ReferenceToken relayOutputToken() const;
        void setLogicalState( const dm::TT__RelayLogicalState& _logicalState );
        dm::TT__RelayLogicalState logicalState() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetRelayOutputState();
        ~TDS__SetRelayOutputState();

    public:
        TDS__SetRelayOutputState( const TDS__SetRelayOutputState& );
        TDS__SetRelayOutputState &operator=( const TDS__SetRelayOutputState& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetClientCertificateMode
    {
    public:
        void setEnabled( bool _enabled );
        bool enabled() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetClientCertificateMode();
        ~TDS__SetClientCertificateMode();

    public:
        TDS__SetClientCertificateMode( const TDS__SetClientCertificateMode& );
        TDS__SetClientCertificateMode &operator=( const TDS__SetClientCertificateMode& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__DeviceCapabilitiesExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__DeviceCapabilitiesExtension();
        ~TT__DeviceCapabilitiesExtension();

    public:
        TT__DeviceCapabilitiesExtension( const TT__DeviceCapabilitiesExtension& );
        TT__DeviceCapabilitiesExtension &operator=( const TT__DeviceCapabilitiesExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__LayoutExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__LayoutExtension();
        ~TT__LayoutExtension();

    public:
        TT__LayoutExtension( const TT__LayoutExtension& );
        TT__LayoutExtension &operator=( const TT__LayoutExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    /**
        Type describing the ImagingSettings of a VideoSource. The supported
        options and ranges can be obtained via the GetOptions command.
     */
    class TT__ImagingSettings20
    {
    public:
        void setBacklightCompensation( const dm::TT__BacklightCompensation20& _backlightCompensation );
        dm::TT__BacklightCompensation20 backlightCompensation() const;
        void setBrightness( float _brightness );
        float brightness() const;
        void setColorSaturation( float _colorSaturation );
        float colorSaturation() const;
        void setContrast( float _contrast );
        float contrast() const;
        void setExposure( const dm::TT__Exposure20& _exposure );
        dm::TT__Exposure20 exposure() const;
        void setFocus( const dm::TT__FocusConfiguration20& _focus );
        dm::TT__FocusConfiguration20 focus() const;
        void setIrCutFilter( const dm::TT__IrCutFilterMode& _irCutFilter );
        dm::TT__IrCutFilterMode irCutFilter() const;
        void setSharpness( float _sharpness );
        float sharpness() const;
        void setWideDynamicRange( const dm::TT__WideDynamicRange20& _wideDynamicRange );
        dm::TT__WideDynamicRange20 wideDynamicRange() const;
        void setWhiteBalance( const dm::TT__WhiteBalance20& _whiteBalance );
        dm::TT__WhiteBalance20 whiteBalance() const;
        void setExtension( const dm::TT__ImagingSettingsExtension20& _extension );
        dm::TT__ImagingSettingsExtension20 extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ImagingSettings20();
        ~TT__ImagingSettings20();

    public:
        TT__ImagingSettings20( const TT__ImagingSettings20& );
        TT__ImagingSettings20 &operator=( const TT__ImagingSettings20& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__SecurityCapabilitiesExtension
    {
    public:
        void setTLS1_0( bool _tLS1_0 );
        bool tLS1_0() const;
        void setExtension( const dm::TT__SecurityCapabilitiesExtension2& _extension );
        dm::TT__SecurityCapabilitiesExtension2 extension() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SecurityCapabilitiesExtension();
        ~TT__SecurityCapabilitiesExtension();

    public:
        TT__SecurityCapabilitiesExtension( const TT__SecurityCapabilitiesExtension& );
        TT__SecurityCapabilitiesExtension &operator=( const TT__SecurityCapabilitiesExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__OSDPosConfiguration
    {
    public:
        void setType( const QString& _type );
        QString type() const;
        void setPos( const dm::TT__Vector& _pos );
        dm::TT__Vector pos() const;
        void setExtension( const dm::TT__OSDPosConfigurationExtension& _extension );
        dm::TT__OSDPosConfigurationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__OSDPosConfiguration();
        ~TT__OSDPosConfiguration();

    public:
        TT__OSDPosConfiguration( const TT__OSDPosConfiguration& );
        TT__OSDPosConfiguration &operator=( const TT__OSDPosConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetEndpointReference
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetEndpointReference();
        ~TDS__GetEndpointReference();

};
} // namespace end

namespace dm {
    class TDS__SetRelayOutputStateResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetRelayOutputStateResponse();
        ~TDS__SetRelayOutputStateResponse();

};
} // namespace end

namespace dm {
    class TDS__Extension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__Extension();
        ~TDS__Extension();

    public:
        TDS__Extension( const TDS__Extension& );
        TDS__Extension &operator=( const TDS__Extension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__SecurityCapabilities
    {
    public:
        void setTLS1_1( bool _tLS1_1 );
        bool tLS1_1() const;
        void setTLS1_2( bool _tLS1_2 );
        bool tLS1_2() const;
        void setOnboardKeyGeneration( bool _onboardKeyGeneration );
        bool onboardKeyGeneration() const;
        void setAccessPolicyConfig( bool _accessPolicyConfig );
        bool accessPolicyConfig() const;
        void setX_509Token( bool _x_509Token );
        bool x_509Token() const;
        void setSAMLToken( bool _sAMLToken );
        bool sAMLToken() const;
        void setKerberosToken( bool _kerberosToken );
        bool kerberosToken() const;
        void setRELToken( bool _rELToken );
        bool rELToken() const;
        void setExtension( const dm::TT__SecurityCapabilitiesExtension& _extension );
        dm::TT__SecurityCapabilitiesExtension extension() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SecurityCapabilities();
        ~TT__SecurityCapabilities();

    public:
        TT__SecurityCapabilities( const TT__SecurityCapabilities& );
        TT__SecurityCapabilities &operator=( const TT__SecurityCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__AddScopes
    {
    public:
        void setScopeItem( const QStringList& _scopeItem );
        QStringList scopeItem() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__AddScopes();
        ~TDS__AddScopes();

    public:
        TDS__AddScopes( const TDS__AddScopes& );
        TDS__AddScopes &operator=( const TDS__AddScopes& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Dot1XConfiguration
    {
    public:
        void setDot1XConfigurationToken( const dm::TT__ReferenceToken& _dot1XConfigurationToken );
        dm::TT__ReferenceToken dot1XConfigurationToken() const;
        void setIdentity( const QString& _identity );
        QString identity() const;
        void setAnonymousID( const QString& _anonymousID );
        QString anonymousID() const;
        void setEAPMethod( int _eAPMethod );
        int eAPMethod() const;
        void setCACertificateID( const QStringList& _cACertificateID );
        QStringList cACertificateID() const;
        void setEAPMethodConfiguration( const dm::TT__EAPMethodConfiguration& _eAPMethodConfiguration );
        dm::TT__EAPMethodConfiguration eAPMethodConfiguration() const;
        void setExtension( const dm::TT__Dot1XConfigurationExtension& _extension );
        dm::TT__Dot1XConfigurationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Dot1XConfiguration();
        ~TT__Dot1XConfiguration();

    public:
        TT__Dot1XConfiguration( const TT__Dot1XConfiguration& );
        TT__Dot1XConfiguration &operator=( const TT__Dot1XConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__PTZSpaces
    {
    public:
        void setAbsolutePanTiltPositionSpace( const QList< dm::TT__Space2DDescription >& _absolutePanTiltPositionSpace );
        QList< dm::TT__Space2DDescription > absolutePanTiltPositionSpace() const;
        void setAbsoluteZoomPositionSpace( const QList< dm::TT__Space1DDescription >& _absoluteZoomPositionSpace );
        QList< dm::TT__Space1DDescription > absoluteZoomPositionSpace() const;
        void setRelativePanTiltTranslationSpace( const QList< dm::TT__Space2DDescription >& _relativePanTiltTranslationSpace );
        QList< dm::TT__Space2DDescription > relativePanTiltTranslationSpace() const;
        void setRelativeZoomTranslationSpace( const QList< dm::TT__Space1DDescription >& _relativeZoomTranslationSpace );
        QList< dm::TT__Space1DDescription > relativeZoomTranslationSpace() const;
        void setContinuousPanTiltVelocitySpace( const QList< dm::TT__Space2DDescription >& _continuousPanTiltVelocitySpace );
        QList< dm::TT__Space2DDescription > continuousPanTiltVelocitySpace() const;
        void setContinuousZoomVelocitySpace( const QList< dm::TT__Space1DDescription >& _continuousZoomVelocitySpace );
        QList< dm::TT__Space1DDescription > continuousZoomVelocitySpace() const;
        void setPanTiltSpeedSpace( const QList< dm::TT__Space1DDescription >& _panTiltSpeedSpace );
        QList< dm::TT__Space1DDescription > panTiltSpeedSpace() const;
        void setZoomSpeedSpace( const QList< dm::TT__Space1DDescription >& _zoomSpeedSpace );
        QList< dm::TT__Space1DDescription > zoomSpeedSpace() const;
        void setExtension( const dm::TT__PTZSpacesExtension& _extension );
        dm::TT__PTZSpacesExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__PTZSpaces();
        ~TT__PTZSpaces();

    public:
        TT__PTZSpaces( const TT__PTZSpaces& );
        TT__PTZSpaces &operator=( const TT__PTZSpaces& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDot1XConfiguration
    {
    public:
        void setDot1XConfigurationToken( const dm::TT__ReferenceToken& _dot1XConfigurationToken );
        dm::TT__ReferenceToken dot1XConfigurationToken() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDot1XConfiguration();
        ~TDS__GetDot1XConfiguration();

    public:
        TDS__GetDot1XConfiguration( const TDS__GetDot1XConfiguration& );
        TDS__GetDot1XConfiguration &operator=( const TDS__GetDot1XConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDPAddressesResponse
    {
    public:
        void setDPAddress( const QList< dm::TT__NetworkHost >& _dPAddress );
        QList< dm::TT__NetworkHost > dPAddress() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDPAddressesResponse();
        ~TDS__GetDPAddressesResponse();

    public:
        TDS__GetDPAddressesResponse( const TDS__GetDPAddressesResponse& );
        TDS__GetDPAddressesResponse &operator=( const TDS__GetDPAddressesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__CreateCertificateResponse
    {
    public:
        void setNvtCertificate( const dm::TT__Certificate& _nvtCertificate );
        dm::TT__Certificate nvtCertificate() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__CreateCertificateResponse();
        ~TDS__CreateCertificateResponse();

    public:
        TDS__CreateCertificateResponse( const TDS__CreateCertificateResponse& );
        TDS__CreateCertificateResponse &operator=( const TDS__CreateCertificateResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetIPAddressFilterResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetIPAddressFilterResponse();
        ~TDS__SetIPAddressFilterResponse();

};
} // namespace end

namespace dm {
    class TT__ReceiverCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setRTP_Multicast( bool _rTP_Multicast );
        bool rTP_Multicast() const;
        void setRTP_TCP( bool _rTP_TCP );
        bool rTP_TCP() const;
        void setRTP_RTSP_TCP( bool _rTP_RTSP_TCP );
        bool rTP_RTSP_TCP() const;
        void setSupportedReceivers( int _supportedReceivers );
        int supportedReceivers() const;
        void setMaximumRTSPURILength( int _maximumRTSPURILength );
        int maximumRTSPURILength() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ReceiverCapabilities();
        ~TT__ReceiverCapabilities();

    public:
        TT__ReceiverCapabilities( const TT__ReceiverCapabilities& );
        TT__ReceiverCapabilities &operator=( const TT__ReceiverCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__AttachmentData
    {
    public:
        void setInclude( const dm::XOP__Include& _include );
        dm::XOP__Include include() const;
        void setContentType( const dm::XMIME__ContentType& _contentType );
        dm::XMIME__ContentType contentType() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__AttachmentData();
        ~TT__AttachmentData();

    public:
        TT__AttachmentData( const TT__AttachmentData& );
        TT__AttachmentData &operator=( const TT__AttachmentData& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkProtocolExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkProtocolExtension();
        ~TT__NetworkProtocolExtension();

    public:
        TT__NetworkProtocolExtension( const TT__NetworkProtocolExtension& );
        TT__NetworkProtocolExtension &operator=( const TT__NetworkProtocolExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__ReplayCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__ReplayCapabilities();
        ~TT__ReplayCapabilities();

    public:
        TT__ReplayCapabilities( const TT__ReplayCapabilities& );
        TT__ReplayCapabilities &operator=( const TT__ReplayCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__VideoSourceExtension2
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__VideoSourceExtension2();
        ~TT__VideoSourceExtension2();

    public:
        TT__VideoSourceExtension2( const TT__VideoSourceExtension2& );
        TT__VideoSourceExtension2 &operator=( const TT__VideoSourceExtension2& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetStorageConfigurationsResponse
    {
    public:
        void setStorageConfigurations( const QList< dm::TDS__StorageConfiguration >& _storageConfigurations );
        QList< dm::TDS__StorageConfiguration > storageConfigurations() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetStorageConfigurationsResponse();
        ~TDS__GetStorageConfigurationsResponse();

    public:
        TDS__GetStorageConfigurationsResponse( const TDS__GetStorageConfigurationsResponse& );
        TDS__GetStorageConfigurationsResponse &operator=( const TDS__GetStorageConfigurationsResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__WhiteBalance20Extension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__WhiteBalance20Extension();
        ~TT__WhiteBalance20Extension();

    public:
        TT__WhiteBalance20Extension( const TT__WhiteBalance20Extension& );
        TT__WhiteBalance20Extension &operator=( const TT__WhiteBalance20Extension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__HostnameInformation
    {
    public:
        void setFromDHCP( bool _fromDHCP );
        bool fromDHCP() const;
        void setName( const QString& _name );
        QString name() const;
        void setExtension( const dm::TT__HostnameInformationExtension& _extension );
        dm::TT__HostnameInformationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__HostnameInformation();
        ~TT__HostnameInformation();

    public:
        TT__HostnameInformation( const TT__HostnameInformation& );
        TT__HostnameInformation &operator=( const TT__HostnameInformation& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__IPv4NetworkInterface
    {
    public:
        void setEnabled( bool _enabled );
        bool enabled() const;
        void setConfig( const dm::TT__IPv4Configuration& _config );
        dm::TT__IPv4Configuration config() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IPv4NetworkInterface();
        ~TT__IPv4NetworkInterface();

    public:
        TT__IPv4NetworkInterface( const TT__IPv4NetworkInterface& );
        TT__IPv4NetworkInterface &operator=( const TT__IPv4NetworkInterface& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetScopes
    {
    public:
        void setScopes( const QStringList& _scopes );
        QStringList scopes() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetScopes();
        ~TDS__SetScopes();

    public:
        TDS__SetScopes( const TDS__SetScopes& );
        TDS__SetScopes &operator=( const TDS__SetScopes& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__OSDReference
    {
    public:
        void setValue( const dm::TT__ReferenceToken& _value );
        dm::TT__ReferenceToken value() const;
        TT__OSDReference( const dm::TT__ReferenceToken& value );
        operator dm::TT__ReferenceToken() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__OSDReference();
        ~TT__OSDReference();

    public:
        TT__OSDReference( const TT__OSDReference& );
        TT__OSDReference &operator=( const TT__OSDReference& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDynamicDNSResponse
    {
    public:
        void setDynamicDNSInformation( const dm::TT__DynamicDNSInformation& _dynamicDNSInformation );
        dm::TT__DynamicDNSInformation dynamicDNSInformation() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDynamicDNSResponse();
        ~TDS__GetDynamicDNSResponse();

    public:
        TDS__GetDynamicDNSResponse( const TDS__GetDynamicDNSResponse& );
        TDS__GetDynamicDNSResponse &operator=( const TDS__GetDynamicDNSResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__CertificateStatus
    {
    public:
        void setCertificateID( const QString& _certificateID );
        QString certificateID() const;
        void setStatus( bool _status );
        bool status() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__CertificateStatus();
        ~TT__CertificateStatus();

    public:
        TT__CertificateStatus( const TT__CertificateStatus& );
        TT__CertificateStatus &operator=( const TT__CertificateStatus& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetRemoteDiscoveryModeResponse
    {
    public:
        void setRemoteDiscoveryMode( const dm::TT__DiscoveryMode& _remoteDiscoveryMode );
        dm::TT__DiscoveryMode remoteDiscoveryMode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetRemoteDiscoveryModeResponse();
        ~TDS__GetRemoteDiscoveryModeResponse();

    public:
        TDS__GetRemoteDiscoveryModeResponse( const TDS__GetRemoteDiscoveryModeResponse& );
        TDS__GetRemoteDiscoveryModeResponse &operator=( const TDS__GetRemoteDiscoveryModeResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    /**
        Base class for physical entities like inputs and outputs.
     */
    class TT__DeviceEntity
    {
    public:
        void setToken( const dm::TT__ReferenceToken& _token );
        dm::TT__ReferenceToken token() const;
        virtual KDSoapValue serialize( const QString& valueName ) const;
        virtual void deserialize( const KDSoapValue& mainValue );
        TT__DeviceEntity();
        virtual ~TT__DeviceEntity();
        virtual dm::TT__DeviceEntity *_kd_clone() const;

    public:
        TT__DeviceEntity( const TT__DeviceEntity& );
        TT__DeviceEntity &operator=( const TT__DeviceEntity& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDeviceInformation
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDeviceInformation();
        ~TDS__GetDeviceInformation();

};
} // namespace end

namespace dm {
    class TDS__DeleteDot1XConfigurationResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__DeleteDot1XConfigurationResponse();
        ~TDS__DeleteDot1XConfigurationResponse();

};
} // namespace end

namespace dm {
    class TDS__DeleteStorageConfiguration
    {
    public:
        void setToken( const dm::TT__ReferenceToken& _token );
        dm::TT__ReferenceToken token() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__DeleteStorageConfiguration();
        ~TDS__DeleteStorageConfiguration();

    public:
        TDS__DeleteStorageConfiguration( const TDS__DeleteStorageConfiguration& );
        TDS__DeleteStorageConfiguration &operator=( const TDS__DeleteStorageConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__EapMethodExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__EapMethodExtension();
        ~TT__EapMethodExtension();

    public:
        TT__EapMethodExtension( const TT__EapMethodExtension& );
        TT__EapMethodExtension &operator=( const TT__EapMethodExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__CreateDot1XConfigurationResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__CreateDot1XConfigurationResponse();
        ~TDS__CreateDot1XConfigurationResponse();

};
} // namespace end

namespace dm {
    class TDS__SetDNSResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetDNSResponse();
        ~TDS__SetDNSResponse();

};
} // namespace end

namespace dm {
    class TDS__SetZeroConfiguration
    {
    public:
        void setInterfaceToken( const dm::TT__ReferenceToken& _interfaceToken );
        dm::TT__ReferenceToken interfaceToken() const;
        void setEnabled( bool _enabled );
        bool enabled() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetZeroConfiguration();
        ~TDS__SetZeroConfiguration();

    public:
        TDS__SetZeroConfiguration( const TDS__SetZeroConfiguration& );
        TDS__SetZeroConfiguration &operator=( const TDS__SetZeroConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkInterfaceSetConfiguration
    {
    public:
        void setEnabled( bool _enabled );
        bool enabled() const;
        void setLink( const dm::TT__NetworkInterfaceConnectionSetting& _link );
        dm::TT__NetworkInterfaceConnectionSetting link() const;
        void setMTU( int _mTU );
        int mTU() const;
        void setIPv4( const dm::TT__IPv4NetworkInterfaceSetConfiguration& _iPv4 );
        dm::TT__IPv4NetworkInterfaceSetConfiguration iPv4() const;
        void setIPv6( const dm::TT__IPv6NetworkInterfaceSetConfiguration& _iPv6 );
        dm::TT__IPv6NetworkInterfaceSetConfiguration iPv6() const;
        void setExtension( const dm::TT__NetworkInterfaceSetConfigurationExtension& _extension );
        dm::TT__NetworkInterfaceSetConfigurationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkInterfaceSetConfiguration();
        ~TT__NetworkInterfaceSetConfiguration();

    public:
        TT__NetworkInterfaceSetConfiguration( const TT__NetworkInterfaceSetConfiguration& );
        TT__NetworkInterfaceSetConfiguration &operator=( const TT__NetworkInterfaceSetConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__IPAddressFilterExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IPAddressFilterExtension();
        ~TT__IPAddressFilterExtension();

    public:
        TT__IPAddressFilterExtension( const TT__IPAddressFilterExtension& );
        TT__IPAddressFilterExtension &operator=( const TT__IPAddressFilterExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetNTP
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetNTP();
        ~TDS__GetNTP();

};
} // namespace end

namespace dm {
    class TT__IPv6ConfigurationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IPv6ConfigurationExtension();
        ~TT__IPv6ConfigurationExtension();

    public:
        TT__IPv6ConfigurationExtension( const TT__IPv6ConfigurationExtension& );
        TT__IPv6ConfigurationExtension &operator=( const TT__IPv6ConfigurationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetSystemFactoryDefaultResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetSystemFactoryDefaultResponse();
        ~TDS__SetSystemFactoryDefaultResponse();

};
} // namespace end

namespace dm {
    class TDS__GetCertificatesStatusResponse
    {
    public:
        void setCertificateStatus( const QList< dm::TT__CertificateStatus >& _certificateStatus );
        QList< dm::TT__CertificateStatus > certificateStatus() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetCertificatesStatusResponse();
        ~TDS__GetCertificatesStatusResponse();

    public:
        TDS__GetCertificatesStatusResponse( const TDS__GetCertificatesStatusResponse& );
        TDS__GetCertificatesStatusResponse &operator=( const TDS__GetCertificatesStatusResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__DeviceServiceCapabilities
    {
    public:
        void setNetwork( const dm::TDS__NetworkCapabilities& _network );
        dm::TDS__NetworkCapabilities network() const;
        void setSecurity( const dm::TDS__SecurityCapabilities& _security );
        dm::TDS__SecurityCapabilities security() const;
        void setSystem( const dm::TDS__SystemCapabilities& _system );
        dm::TDS__SystemCapabilities system() const;
        void setMisc( const dm::TDS__MiscCapabilities& _misc );
        dm::TDS__MiscCapabilities misc() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__DeviceServiceCapabilities();
        ~TDS__DeviceServiceCapabilities();

    public:
        TDS__DeviceServiceCapabilities( const TDS__DeviceServiceCapabilities& );
        TDS__DeviceServiceCapabilities &operator=( const TDS__DeviceServiceCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetAccessPolicyResponse
    {
    public:
        void setPolicyFile( const dm::TT__BinaryData& _policyFile );
        dm::TT__BinaryData policyFile() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetAccessPolicyResponse();
        ~TDS__GetAccessPolicyResponse();

    public:
        TDS__GetAccessPolicyResponse( const TDS__GetAccessPolicyResponse& );
        TDS__GetAccessPolicyResponse &operator=( const TDS__GetAccessPolicyResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetNetworkProtocolsResponse
    {
    public:
        void setNetworkProtocols( const QList< dm::TT__NetworkProtocol >& _networkProtocols );
        QList< dm::TT__NetworkProtocol > networkProtocols() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetNetworkProtocolsResponse();
        ~TDS__GetNetworkProtocolsResponse();

    public:
        TDS__GetNetworkProtocolsResponse( const TDS__GetNetworkProtocolsResponse& );
        TDS__GetNetworkProtocolsResponse &operator=( const TDS__GetNetworkProtocolsResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetRemoteDiscoveryMode
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetRemoteDiscoveryMode();
        ~TDS__GetRemoteDiscoveryMode();

};
} // namespace end

namespace dm {
    class TT__IOCapabilitiesExtension
    {
    public:
        void setAuxiliary( bool _auxiliary );
        bool auxiliary() const;
        void setAuxiliaryCommands( const QList< dm::TT__AuxiliaryData >& _auxiliaryCommands );
        QList< dm::TT__AuxiliaryData > auxiliaryCommands() const;
        void setExtension( const dm::TT__IOCapabilitiesExtension2& _extension );
        dm::TT__IOCapabilitiesExtension2 extension() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IOCapabilitiesExtension();
        ~TT__IOCapabilitiesExtension();

    public:
        TT__IOCapabilitiesExtension( const TT__IOCapabilitiesExtension& );
        TT__IOCapabilitiesExtension &operator=( const TT__IOCapabilitiesExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetNetworkInterfacesResponse
    {
    public:
        void setRebootNeeded( bool _rebootNeeded );
        bool rebootNeeded() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetNetworkInterfacesResponse();
        ~TDS__SetNetworkInterfacesResponse();

    public:
        TDS__SetNetworkInterfacesResponse( const TDS__SetNetworkInterfacesResponse& );
        TDS__SetNetworkInterfacesResponse &operator=( const TDS__SetNetworkInterfacesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetServices
    {
    public:
        void setIncludeCapability( bool _includeCapability );
        bool includeCapability() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetServices();
        ~TDS__GetServices();

    public:
        TDS__GetServices( const TDS__GetServices& );
        TDS__GetServices &operator=( const TDS__GetServices& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkZeroConfigurationExtension
    {
    public:
        void setAdditional( const QList< dm::TT__NetworkZeroConfiguration >& _additional );
        QList< dm::TT__NetworkZeroConfiguration > additional() const;
        void setExtension( const dm::TT__NetworkZeroConfigurationExtension2& _extension );
        dm::TT__NetworkZeroConfigurationExtension2 extension() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkZeroConfigurationExtension();
        ~TT__NetworkZeroConfigurationExtension();

    public:
        TT__NetworkZeroConfigurationExtension( const TT__NetworkZeroConfigurationExtension& );
        TT__NetworkZeroConfigurationExtension &operator=( const TT__NetworkZeroConfigurationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__IPAddressFilter
    {
    public:
        void setType( const dm::TT__IPAddressFilterType& _type );
        dm::TT__IPAddressFilterType type() const;
        void setIPv4Address( const QList< dm::TT__PrefixedIPv4Address >& _iPv4Address );
        QList< dm::TT__PrefixedIPv4Address > iPv4Address() const;
        void setIPv6Address( const QList< dm::TT__PrefixedIPv6Address >& _iPv6Address );
        QList< dm::TT__PrefixedIPv6Address > iPv6Address() const;
        void setExtension( const dm::TT__IPAddressFilterExtension& _extension );
        dm::TT__IPAddressFilterExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IPAddressFilter();
        ~TT__IPAddressFilter();

    public:
        TT__IPAddressFilter( const TT__IPAddressFilter& );
        TT__IPAddressFilter &operator=( const TT__IPAddressFilter& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetSystemSupportInformationResponse
    {
    public:
        void setSupportInformation( const dm::TT__SupportInformation& _supportInformation );
        dm::TT__SupportInformation supportInformation() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetSystemSupportInformationResponse();
        ~TDS__GetSystemSupportInformationResponse();

    public:
        TDS__GetSystemSupportInformationResponse( const TDS__GetSystemSupportInformationResponse& );
        TDS__GetSystemSupportInformationResponse &operator=( const TDS__GetSystemSupportInformationResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkCapabilitiesExtension
    {
    public:
        void setDot11Configuration( bool _dot11Configuration );
        bool dot11Configuration() const;
        void setExtension( const dm::TT__NetworkCapabilitiesExtension2& _extension );
        dm::TT__NetworkCapabilitiesExtension2 extension() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkCapabilitiesExtension();
        ~TT__NetworkCapabilitiesExtension();

    public:
        TT__NetworkCapabilitiesExtension( const TT__NetworkCapabilitiesExtension& );
        TT__NetworkCapabilitiesExtension &operator=( const TT__NetworkCapabilitiesExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__PrefixedIPv4Address
    {
    public:
        void setAddress( const dm::TT__IPv4Address& _address );
        dm::TT__IPv4Address address() const;
        void setPrefixLength( int _prefixLength );
        int prefixLength() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__PrefixedIPv4Address();
        ~TT__PrefixedIPv4Address();

    public:
        TT__PrefixedIPv4Address( const TT__PrefixedIPv4Address& );
        TT__PrefixedIPv4Address &operator=( const TT__PrefixedIPv4Address& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__OSDPosConfigurationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__OSDPosConfigurationExtension();
        ~TT__OSDPosConfigurationExtension();

    public:
        TT__OSDPosConfigurationExtension( const TT__OSDPosConfigurationExtension& );
        TT__OSDPosConfigurationExtension &operator=( const TT__OSDPosConfigurationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__SupportInformation
    {
    public:
        void setBinary( const dm::TT__AttachmentData& _binary );
        dm::TT__AttachmentData binary() const;
        void setString( const QString& _string );
        QString string() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SupportInformation();
        ~TT__SupportInformation();

    public:
        TT__SupportInformation( const TT__SupportInformation& );
        TT__SupportInformation &operator=( const TT__SupportInformation& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetRemoteUser
    {
    public:
        void setRemoteUser( const dm::TT__RemoteUser& _remoteUser );
        dm::TT__RemoteUser remoteUser() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetRemoteUser();
        ~TDS__SetRemoteUser();

    public:
        TDS__SetRemoteUser( const TDS__SetRemoteUser& );
        TDS__SetRemoteUser &operator=( const TDS__SetRemoteUser& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__IPv6NetworkInterface
    {
    public:
        void setEnabled( bool _enabled );
        bool enabled() const;
        void setConfig( const dm::TT__IPv6Configuration& _config );
        dm::TT__IPv6Configuration config() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IPv6NetworkInterface();
        ~TT__IPv6NetworkInterface();

    public:
        TT__IPv6NetworkInterface( const TT__IPv6NetworkInterface& );
        TT__IPv6NetworkInterface &operator=( const TT__IPv6NetworkInterface& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__CreateStorageConfigurationResponse
    {
    public:
        void setToken( const dm::TT__ReferenceToken& _token );
        dm::TT__ReferenceToken token() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__CreateStorageConfigurationResponse();
        ~TDS__CreateStorageConfigurationResponse();

    public:
        TDS__CreateStorageConfigurationResponse( const TDS__CreateStorageConfigurationResponse& );
        TDS__CreateStorageConfigurationResponse &operator=( const TDS__CreateStorageConfigurationResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__DNSInformationExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__DNSInformationExtension();
        ~TT__DNSInformationExtension();

    public:
        TT__DNSInformationExtension( const TT__DNSInformationExtension& );
        TT__DNSInformationExtension &operator=( const TT__DNSInformationExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetCertificateInformationResponse
    {
    public:
        void setCertificateInformation( const dm::TT__CertificateInformation& _certificateInformation );
        dm::TT__CertificateInformation certificateInformation() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetCertificateInformationResponse();
        ~TDS__GetCertificateInformationResponse();

    public:
        TDS__GetCertificateInformationResponse( const TDS__GetCertificateInformationResponse& );
        TDS__GetCertificateInformationResponse &operator=( const TDS__GetCertificateInformationResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Dot11PSKSet
    {
    public:
        void setKey( const dm::TT__Dot11PSK& _key );
        dm::TT__Dot11PSK key() const;
        void setPassphrase( const dm::TT__Dot11PSKPassphrase& _passphrase );
        dm::TT__Dot11PSKPassphrase passphrase() const;
        void setExtension( const dm::TT__Dot11PSKSetExtension& _extension );
        dm::TT__Dot11PSKSetExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Dot11PSKSet();
        ~TT__Dot11PSKSet();

    public:
        TT__Dot11PSKSet( const TT__Dot11PSKSet& );
        TT__Dot11PSKSet &operator=( const TT__Dot11PSKSet& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__PTZPresetTourSupportedExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__PTZPresetTourSupportedExtension();
        ~TT__PTZPresetTourSupportedExtension();

    public:
        TT__PTZPresetTourSupportedExtension( const TT__PTZPresetTourSupportedExtension& );
        TT__PTZPresetTourSupportedExtension &operator=( const TT__PTZPresetTourSupportedExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetRelayOutputSettingsResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetRelayOutputSettingsResponse();
        ~TDS__SetRelayOutputSettingsResponse();

};
} // namespace end

namespace dm {
    class TDS__GetNetworkDefaultGatewayResponse
    {
    public:
        void setNetworkGateway( const dm::TT__NetworkGateway& _networkGateway );
        dm::TT__NetworkGateway networkGateway() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetNetworkDefaultGatewayResponse();
        ~TDS__GetNetworkDefaultGatewayResponse();

    public:
        TDS__GetNetworkDefaultGatewayResponse( const TDS__GetNetworkDefaultGatewayResponse& );
        TDS__GetNetworkDefaultGatewayResponse &operator=( const TDS__GetNetworkDefaultGatewayResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__IOCapabilities
    {
    public:
        void setInputConnectors( int _inputConnectors );
        int inputConnectors() const;
        void setRelayOutputs( int _relayOutputs );
        int relayOutputs() const;
        void setExtension( const dm::TT__IOCapabilitiesExtension& _extension );
        dm::TT__IOCapabilitiesExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IOCapabilities();
        ~TT__IOCapabilities();

    public:
        TT__IOCapabilities( const TT__IOCapabilities& );
        TT__IOCapabilities &operator=( const TT__IOCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__IPv6NetworkInterfaceSetConfiguration
    {
    public:
        void setEnabled( bool _enabled );
        bool enabled() const;
        void setAcceptRouterAdvert( bool _acceptRouterAdvert );
        bool acceptRouterAdvert() const;
        void setManual( const QList< dm::TT__PrefixedIPv6Address >& _manual );
        QList< dm::TT__PrefixedIPv6Address > manual() const;
        void setDHCP( const dm::TT__IPv6DHCPConfiguration& _dHCP );
        dm::TT__IPv6DHCPConfiguration dHCP() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__IPv6NetworkInterfaceSetConfiguration();
        ~TT__IPv6NetworkInterfaceSetConfiguration();

    public:
        TT__IPv6NetworkInterfaceSetConfiguration( const TT__IPv6NetworkInterfaceSetConfiguration& );
        TT__IPv6NetworkInterfaceSetConfiguration &operator=( const TT__IPv6NetworkInterfaceSetConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__VideoSourceExtension
    {
    public:
        void setImaging( const dm::TT__ImagingSettings20& _imaging );
        dm::TT__ImagingSettings20 imaging() const;
        void setExtension( const dm::TT__VideoSourceExtension2& _extension );
        dm::TT__VideoSourceExtension2 extension() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__VideoSourceExtension();
        ~TT__VideoSourceExtension();

    public:
        TT__VideoSourceExtension( const TT__VideoSourceExtension& );
        TT__VideoSourceExtension &operator=( const TT__VideoSourceExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetAccessPolicy
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetAccessPolicy();
        ~TDS__GetAccessPolicy();

};
} // namespace end

namespace dm {
    class TT__RecordingCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setReceiverSource( bool _receiverSource );
        bool receiverSource() const;
        void setMediaProfileSource( bool _mediaProfileSource );
        bool mediaProfileSource() const;
        void setDynamicRecordings( bool _dynamicRecordings );
        bool dynamicRecordings() const;
        void setDynamicTracks( bool _dynamicTracks );
        bool dynamicTracks() const;
        void setMaxStringLength( int _maxStringLength );
        int maxStringLength() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__RecordingCapabilities();
        ~TT__RecordingCapabilities();

    public:
        TT__RecordingCapabilities( const TT__RecordingCapabilities& );
        TT__RecordingCapabilities &operator=( const TT__RecordingCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Space2DDescription
    {
    public:
        void setURI( const QString& _uRI );
        QString uRI() const;
        void setXRange( const dm::TT__FloatRange& _xRange );
        dm::TT__FloatRange xRange() const;
        void setYRange( const dm::TT__FloatRange& _yRange );
        dm::TT__FloatRange yRange() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Space2DDescription();
        ~TT__Space2DDescription();

    public:
        TT__Space2DDescription( const TT__Space2DDescription& );
        TT__Space2DDescription &operator=( const TT__Space2DDescription& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetEndpointReferenceResponse
    {
    public:
        void setGUID( const QString& _gUID );
        QString gUID() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetEndpointReferenceResponse();
        ~TDS__GetEndpointReferenceResponse();

    public:
        TDS__GetEndpointReferenceResponse( const TDS__GetEndpointReferenceResponse& );
        TDS__GetEndpointReferenceResponse &operator=( const TDS__GetEndpointReferenceResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDot1XConfigurationResponse
    {
    public:
        void setDot1XConfiguration( const dm::TT__Dot1XConfiguration& _dot1XConfiguration );
        dm::TT__Dot1XConfiguration dot1XConfiguration() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDot1XConfigurationResponse();
        ~TDS__GetDot1XConfigurationResponse();

    public:
        TDS__GetDot1XConfigurationResponse( const TDS__GetDot1XConfigurationResponse& );
        TDS__GetDot1XConfigurationResponse &operator=( const TDS__GetDot1XConfigurationResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Dot11AvailableNetworksExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Dot11AvailableNetworksExtension();
        ~TT__Dot11AvailableNetworksExtension();

    public:
        TT__Dot11AvailableNetworksExtension( const TT__Dot11AvailableNetworksExtension& );
        TT__Dot11AvailableNetworksExtension &operator=( const TT__Dot11AvailableNetworksExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetCertificatesStatus
    {
    public:
        void setCertificateStatus( const QList< dm::TT__CertificateStatus >& _certificateStatus );
        QList< dm::TT__CertificateStatus > certificateStatus() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetCertificatesStatus();
        ~TDS__SetCertificatesStatus();

    public:
        TDS__SetCertificatesStatus( const TDS__SetCertificatesStatus& );
        TDS__SetCertificatesStatus &operator=( const TDS__SetCertificatesStatus& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__PTZCapabilities
    {
    public:
        void setXAddr( const QString& _xAddr );
        QString xAddr() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__PTZCapabilities();
        ~TT__PTZCapabilities();

    public:
        TT__PTZCapabilities( const TT__PTZCapabilities& );
        TT__PTZCapabilities &operator=( const TT__PTZCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkInterfaceExtension2
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkInterfaceExtension2();
        ~TT__NetworkInterfaceExtension2();

    public:
        TT__NetworkInterfaceExtension2( const TT__NetworkInterfaceExtension2& );
        TT__NetworkInterfaceExtension2 &operator=( const TT__NetworkInterfaceExtension2& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__RemoveScopesResponse
    {
    public:
        void setScopeItem( const QStringList& _scopeItem );
        QStringList scopeItem() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__RemoveScopesResponse();
        ~TDS__RemoveScopesResponse();

    public:
        TDS__RemoveScopesResponse( const TDS__RemoveScopesResponse& );
        TDS__RemoveScopesResponse &operator=( const TDS__RemoveScopesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__RemoteUser
    {
    public:
        void setUsername( const QString& _username );
        QString username() const;
        void setPassword( const QString& _password );
        QString password() const;
        void setUseDerivedPassword( bool _useDerivedPassword );
        bool useDerivedPassword() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__RemoteUser();
        ~TT__RemoteUser();

    public:
        TT__RemoteUser( const TT__RemoteUser& );
        TT__RemoteUser &operator=( const TT__RemoteUser& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__EAPMethodConfiguration
    {
    public:
        void setTLSConfiguration( const dm::TT__TLSConfiguration& _tLSConfiguration );
        dm::TT__TLSConfiguration tLSConfiguration() const;
        void setPassword( const QString& _password );
        QString password() const;
        void setExtension( const dm::TT__EapMethodExtension& _extension );
        dm::TT__EapMethodExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__EAPMethodConfiguration();
        ~TT__EAPMethodConfiguration();

    public:
        TT__EAPMethodConfiguration( const TT__EAPMethodConfiguration& );
        TT__EAPMethodConfiguration &operator=( const TT__EAPMethodConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDynamicDNS
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDynamicDNS();
        ~TDS__GetDynamicDNS();

};
} // namespace end

namespace dm {
    class TT__NTPInformation
    {
    public:
        void setFromDHCP( bool _fromDHCP );
        bool fromDHCP() const;
        void setNTPFromDHCP( const QList< dm::TT__NetworkHost >& _nTPFromDHCP );
        QList< dm::TT__NetworkHost > nTPFromDHCP() const;
        void setNTPManual( const QList< dm::TT__NetworkHost >& _nTPManual );
        QList< dm::TT__NetworkHost > nTPManual() const;
        void setExtension( const dm::TT__NTPInformationExtension& _extension );
        dm::TT__NTPInformationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NTPInformation();
        ~TT__NTPInformation();

    public:
        TT__NTPInformation( const TT__NTPInformation& );
        TT__NTPInformation &operator=( const TT__NTPInformation& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetDNS
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetDNS();
        ~TDS__GetDNS();

};
} // namespace end

namespace dm {
    class TT__RealTimeStreamingCapabilitiesExtension
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__RealTimeStreamingCapabilitiesExtension();
        ~TT__RealTimeStreamingCapabilitiesExtension();

    public:
        TT__RealTimeStreamingCapabilitiesExtension( const TT__RealTimeStreamingCapabilitiesExtension& );
        TT__RealTimeStreamingCapabilitiesExtension &operator=( const TT__RealTimeStreamingCapabilitiesExtension& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__Dot11Capabilities
    {
    public:
        void setTKIP( bool _tKIP );
        bool tKIP() const;
        void setScanAvailableNetworks( bool _scanAvailableNetworks );
        bool scanAvailableNetworks() const;
        void setMultipleConfiguration( bool _multipleConfiguration );
        bool multipleConfiguration() const;
        void setAdHocStationMode( bool _adHocStationMode );
        bool adHocStationMode() const;
        void setWEP( bool _wEP );
        bool wEP() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Dot11Capabilities();
        ~TT__Dot11Capabilities();

    public:
        TT__Dot11Capabilities( const TT__Dot11Capabilities& );
        TT__Dot11Capabilities &operator=( const TT__Dot11Capabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__CreateStorageConfiguration
    {
    public:
        void setStorageConfiguration( const dm::TDS__StorageConfigurationData& _storageConfiguration );
        dm::TDS__StorageConfigurationData storageConfiguration() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__CreateStorageConfiguration();
        ~TDS__CreateStorageConfiguration();

    public:
        TDS__CreateStorageConfiguration( const TDS__CreateStorageConfiguration& );
        TDS__CreateStorageConfiguration &operator=( const TDS__CreateStorageConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__SystemCapabilities
    {
    public:
        void setDiscoveryResolve( bool _discoveryResolve );
        bool discoveryResolve() const;
        void setDiscoveryBye( bool _discoveryBye );
        bool discoveryBye() const;
        void setRemoteDiscovery( bool _remoteDiscovery );
        bool remoteDiscovery() const;
        void setSystemBackup( bool _systemBackup );
        bool systemBackup() const;
        void setSystemLogging( bool _systemLogging );
        bool systemLogging() const;
        void setFirmwareUpgrade( bool _firmwareUpgrade );
        bool firmwareUpgrade() const;
        void setSupportedVersions( const QList< dm::TT__OnvifVersion >& _supportedVersions );
        QList< dm::TT__OnvifVersion > supportedVersions() const;
        void setExtension( const dm::TT__SystemCapabilitiesExtension& _extension );
        dm::TT__SystemCapabilitiesExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__SystemCapabilities();
        ~TT__SystemCapabilities();

    public:
        TT__SystemCapabilities( const TT__SystemCapabilities& );
        TT__SystemCapabilities &operator=( const TT__SystemCapabilities& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetHostnameResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetHostnameResponse();
        ~TDS__SetHostnameResponse();

};
} // namespace end

namespace dm {
    class TT__Rectangle
    {
    public:
        void setBottom( float _bottom );
        float bottom() const;
        void setTop( float _top );
        float top() const;
        void setRight( float _right );
        float right() const;
        void setLeft( float _left );
        float left() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__Rectangle();
        ~TT__Rectangle();

    public:
        TT__Rectangle( const TT__Rectangle& );
        TT__Rectangle &operator=( const TT__Rectangle& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__SetCertificatesStatusResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__SetCertificatesStatusResponse();
        ~TDS__SetCertificatesStatusResponse();

};
} // namespace end

namespace dm {
    class TT__NoiseReduction
    {
    public:
        void setLevel( float _level );
        float level() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NoiseReduction();
        ~TT__NoiseReduction();

    public:
        TT__NoiseReduction( const TT__NoiseReduction& );
        TT__NoiseReduction &operator=( const TT__NoiseReduction& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__LoadCertificateWithPrivateKeyResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__LoadCertificateWithPrivateKeyResponse();
        ~TDS__LoadCertificateWithPrivateKeyResponse();

};
} // namespace end

namespace dm {
    class TDS__UpgradeSystemFirmwareResponse
    {
    public:
        void setMessage( const QString& _message );
        QString message() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__UpgradeSystemFirmwareResponse();
        ~TDS__UpgradeSystemFirmwareResponse();

    public:
        TDS__UpgradeSystemFirmwareResponse( const TDS__UpgradeSystemFirmwareResponse& );
        TDS__UpgradeSystemFirmwareResponse &operator=( const TDS__UpgradeSystemFirmwareResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__GetCapabilitiesResponse
    {
    public:
        void setCapabilities( const dm::TT__Capabilities& _capabilities );
        dm::TT__Capabilities capabilities() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__GetCapabilitiesResponse();
        ~TDS__GetCapabilitiesResponse();

    public:
        TDS__GetCapabilitiesResponse( const TDS__GetCapabilitiesResponse& );
        TDS__GetCapabilitiesResponse &operator=( const TDS__GetCapabilitiesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__RelayOutput : public dm::TT__DeviceEntity
    {
    public:
        void setProperties( const dm::TT__RelayOutputSettings& _properties );
        dm::TT__RelayOutputSettings properties() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__RelayOutput();
        ~TT__RelayOutput();
        virtual dm::TT__DeviceEntity *_kd_clone() const;

    public:
        TT__RelayOutput( const TT__RelayOutput& );
        TT__RelayOutput &operator=( const TT__RelayOutput& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    /**
        Representation of a physical audio outputs.
     */
    class TT__AudioOutput : public dm::TT__DeviceEntity
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__AudioOutput();
        ~TT__AudioOutput();
        virtual dm::TT__DeviceEntity *_kd_clone() const;

    public:
        TT__AudioOutput( const TT__AudioOutput& );
        TT__AudioOutput &operator=( const TT__AudioOutput& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__DigitalInput : public dm::TT__DeviceEntity
    {
    public:
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__DigitalInput();
        ~TT__DigitalInput();
        virtual dm::TT__DeviceEntity *_kd_clone() const;

    public:
        TT__DigitalInput( const TT__DigitalInput& );
        TT__DigitalInput &operator=( const TT__DigitalInput& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    /**
        Representation of a physical audio input.
     */
    class TT__AudioSource : public dm::TT__DeviceEntity
    {
    public:
        void setChannels( int _channels );
        int channels() const;
        void setAny( const QList< KDSoapValue >& _any );
        QList< KDSoapValue > any() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__AudioSource();
        ~TT__AudioSource();
        virtual dm::TT__DeviceEntity *_kd_clone() const;

    public:
        TT__AudioSource( const TT__AudioSource& );
        TT__AudioSource &operator=( const TT__AudioSource& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    /**
        Representation of a physical video input.
     */
    class TT__VideoSource : public dm::TT__DeviceEntity
    {
    public:
        void setFramerate( float _framerate );
        float framerate() const;
        void setResolution( const dm::TT__VideoResolution& _resolution );
        dm::TT__VideoResolution resolution() const;
        void setImaging( const dm::TT__ImagingSettings& _imaging );
        dm::TT__ImagingSettings imaging() const;
        void setExtension( const dm::TT__VideoSourceExtension& _extension );
        dm::TT__VideoSourceExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__VideoSource();
        ~TT__VideoSource();
        virtual dm::TT__DeviceEntity *_kd_clone() const;

    public:
        TT__VideoSource( const TT__VideoSource& );
        TT__VideoSource &operator=( const TT__VideoSource& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__NetworkInterface : public dm::TT__DeviceEntity
    {
    public:
        void setEnabled( bool _enabled );
        bool enabled() const;
        void setInfo( const dm::TT__NetworkInterfaceInfo& _info );
        dm::TT__NetworkInterfaceInfo info() const;
        void setLink( const dm::TT__NetworkInterfaceLink& _link );
        dm::TT__NetworkInterfaceLink link() const;
        void setIPv4( const dm::TT__IPv4NetworkInterface& _iPv4 );
        dm::TT__IPv4NetworkInterface iPv4() const;
        void setIPv6( const dm::TT__IPv6NetworkInterface& _iPv6 );
        dm::TT__IPv6NetworkInterface iPv6() const;
        void setExtension( const dm::TT__NetworkInterfaceExtension& _extension );
        dm::TT__NetworkInterfaceExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__NetworkInterface();
        ~TT__NetworkInterface();
        virtual dm::TT__DeviceEntity *_kd_clone() const;

    public:
        TT__NetworkInterface( const TT__NetworkInterface& );
        TT__NetworkInterface &operator=( const TT__NetworkInterface& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TDS__StorageConfiguration : public dm::TT__DeviceEntity
    {
    public:
        void setData( const dm::TDS__StorageConfigurationData& _data );
        dm::TDS__StorageConfigurationData data() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TDS__StorageConfiguration();
        ~TDS__StorageConfiguration();
        virtual dm::TT__DeviceEntity *_kd_clone() const;

    public:
        TDS__StorageConfiguration( const TDS__StorageConfiguration& );
        TDS__StorageConfiguration &operator=( const TDS__StorageConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    /**
        Representation of a physical video outputs.
     */
    class TT__VideoOutput : public dm::TT__DeviceEntity
    {
    public:
        void setLayout( const dm::TT__Layout& _layout );
        dm::TT__Layout layout() const;
        void setResolution( const dm::TT__VideoResolution& _resolution );
        dm::TT__VideoResolution resolution() const;
        void setRefreshRate( float _refreshRate );
        float refreshRate() const;
        void setAspectRatio( float _aspectRatio );
        float aspectRatio() const;
        void setExtension( const dm::TT__VideoOutputExtension& _extension );
        dm::TT__VideoOutputExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__VideoOutput();
        ~TT__VideoOutput();
        virtual dm::TT__DeviceEntity *_kd_clone() const;

    public:
        TT__VideoOutput( const TT__VideoOutput& );
        TT__VideoOutput &operator=( const TT__VideoOutput& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__OSDConfiguration : public dm::TT__DeviceEntity
    {
    public:
        void setVideoSourceConfigurationToken( const dm::TT__OSDReference& _videoSourceConfigurationToken );
        dm::TT__OSDReference videoSourceConfigurationToken() const;
        void setType( const dm::TT__OSDType& _type );
        dm::TT__OSDType type() const;
        void setPosition( const dm::TT__OSDPosConfiguration& _position );
        dm::TT__OSDPosConfiguration position() const;
        void setTextString( const dm::TT__OSDTextConfiguration& _textString );
        dm::TT__OSDTextConfiguration textString() const;
        void setImage( const dm::TT__OSDImgConfiguration& _image );
        dm::TT__OSDImgConfiguration image() const;
        void setExtension( const dm::TT__OSDConfigurationExtension& _extension );
        dm::TT__OSDConfigurationExtension extension() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__OSDConfiguration();
        ~TT__OSDConfiguration();
        virtual dm::TT__DeviceEntity *_kd_clone() const;

    public:
        TT__OSDConfiguration( const TT__OSDConfiguration& );
        TT__OSDConfiguration &operator=( const TT__OSDConfiguration& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class TT__PTZNode : public dm::TT__DeviceEntity
    {
    public:
        void setName( const dm::TT__Name& _name );
        dm::TT__Name name() const;
        void setSupportedPTZSpaces( const dm::TT__PTZSpaces& _supportedPTZSpaces );
        dm::TT__PTZSpaces supportedPTZSpaces() const;
        void setMaximumNumberOfPresets( int _maximumNumberOfPresets );
        int maximumNumberOfPresets() const;
        void setHomeSupported( bool _homeSupported );
        bool homeSupported() const;
        void setAuxiliaryCommands( const QList< dm::TT__AuxiliaryData >& _auxiliaryCommands );
        QList< dm::TT__AuxiliaryData > auxiliaryCommands() const;
        void setExtension( const dm::TT__PTZNodeExtension& _extension );
        dm::TT__PTZNodeExtension extension() const;
        void setFixedHomePosition( bool _fixedHomePosition );
        bool fixedHomePosition() const;
        void setAnyAttribute( const KDSoapValue& _anyAttribute );
        KDSoapValue anyAttribute() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TT__PTZNode();
        ~TT__PTZNode();
        virtual dm::TT__DeviceEntity *_kd_clone() const;

    public:
        TT__PTZNode( const TT__PTZNode& );
        TT__PTZNode &operator=( const TT__PTZNode& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace dm {
    class GetServicesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetServicesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetServices& arg0 );
        dm::TDS__GetServices parameters() const;
        dm::TDS__GetServicesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetServices mParameters;
        dm::TDS__GetServicesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetServiceCapabilitiesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetServiceCapabilitiesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetServiceCapabilities& arg0 );
        dm::TDS__GetServiceCapabilities parameters() const;
        dm::TDS__GetServiceCapabilitiesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetServiceCapabilities mParameters;
        dm::TDS__GetServiceCapabilitiesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetDeviceInformationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetDeviceInformationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetDeviceInformation& arg0 );
        dm::TDS__GetDeviceInformation parameters() const;
        dm::TDS__GetDeviceInformationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetDeviceInformation mParameters;
        dm::TDS__GetDeviceInformationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetSystemDateAndTimeJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetSystemDateAndTimeJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetSystemDateAndTime& arg0 );
        dm::TDS__SetSystemDateAndTime parameters() const;
        dm::TDS__SetSystemDateAndTimeResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetSystemDateAndTime mParameters;
        dm::TDS__SetSystemDateAndTimeResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetSystemDateAndTimeJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetSystemDateAndTimeJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetSystemDateAndTime& arg0 );
        dm::TDS__GetSystemDateAndTime parameters() const;
        dm::TDS__GetSystemDateAndTimeResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetSystemDateAndTime mParameters;
        dm::TDS__GetSystemDateAndTimeResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetSystemFactoryDefaultJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetSystemFactoryDefaultJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetSystemFactoryDefault& arg0 );
        dm::TDS__SetSystemFactoryDefault parameters() const;
        dm::TDS__SetSystemFactoryDefaultResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetSystemFactoryDefault mParameters;
        dm::TDS__SetSystemFactoryDefaultResponse mResultParameters;
};
} // namespace end

namespace dm {
    class UpgradeSystemFirmwareJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        UpgradeSystemFirmwareJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__UpgradeSystemFirmware& arg0 );
        dm::TDS__UpgradeSystemFirmware parameters() const;
        dm::TDS__UpgradeSystemFirmwareResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__UpgradeSystemFirmware mParameters;
        dm::TDS__UpgradeSystemFirmwareResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SystemRebootJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SystemRebootJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SystemReboot& arg0 );
        dm::TDS__SystemReboot parameters() const;
        dm::TDS__SystemRebootResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SystemReboot mParameters;
        dm::TDS__SystemRebootResponse mResultParameters;
};
} // namespace end

namespace dm {
    class RestoreSystemJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        RestoreSystemJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__RestoreSystem& arg0 );
        dm::TDS__RestoreSystem parameters() const;
        dm::TDS__RestoreSystemResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__RestoreSystem mParameters;
        dm::TDS__RestoreSystemResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetSystemBackupJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetSystemBackupJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetSystemBackup& arg0 );
        dm::TDS__GetSystemBackup parameters() const;
        dm::TDS__GetSystemBackupResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetSystemBackup mParameters;
        dm::TDS__GetSystemBackupResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetSystemLogJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetSystemLogJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetSystemLog& arg0 );
        dm::TDS__GetSystemLog parameters() const;
        dm::TDS__GetSystemLogResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetSystemLog mParameters;
        dm::TDS__GetSystemLogResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetSystemSupportInformationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetSystemSupportInformationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetSystemSupportInformation& arg0 );
        dm::TDS__GetSystemSupportInformation parameters() const;
        dm::TDS__GetSystemSupportInformationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetSystemSupportInformation mParameters;
        dm::TDS__GetSystemSupportInformationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetScopesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetScopesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetScopes& arg0 );
        dm::TDS__GetScopes parameters() const;
        dm::TDS__GetScopesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetScopes mParameters;
        dm::TDS__GetScopesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetScopesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetScopesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetScopes& arg0 );
        dm::TDS__SetScopes parameters() const;
        dm::TDS__SetScopesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetScopes mParameters;
        dm::TDS__SetScopesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class AddScopesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        AddScopesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__AddScopes& arg0 );
        dm::TDS__AddScopes parameters() const;
        dm::TDS__AddScopesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__AddScopes mParameters;
        dm::TDS__AddScopesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class RemoveScopesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        RemoveScopesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__RemoveScopes& arg0 );
        dm::TDS__RemoveScopes parameters() const;
        dm::TDS__RemoveScopesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__RemoveScopes mParameters;
        dm::TDS__RemoveScopesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetDiscoveryModeJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetDiscoveryModeJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetDiscoveryMode& arg0 );
        dm::TDS__GetDiscoveryMode parameters() const;
        dm::TDS__GetDiscoveryModeResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetDiscoveryMode mParameters;
        dm::TDS__GetDiscoveryModeResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetDiscoveryModeJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetDiscoveryModeJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetDiscoveryMode& arg0 );
        dm::TDS__SetDiscoveryMode parameters() const;
        dm::TDS__SetDiscoveryModeResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetDiscoveryMode mParameters;
        dm::TDS__SetDiscoveryModeResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetRemoteDiscoveryModeJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetRemoteDiscoveryModeJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetRemoteDiscoveryMode& arg0 );
        dm::TDS__GetRemoteDiscoveryMode parameters() const;
        dm::TDS__GetRemoteDiscoveryModeResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetRemoteDiscoveryMode mParameters;
        dm::TDS__GetRemoteDiscoveryModeResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetRemoteDiscoveryModeJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetRemoteDiscoveryModeJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetRemoteDiscoveryMode& arg0 );
        dm::TDS__SetRemoteDiscoveryMode parameters() const;
        dm::TDS__SetRemoteDiscoveryModeResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetRemoteDiscoveryMode mParameters;
        dm::TDS__SetRemoteDiscoveryModeResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetDPAddressesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetDPAddressesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetDPAddresses& arg0 );
        dm::TDS__GetDPAddresses parameters() const;
        dm::TDS__GetDPAddressesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetDPAddresses mParameters;
        dm::TDS__GetDPAddressesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetDPAddressesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetDPAddressesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetDPAddresses& arg0 );
        dm::TDS__SetDPAddresses parameters() const;
        dm::TDS__SetDPAddressesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetDPAddresses mParameters;
        dm::TDS__SetDPAddressesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetEndpointReferenceJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetEndpointReferenceJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetEndpointReference& arg0 );
        dm::TDS__GetEndpointReference parameters() const;
        dm::TDS__GetEndpointReferenceResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetEndpointReference mParameters;
        dm::TDS__GetEndpointReferenceResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetRemoteUserJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetRemoteUserJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetRemoteUser& arg0 );
        dm::TDS__GetRemoteUser parameters() const;
        dm::TDS__GetRemoteUserResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetRemoteUser mParameters;
        dm::TDS__GetRemoteUserResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetRemoteUserJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetRemoteUserJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetRemoteUser& arg0 );
        dm::TDS__SetRemoteUser parameters() const;
        dm::TDS__SetRemoteUserResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetRemoteUser mParameters;
        dm::TDS__SetRemoteUserResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetUsersJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetUsersJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetUsers& arg0 );
        dm::TDS__GetUsers parameters() const;
        dm::TDS__GetUsersResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetUsers mParameters;
        dm::TDS__GetUsersResponse mResultParameters;
};
} // namespace end

namespace dm {
    class CreateUsersJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        CreateUsersJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__CreateUsers& arg0 );
        dm::TDS__CreateUsers parameters() const;
        dm::TDS__CreateUsersResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__CreateUsers mParameters;
        dm::TDS__CreateUsersResponse mResultParameters;
};
} // namespace end

namespace dm {
    class DeleteUsersJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        DeleteUsersJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__DeleteUsers& arg0 );
        dm::TDS__DeleteUsers parameters() const;
        dm::TDS__DeleteUsersResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__DeleteUsers mParameters;
        dm::TDS__DeleteUsersResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetUserJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetUserJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetUser& arg0 );
        dm::TDS__SetUser parameters() const;
        dm::TDS__SetUserResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetUser mParameters;
        dm::TDS__SetUserResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetWsdlUrlJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetWsdlUrlJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetWsdlUrl& arg0 );
        dm::TDS__GetWsdlUrl parameters() const;
        dm::TDS__GetWsdlUrlResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetWsdlUrl mParameters;
        dm::TDS__GetWsdlUrlResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetCapabilitiesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetCapabilitiesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetCapabilities& arg0 );
        dm::TDS__GetCapabilities parameters() const;
        dm::TDS__GetCapabilitiesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetCapabilities mParameters;
        dm::TDS__GetCapabilitiesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetHostnameJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetHostnameJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetHostname& arg0 );
        dm::TDS__GetHostname parameters() const;
        dm::TDS__GetHostnameResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetHostname mParameters;
        dm::TDS__GetHostnameResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetHostnameJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetHostnameJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetHostname& arg0 );
        dm::TDS__SetHostname parameters() const;
        dm::TDS__SetHostnameResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetHostname mParameters;
        dm::TDS__SetHostnameResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetHostnameFromDHCPJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetHostnameFromDHCPJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetHostnameFromDHCP& arg0 );
        dm::TDS__SetHostnameFromDHCP parameters() const;
        dm::TDS__SetHostnameFromDHCPResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetHostnameFromDHCP mParameters;
        dm::TDS__SetHostnameFromDHCPResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetDNSJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetDNSJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetDNS& arg0 );
        dm::TDS__GetDNS parameters() const;
        dm::TDS__GetDNSResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetDNS mParameters;
        dm::TDS__GetDNSResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetDNSJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetDNSJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetDNS& arg0 );
        dm::TDS__SetDNS parameters() const;
        dm::TDS__SetDNSResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetDNS mParameters;
        dm::TDS__SetDNSResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetNTPJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetNTPJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetNTP& arg0 );
        dm::TDS__GetNTP parameters() const;
        dm::TDS__GetNTPResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetNTP mParameters;
        dm::TDS__GetNTPResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetNTPJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetNTPJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetNTP& arg0 );
        dm::TDS__SetNTP parameters() const;
        dm::TDS__SetNTPResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetNTP mParameters;
        dm::TDS__SetNTPResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetDynamicDNSJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetDynamicDNSJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetDynamicDNS& arg0 );
        dm::TDS__GetDynamicDNS parameters() const;
        dm::TDS__GetDynamicDNSResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetDynamicDNS mParameters;
        dm::TDS__GetDynamicDNSResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetDynamicDNSJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetDynamicDNSJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetDynamicDNS& arg0 );
        dm::TDS__SetDynamicDNS parameters() const;
        dm::TDS__SetDynamicDNSResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetDynamicDNS mParameters;
        dm::TDS__SetDynamicDNSResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetNetworkInterfacesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetNetworkInterfacesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetNetworkInterfaces& arg0 );
        dm::TDS__GetNetworkInterfaces parameters() const;
        dm::TDS__GetNetworkInterfacesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetNetworkInterfaces mParameters;
        dm::TDS__GetNetworkInterfacesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetNetworkInterfacesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetNetworkInterfacesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetNetworkInterfaces& arg0 );
        dm::TDS__SetNetworkInterfaces parameters() const;
        dm::TDS__SetNetworkInterfacesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetNetworkInterfaces mParameters;
        dm::TDS__SetNetworkInterfacesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetNetworkProtocolsJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetNetworkProtocolsJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetNetworkProtocols& arg0 );
        dm::TDS__GetNetworkProtocols parameters() const;
        dm::TDS__GetNetworkProtocolsResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetNetworkProtocols mParameters;
        dm::TDS__GetNetworkProtocolsResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetNetworkProtocolsJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetNetworkProtocolsJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetNetworkProtocols& arg0 );
        dm::TDS__SetNetworkProtocols parameters() const;
        dm::TDS__SetNetworkProtocolsResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetNetworkProtocols mParameters;
        dm::TDS__SetNetworkProtocolsResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetNetworkDefaultGatewayJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetNetworkDefaultGatewayJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetNetworkDefaultGateway& arg0 );
        dm::TDS__GetNetworkDefaultGateway parameters() const;
        dm::TDS__GetNetworkDefaultGatewayResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetNetworkDefaultGateway mParameters;
        dm::TDS__GetNetworkDefaultGatewayResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetNetworkDefaultGatewayJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetNetworkDefaultGatewayJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetNetworkDefaultGateway& arg0 );
        dm::TDS__SetNetworkDefaultGateway parameters() const;
        dm::TDS__SetNetworkDefaultGatewayResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetNetworkDefaultGateway mParameters;
        dm::TDS__SetNetworkDefaultGatewayResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetZeroConfigurationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetZeroConfigurationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetZeroConfiguration& arg0 );
        dm::TDS__GetZeroConfiguration parameters() const;
        dm::TDS__GetZeroConfigurationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetZeroConfiguration mParameters;
        dm::TDS__GetZeroConfigurationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetZeroConfigurationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetZeroConfigurationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetZeroConfiguration& arg0 );
        dm::TDS__SetZeroConfiguration parameters() const;
        dm::TDS__SetZeroConfigurationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetZeroConfiguration mParameters;
        dm::TDS__SetZeroConfigurationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetIPAddressFilterJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetIPAddressFilterJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetIPAddressFilter& arg0 );
        dm::TDS__GetIPAddressFilter parameters() const;
        dm::TDS__GetIPAddressFilterResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetIPAddressFilter mParameters;
        dm::TDS__GetIPAddressFilterResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetIPAddressFilterJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetIPAddressFilterJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetIPAddressFilter& arg0 );
        dm::TDS__SetIPAddressFilter parameters() const;
        dm::TDS__SetIPAddressFilterResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetIPAddressFilter mParameters;
        dm::TDS__SetIPAddressFilterResponse mResultParameters;
};
} // namespace end

namespace dm {
    class AddIPAddressFilterJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        AddIPAddressFilterJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__AddIPAddressFilter& arg0 );
        dm::TDS__AddIPAddressFilter parameters() const;
        dm::TDS__AddIPAddressFilterResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__AddIPAddressFilter mParameters;
        dm::TDS__AddIPAddressFilterResponse mResultParameters;
};
} // namespace end

namespace dm {
    class RemoveIPAddressFilterJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        RemoveIPAddressFilterJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__RemoveIPAddressFilter& arg0 );
        dm::TDS__RemoveIPAddressFilter parameters() const;
        dm::TDS__RemoveIPAddressFilterResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__RemoveIPAddressFilter mParameters;
        dm::TDS__RemoveIPAddressFilterResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetAccessPolicyJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetAccessPolicyJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetAccessPolicy& arg0 );
        dm::TDS__GetAccessPolicy parameters() const;
        dm::TDS__GetAccessPolicyResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetAccessPolicy mParameters;
        dm::TDS__GetAccessPolicyResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetAccessPolicyJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetAccessPolicyJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetAccessPolicy& arg0 );
        dm::TDS__SetAccessPolicy parameters() const;
        dm::TDS__SetAccessPolicyResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetAccessPolicy mParameters;
        dm::TDS__SetAccessPolicyResponse mResultParameters;
};
} // namespace end

namespace dm {
    class CreateCertificateJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        CreateCertificateJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__CreateCertificate& arg0 );
        dm::TDS__CreateCertificate parameters() const;
        dm::TDS__CreateCertificateResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__CreateCertificate mParameters;
        dm::TDS__CreateCertificateResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetCertificatesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetCertificatesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetCertificates& arg0 );
        dm::TDS__GetCertificates parameters() const;
        dm::TDS__GetCertificatesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetCertificates mParameters;
        dm::TDS__GetCertificatesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetCertificatesStatusJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetCertificatesStatusJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetCertificatesStatus& arg0 );
        dm::TDS__GetCertificatesStatus parameters() const;
        dm::TDS__GetCertificatesStatusResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetCertificatesStatus mParameters;
        dm::TDS__GetCertificatesStatusResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetCertificatesStatusJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetCertificatesStatusJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetCertificatesStatus& arg0 );
        dm::TDS__SetCertificatesStatus parameters() const;
        dm::TDS__SetCertificatesStatusResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetCertificatesStatus mParameters;
        dm::TDS__SetCertificatesStatusResponse mResultParameters;
};
} // namespace end

namespace dm {
    class DeleteCertificatesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        DeleteCertificatesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__DeleteCertificates& arg0 );
        dm::TDS__DeleteCertificates parameters() const;
        dm::TDS__DeleteCertificatesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__DeleteCertificates mParameters;
        dm::TDS__DeleteCertificatesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetPkcs10RequestJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetPkcs10RequestJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetPkcs10Request& arg0 );
        dm::TDS__GetPkcs10Request parameters() const;
        dm::TDS__GetPkcs10RequestResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetPkcs10Request mParameters;
        dm::TDS__GetPkcs10RequestResponse mResultParameters;
};
} // namespace end

namespace dm {
    class LoadCertificatesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        LoadCertificatesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__LoadCertificates& arg0 );
        dm::TDS__LoadCertificates parameters() const;
        dm::TDS__LoadCertificatesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__LoadCertificates mParameters;
        dm::TDS__LoadCertificatesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetClientCertificateModeJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetClientCertificateModeJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetClientCertificateMode& arg0 );
        dm::TDS__GetClientCertificateMode parameters() const;
        dm::TDS__GetClientCertificateModeResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetClientCertificateMode mParameters;
        dm::TDS__GetClientCertificateModeResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetClientCertificateModeJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetClientCertificateModeJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetClientCertificateMode& arg0 );
        dm::TDS__SetClientCertificateMode parameters() const;
        dm::TDS__SetClientCertificateModeResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetClientCertificateMode mParameters;
        dm::TDS__SetClientCertificateModeResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetRelayOutputsJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetRelayOutputsJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetRelayOutputs& arg0 );
        dm::TDS__GetRelayOutputs parameters() const;
        dm::TDS__GetRelayOutputsResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetRelayOutputs mParameters;
        dm::TDS__GetRelayOutputsResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetRelayOutputSettingsJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetRelayOutputSettingsJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetRelayOutputSettings& arg0 );
        dm::TDS__SetRelayOutputSettings parameters() const;
        dm::TDS__SetRelayOutputSettingsResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetRelayOutputSettings mParameters;
        dm::TDS__SetRelayOutputSettingsResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetRelayOutputStateJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetRelayOutputStateJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetRelayOutputState& arg0 );
        dm::TDS__SetRelayOutputState parameters() const;
        dm::TDS__SetRelayOutputStateResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetRelayOutputState mParameters;
        dm::TDS__SetRelayOutputStateResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SendAuxiliaryCommandJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SendAuxiliaryCommandJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SendAuxiliaryCommand& arg0 );
        dm::TDS__SendAuxiliaryCommand parameters() const;
        dm::TDS__SendAuxiliaryCommandResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SendAuxiliaryCommand mParameters;
        dm::TDS__SendAuxiliaryCommandResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetCACertificatesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetCACertificatesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetCACertificates& arg0 );
        dm::TDS__GetCACertificates parameters() const;
        dm::TDS__GetCACertificatesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetCACertificates mParameters;
        dm::TDS__GetCACertificatesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class LoadCertificateWithPrivateKeyJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        LoadCertificateWithPrivateKeyJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__LoadCertificateWithPrivateKey& arg0 );
        dm::TDS__LoadCertificateWithPrivateKey parameters() const;
        dm::TDS__LoadCertificateWithPrivateKeyResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__LoadCertificateWithPrivateKey mParameters;
        dm::TDS__LoadCertificateWithPrivateKeyResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetCertificateInformationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetCertificateInformationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetCertificateInformation& arg0 );
        dm::TDS__GetCertificateInformation parameters() const;
        dm::TDS__GetCertificateInformationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetCertificateInformation mParameters;
        dm::TDS__GetCertificateInformationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class LoadCACertificatesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        LoadCACertificatesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__LoadCACertificates& arg0 );
        dm::TDS__LoadCACertificates parameters() const;
        dm::TDS__LoadCACertificatesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__LoadCACertificates mParameters;
        dm::TDS__LoadCACertificatesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class CreateDot1XConfigurationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        CreateDot1XConfigurationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__CreateDot1XConfiguration& arg0 );
        dm::TDS__CreateDot1XConfiguration parameters() const;
        dm::TDS__CreateDot1XConfigurationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__CreateDot1XConfiguration mParameters;
        dm::TDS__CreateDot1XConfigurationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetDot1XConfigurationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetDot1XConfigurationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetDot1XConfiguration& arg0 );
        dm::TDS__SetDot1XConfiguration parameters() const;
        dm::TDS__SetDot1XConfigurationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetDot1XConfiguration mParameters;
        dm::TDS__SetDot1XConfigurationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetDot1XConfigurationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetDot1XConfigurationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetDot1XConfiguration& arg0 );
        dm::TDS__GetDot1XConfiguration parameters() const;
        dm::TDS__GetDot1XConfigurationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetDot1XConfiguration mParameters;
        dm::TDS__GetDot1XConfigurationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetDot1XConfigurationsJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetDot1XConfigurationsJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetDot1XConfigurations& arg0 );
        dm::TDS__GetDot1XConfigurations parameters() const;
        dm::TDS__GetDot1XConfigurationsResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetDot1XConfigurations mParameters;
        dm::TDS__GetDot1XConfigurationsResponse mResultParameters;
};
} // namespace end

namespace dm {
    class DeleteDot1XConfigurationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        DeleteDot1XConfigurationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__DeleteDot1XConfiguration& arg0 );
        dm::TDS__DeleteDot1XConfiguration parameters() const;
        dm::TDS__DeleteDot1XConfigurationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__DeleteDot1XConfiguration mParameters;
        dm::TDS__DeleteDot1XConfigurationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetDot11CapabilitiesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetDot11CapabilitiesJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetDot11Capabilities& arg0 );
        dm::TDS__GetDot11Capabilities parameters() const;
        dm::TDS__GetDot11CapabilitiesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetDot11Capabilities mParameters;
        dm::TDS__GetDot11CapabilitiesResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetDot11StatusJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetDot11StatusJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetDot11Status& arg0 );
        dm::TDS__GetDot11Status parameters() const;
        dm::TDS__GetDot11StatusResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetDot11Status mParameters;
        dm::TDS__GetDot11StatusResponse mResultParameters;
};
} // namespace end

namespace dm {
    class ScanAvailableDot11NetworksJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        ScanAvailableDot11NetworksJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__ScanAvailableDot11Networks& arg0 );
        dm::TDS__ScanAvailableDot11Networks parameters() const;
        dm::TDS__ScanAvailableDot11NetworksResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__ScanAvailableDot11Networks mParameters;
        dm::TDS__ScanAvailableDot11NetworksResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetSystemUrisJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetSystemUrisJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetSystemUris& arg0 );
        dm::TDS__GetSystemUris parameters() const;
        dm::TDS__GetSystemUrisResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetSystemUris mParameters;
        dm::TDS__GetSystemUrisResponse mResultParameters;
};
} // namespace end

namespace dm {
    class StartFirmwareUpgradeJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        StartFirmwareUpgradeJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__StartFirmwareUpgrade& arg0 );
        dm::TDS__StartFirmwareUpgrade parameters() const;
        dm::TDS__StartFirmwareUpgradeResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__StartFirmwareUpgrade mParameters;
        dm::TDS__StartFirmwareUpgradeResponse mResultParameters;
};
} // namespace end

namespace dm {
    class StartSystemRestoreJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        StartSystemRestoreJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__StartSystemRestore& arg0 );
        dm::TDS__StartSystemRestore parameters() const;
        dm::TDS__StartSystemRestoreResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__StartSystemRestore mParameters;
        dm::TDS__StartSystemRestoreResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetStorageConfigurationsJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetStorageConfigurationsJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetStorageConfigurations& arg0 );
        dm::TDS__GetStorageConfigurations parameters() const;
        dm::TDS__GetStorageConfigurationsResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetStorageConfigurations mParameters;
        dm::TDS__GetStorageConfigurationsResponse mResultParameters;
};
} // namespace end

namespace dm {
    class CreateStorageConfigurationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        CreateStorageConfigurationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__CreateStorageConfiguration& arg0 );
        dm::TDS__CreateStorageConfiguration parameters() const;
        dm::TDS__CreateStorageConfigurationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__CreateStorageConfiguration mParameters;
        dm::TDS__CreateStorageConfigurationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class GetStorageConfigurationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetStorageConfigurationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__GetStorageConfiguration& arg0 );
        dm::TDS__GetStorageConfiguration parameters() const;
        dm::TDS__GetStorageConfigurationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__GetStorageConfiguration mParameters;
        dm::TDS__GetStorageConfigurationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class SetStorageConfigurationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        SetStorageConfigurationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__SetStorageConfiguration& arg0 );
        dm::TDS__SetStorageConfiguration parameters() const;
        dm::TDS__SetStorageConfigurationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__SetStorageConfiguration mParameters;
        dm::TDS__SetStorageConfigurationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class DeleteStorageConfigurationJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        DeleteStorageConfigurationJob( dm::DeviceBindingService* service, QObject* _parent = 0 );
        void setParameters( const dm::TDS__DeleteStorageConfiguration& arg0 );
        dm::TDS__DeleteStorageConfiguration parameters() const;
        dm::TDS__DeleteStorageConfigurationResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        dm::DeviceBindingService *mService;
        dm::TDS__DeleteStorageConfiguration mParameters;
        dm::TDS__DeleteStorageConfigurationResponse mResultParameters;
};
} // namespace end

namespace dm {
    class DeviceBindingService : public QObject
    {
        Q_OBJECT

    public:
        DeviceBindingService( QObject* _parent = 0 );
        ~DeviceBindingService();
        /**
            Asks Qt to ignore ssl errors in https requests. Use this for
            testing only!
         */
        void ignoreSslErrors();
        /**
            Overwrite the end point defined in the .wsdl file, with another
            http/https URL.
         */
        void setEndPoint( const QString& endPoint );
        /**
            Overwrite the soap version defined in the .wsdl file, with another
            version.
            version can be KDSoapClientInterface::SOAP1_1 or
            KDSoapClientInterface::SOAP1_2
         */
        void setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion );
        /**
            Return the error from the last blocking call.
            Empty if no error.
         */
        QString lastError() const;
        /**
            Returns the underlying KDSoapClientInterface instance, which allows
            to access setCookieJar, lastResponseHeaders, etc.
         */
        const KDSoapClientInterface *clientInterface() const;
        KDSoapClientInterface *clientInterface();
        /**
            Blocking call to GetServices.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetServicesResponse getServices( const dm::TDS__GetServices& parameters );
        /**
            Asynchronous call to GetServices.
            Remember to connect to getServicesDone and getServicesError.
         */
        void asyncGetServices( const dm::TDS__GetServices& parameters );
        /**
            Blocking call to GetServiceCapabilities.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetServiceCapabilitiesResponse getServiceCapabilities( const dm::TDS__GetServiceCapabilities& parameters = dm::TDS__GetServiceCapabilities() );
        /**
            Asynchronous call to GetServiceCapabilities.
            Remember to connect to getServiceCapabilitiesDone and
            getServiceCapabilitiesError.
         */
        void asyncGetServiceCapabilities( const dm::TDS__GetServiceCapabilities& parameters = dm::TDS__GetServiceCapabilities() );
        /**
            Blocking call to GetDeviceInformation.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetDeviceInformationResponse getDeviceInformation( const dm::TDS__GetDeviceInformation& parameters = dm::TDS__GetDeviceInformation() );
        /**
            Asynchronous call to GetDeviceInformation.
            Remember to connect to getDeviceInformationDone and
            getDeviceInformationError.
         */
        void asyncGetDeviceInformation( const dm::TDS__GetDeviceInformation& parameters = dm::TDS__GetDeviceInformation() );
        /**
            Blocking call to SetSystemDateAndTime.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetSystemDateAndTimeResponse setSystemDateAndTime( const dm::TDS__SetSystemDateAndTime& parameters );
        /**
            Asynchronous call to SetSystemDateAndTime.
            Remember to connect to setSystemDateAndTimeDone and
            setSystemDateAndTimeError.
         */
        void asyncSetSystemDateAndTime( const dm::TDS__SetSystemDateAndTime& parameters );
        /**
            Blocking call to GetSystemDateAndTime.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetSystemDateAndTimeResponse getSystemDateAndTime( const dm::TDS__GetSystemDateAndTime& parameters = dm::TDS__GetSystemDateAndTime() );
        /**
            Asynchronous call to GetSystemDateAndTime.
            Remember to connect to getSystemDateAndTimeDone and
            getSystemDateAndTimeError.
         */
        void asyncGetSystemDateAndTime( const dm::TDS__GetSystemDateAndTime& parameters = dm::TDS__GetSystemDateAndTime() );
        /**
            Blocking call to SetSystemFactoryDefault.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetSystemFactoryDefaultResponse setSystemFactoryDefault( const dm::TDS__SetSystemFactoryDefault& parameters );
        /**
            Asynchronous call to SetSystemFactoryDefault.
            Remember to connect to setSystemFactoryDefaultDone and
            setSystemFactoryDefaultError.
         */
        void asyncSetSystemFactoryDefault( const dm::TDS__SetSystemFactoryDefault& parameters );
        /**
            Blocking call to UpgradeSystemFirmware.
            Not recommended in a GUI thread.
         */
        dm::TDS__UpgradeSystemFirmwareResponse upgradeSystemFirmware( const dm::TDS__UpgradeSystemFirmware& parameters );
        /**
            Asynchronous call to UpgradeSystemFirmware.
            Remember to connect to upgradeSystemFirmwareDone and
            upgradeSystemFirmwareError.
         */
        void asyncUpgradeSystemFirmware( const dm::TDS__UpgradeSystemFirmware& parameters );
        /**
            Blocking call to SystemReboot.
            Not recommended in a GUI thread.
         */
        dm::TDS__SystemRebootResponse systemReboot( const dm::TDS__SystemReboot& parameters = dm::TDS__SystemReboot() );
        /**
            Asynchronous call to SystemReboot.
            Remember to connect to systemRebootDone and systemRebootError.
         */
        void asyncSystemReboot( const dm::TDS__SystemReboot& parameters = dm::TDS__SystemReboot() );
        /**
            Blocking call to RestoreSystem.
            Not recommended in a GUI thread.
         */
        dm::TDS__RestoreSystemResponse restoreSystem( const dm::TDS__RestoreSystem& parameters );
        /**
            Asynchronous call to RestoreSystem.
            Remember to connect to restoreSystemDone and restoreSystemError.
         */
        void asyncRestoreSystem( const dm::TDS__RestoreSystem& parameters );
        /**
            Blocking call to GetSystemBackup.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetSystemBackupResponse getSystemBackup( const dm::TDS__GetSystemBackup& parameters = dm::TDS__GetSystemBackup() );
        /**
            Asynchronous call to GetSystemBackup.
            Remember to connect to getSystemBackupDone and
            getSystemBackupError.
         */
        void asyncGetSystemBackup( const dm::TDS__GetSystemBackup& parameters = dm::TDS__GetSystemBackup() );
        /**
            Blocking call to GetSystemLog.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetSystemLogResponse getSystemLog( const dm::TDS__GetSystemLog& parameters );
        /**
            Asynchronous call to GetSystemLog.
            Remember to connect to getSystemLogDone and getSystemLogError.
         */
        void asyncGetSystemLog( const dm::TDS__GetSystemLog& parameters );
        /**
            Blocking call to GetSystemSupportInformation.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetSystemSupportInformationResponse getSystemSupportInformation( const dm::TDS__GetSystemSupportInformation& parameters = dm::TDS__GetSystemSupportInformation() );
        /**
            Asynchronous call to GetSystemSupportInformation.
            Remember to connect to getSystemSupportInformationDone and
            getSystemSupportInformationError.
         */
        void asyncGetSystemSupportInformation( const dm::TDS__GetSystemSupportInformation& parameters = dm::TDS__GetSystemSupportInformation() );
        /**
            Blocking call to GetScopes.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetScopesResponse getScopes( const dm::TDS__GetScopes& parameters = dm::TDS__GetScopes() );
        /**
            Asynchronous call to GetScopes.
            Remember to connect to getScopesDone and getScopesError.
         */
        void asyncGetScopes( const dm::TDS__GetScopes& parameters = dm::TDS__GetScopes() );
        /**
            Blocking call to SetScopes.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetScopesResponse setScopes( const dm::TDS__SetScopes& parameters );
        /**
            Asynchronous call to SetScopes.
            Remember to connect to setScopesDone and setScopesError.
         */
        void asyncSetScopes( const dm::TDS__SetScopes& parameters );
        /**
            Blocking call to AddScopes.
            Not recommended in a GUI thread.
         */
        dm::TDS__AddScopesResponse addScopes( const dm::TDS__AddScopes& parameters );
        /**
            Asynchronous call to AddScopes.
            Remember to connect to addScopesDone and addScopesError.
         */
        void asyncAddScopes( const dm::TDS__AddScopes& parameters );
        /**
            Blocking call to RemoveScopes.
            Not recommended in a GUI thread.
         */
        dm::TDS__RemoveScopesResponse removeScopes( const dm::TDS__RemoveScopes& parameters );
        /**
            Asynchronous call to RemoveScopes.
            Remember to connect to removeScopesDone and removeScopesError.
         */
        void asyncRemoveScopes( const dm::TDS__RemoveScopes& parameters );
        /**
            Blocking call to GetDiscoveryMode.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetDiscoveryModeResponse getDiscoveryMode( const dm::TDS__GetDiscoveryMode& parameters = dm::TDS__GetDiscoveryMode() );
        /**
            Asynchronous call to GetDiscoveryMode.
            Remember to connect to getDiscoveryModeDone and
            getDiscoveryModeError.
         */
        void asyncGetDiscoveryMode( const dm::TDS__GetDiscoveryMode& parameters = dm::TDS__GetDiscoveryMode() );
        /**
            Blocking call to SetDiscoveryMode.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetDiscoveryModeResponse setDiscoveryMode( const dm::TDS__SetDiscoveryMode& parameters );
        /**
            Asynchronous call to SetDiscoveryMode.
            Remember to connect to setDiscoveryModeDone and
            setDiscoveryModeError.
         */
        void asyncSetDiscoveryMode( const dm::TDS__SetDiscoveryMode& parameters );
        /**
            Blocking call to GetRemoteDiscoveryMode.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetRemoteDiscoveryModeResponse getRemoteDiscoveryMode( const dm::TDS__GetRemoteDiscoveryMode& parameters = dm::TDS__GetRemoteDiscoveryMode() );
        /**
            Asynchronous call to GetRemoteDiscoveryMode.
            Remember to connect to getRemoteDiscoveryModeDone and
            getRemoteDiscoveryModeError.
         */
        void asyncGetRemoteDiscoveryMode( const dm::TDS__GetRemoteDiscoveryMode& parameters = dm::TDS__GetRemoteDiscoveryMode() );
        /**
            Blocking call to SetRemoteDiscoveryMode.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetRemoteDiscoveryModeResponse setRemoteDiscoveryMode( const dm::TDS__SetRemoteDiscoveryMode& parameters );
        /**
            Asynchronous call to SetRemoteDiscoveryMode.
            Remember to connect to setRemoteDiscoveryModeDone and
            setRemoteDiscoveryModeError.
         */
        void asyncSetRemoteDiscoveryMode( const dm::TDS__SetRemoteDiscoveryMode& parameters );
        /**
            Blocking call to GetDPAddresses.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetDPAddressesResponse getDPAddresses( const dm::TDS__GetDPAddresses& parameters = dm::TDS__GetDPAddresses() );
        /**
            Asynchronous call to GetDPAddresses.
            Remember to connect to getDPAddressesDone and getDPAddressesError.
         */
        void asyncGetDPAddresses( const dm::TDS__GetDPAddresses& parameters = dm::TDS__GetDPAddresses() );
        /**
            Blocking call to SetDPAddresses.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetDPAddressesResponse setDPAddresses( const dm::TDS__SetDPAddresses& parameters );
        /**
            Asynchronous call to SetDPAddresses.
            Remember to connect to setDPAddressesDone and setDPAddressesError.
         */
        void asyncSetDPAddresses( const dm::TDS__SetDPAddresses& parameters );
        /**
            Blocking call to GetEndpointReference.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetEndpointReferenceResponse getEndpointReference( const dm::TDS__GetEndpointReference& parameters = dm::TDS__GetEndpointReference() );
        /**
            Asynchronous call to GetEndpointReference.
            Remember to connect to getEndpointReferenceDone and
            getEndpointReferenceError.
         */
        void asyncGetEndpointReference( const dm::TDS__GetEndpointReference& parameters = dm::TDS__GetEndpointReference() );
        /**
            Blocking call to GetRemoteUser.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetRemoteUserResponse getRemoteUser( const dm::TDS__GetRemoteUser& parameters = dm::TDS__GetRemoteUser() );
        /**
            Asynchronous call to GetRemoteUser.
            Remember to connect to getRemoteUserDone and getRemoteUserError.
         */
        void asyncGetRemoteUser( const dm::TDS__GetRemoteUser& parameters = dm::TDS__GetRemoteUser() );
        /**
            Blocking call to SetRemoteUser.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetRemoteUserResponse setRemoteUser( const dm::TDS__SetRemoteUser& parameters );
        /**
            Asynchronous call to SetRemoteUser.
            Remember to connect to setRemoteUserDone and setRemoteUserError.
         */
        void asyncSetRemoteUser( const dm::TDS__SetRemoteUser& parameters );
        /**
            Blocking call to GetUsers.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetUsersResponse getUsers( const dm::TDS__GetUsers& parameters = dm::TDS__GetUsers() );
        /**
            Asynchronous call to GetUsers.
            Remember to connect to getUsersDone and getUsersError.
         */
        void asyncGetUsers( const dm::TDS__GetUsers& parameters = dm::TDS__GetUsers() );
        /**
            Blocking call to CreateUsers.
            Not recommended in a GUI thread.
         */
        dm::TDS__CreateUsersResponse createUsers( const dm::TDS__CreateUsers& parameters );
        /**
            Asynchronous call to CreateUsers.
            Remember to connect to createUsersDone and createUsersError.
         */
        void asyncCreateUsers( const dm::TDS__CreateUsers& parameters );
        /**
            Blocking call to DeleteUsers.
            Not recommended in a GUI thread.
         */
        dm::TDS__DeleteUsersResponse deleteUsers( const dm::TDS__DeleteUsers& parameters );
        /**
            Asynchronous call to DeleteUsers.
            Remember to connect to deleteUsersDone and deleteUsersError.
         */
        void asyncDeleteUsers( const dm::TDS__DeleteUsers& parameters );
        /**
            Blocking call to SetUser.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetUserResponse setUser( const dm::TDS__SetUser& parameters );
        /**
            Asynchronous call to SetUser.
            Remember to connect to setUserDone and setUserError.
         */
        void asyncSetUser( const dm::TDS__SetUser& parameters );
        /**
            Blocking call to GetWsdlUrl.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetWsdlUrlResponse getWsdlUrl( const dm::TDS__GetWsdlUrl& parameters = dm::TDS__GetWsdlUrl() );
        /**
            Asynchronous call to GetWsdlUrl.
            Remember to connect to getWsdlUrlDone and getWsdlUrlError.
         */
        void asyncGetWsdlUrl( const dm::TDS__GetWsdlUrl& parameters = dm::TDS__GetWsdlUrl() );
        /**
            Blocking call to GetCapabilities.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetCapabilitiesResponse getCapabilities( const dm::TDS__GetCapabilities& parameters );
        /**
            Asynchronous call to GetCapabilities.
            Remember to connect to getCapabilitiesDone and
            getCapabilitiesError.
         */
        void asyncGetCapabilities( const dm::TDS__GetCapabilities& parameters );
        /**
            Blocking call to GetHostname.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetHostnameResponse getHostname( const dm::TDS__GetHostname& parameters = dm::TDS__GetHostname() );
        /**
            Asynchronous call to GetHostname.
            Remember to connect to getHostnameDone and getHostnameError.
         */
        void asyncGetHostname( const dm::TDS__GetHostname& parameters = dm::TDS__GetHostname() );
        /**
            Blocking call to SetHostname.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetHostnameResponse setHostname( const dm::TDS__SetHostname& parameters );
        /**
            Asynchronous call to SetHostname.
            Remember to connect to setHostnameDone and setHostnameError.
         */
        void asyncSetHostname( const dm::TDS__SetHostname& parameters );
        /**
            Blocking call to SetHostnameFromDHCP.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetHostnameFromDHCPResponse setHostnameFromDHCP( const dm::TDS__SetHostnameFromDHCP& parameters );
        /**
            Asynchronous call to SetHostnameFromDHCP.
            Remember to connect to setHostnameFromDHCPDone and
            setHostnameFromDHCPError.
         */
        void asyncSetHostnameFromDHCP( const dm::TDS__SetHostnameFromDHCP& parameters );
        /**
            Blocking call to GetDNS.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetDNSResponse getDNS( const dm::TDS__GetDNS& parameters = dm::TDS__GetDNS() );
        /**
            Asynchronous call to GetDNS.
            Remember to connect to getDNSDone and getDNSError.
         */
        void asyncGetDNS( const dm::TDS__GetDNS& parameters = dm::TDS__GetDNS() );
        /**
            Blocking call to SetDNS.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetDNSResponse setDNS( const dm::TDS__SetDNS& parameters );
        /**
            Asynchronous call to SetDNS.
            Remember to connect to setDNSDone and setDNSError.
         */
        void asyncSetDNS( const dm::TDS__SetDNS& parameters );
        /**
            Blocking call to GetNTP.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetNTPResponse getNTP( const dm::TDS__GetNTP& parameters = dm::TDS__GetNTP() );
        /**
            Asynchronous call to GetNTP.
            Remember to connect to getNTPDone and getNTPError.
         */
        void asyncGetNTP( const dm::TDS__GetNTP& parameters = dm::TDS__GetNTP() );
        /**
            Blocking call to SetNTP.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetNTPResponse setNTP( const dm::TDS__SetNTP& parameters );
        /**
            Asynchronous call to SetNTP.
            Remember to connect to setNTPDone and setNTPError.
         */
        void asyncSetNTP( const dm::TDS__SetNTP& parameters );
        /**
            Blocking call to GetDynamicDNS.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetDynamicDNSResponse getDynamicDNS( const dm::TDS__GetDynamicDNS& parameters = dm::TDS__GetDynamicDNS() );
        /**
            Asynchronous call to GetDynamicDNS.
            Remember to connect to getDynamicDNSDone and getDynamicDNSError.
         */
        void asyncGetDynamicDNS( const dm::TDS__GetDynamicDNS& parameters = dm::TDS__GetDynamicDNS() );
        /**
            Blocking call to SetDynamicDNS.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetDynamicDNSResponse setDynamicDNS( const dm::TDS__SetDynamicDNS& parameters );
        /**
            Asynchronous call to SetDynamicDNS.
            Remember to connect to setDynamicDNSDone and setDynamicDNSError.
         */
        void asyncSetDynamicDNS( const dm::TDS__SetDynamicDNS& parameters );
        /**
            Blocking call to GetNetworkInterfaces.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetNetworkInterfacesResponse getNetworkInterfaces( const dm::TDS__GetNetworkInterfaces& parameters = dm::TDS__GetNetworkInterfaces() );
        /**
            Asynchronous call to GetNetworkInterfaces.
            Remember to connect to getNetworkInterfacesDone and
            getNetworkInterfacesError.
         */
        void asyncGetNetworkInterfaces( const dm::TDS__GetNetworkInterfaces& parameters = dm::TDS__GetNetworkInterfaces() );
        /**
            Blocking call to SetNetworkInterfaces.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetNetworkInterfacesResponse setNetworkInterfaces( const dm::TDS__SetNetworkInterfaces& parameters );
        /**
            Asynchronous call to SetNetworkInterfaces.
            Remember to connect to setNetworkInterfacesDone and
            setNetworkInterfacesError.
         */
        void asyncSetNetworkInterfaces( const dm::TDS__SetNetworkInterfaces& parameters );
        /**
            Blocking call to GetNetworkProtocols.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetNetworkProtocolsResponse getNetworkProtocols( const dm::TDS__GetNetworkProtocols& parameters = dm::TDS__GetNetworkProtocols() );
        /**
            Asynchronous call to GetNetworkProtocols.
            Remember to connect to getNetworkProtocolsDone and
            getNetworkProtocolsError.
         */
        void asyncGetNetworkProtocols( const dm::TDS__GetNetworkProtocols& parameters = dm::TDS__GetNetworkProtocols() );
        /**
            Blocking call to SetNetworkProtocols.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetNetworkProtocolsResponse setNetworkProtocols( const dm::TDS__SetNetworkProtocols& parameters );
        /**
            Asynchronous call to SetNetworkProtocols.
            Remember to connect to setNetworkProtocolsDone and
            setNetworkProtocolsError.
         */
        void asyncSetNetworkProtocols( const dm::TDS__SetNetworkProtocols& parameters );
        /**
            Blocking call to GetNetworkDefaultGateway.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetNetworkDefaultGatewayResponse getNetworkDefaultGateway( const dm::TDS__GetNetworkDefaultGateway& parameters = dm::TDS__GetNetworkDefaultGateway() );
        /**
            Asynchronous call to GetNetworkDefaultGateway.
            Remember to connect to getNetworkDefaultGatewayDone and
            getNetworkDefaultGatewayError.
         */
        void asyncGetNetworkDefaultGateway( const dm::TDS__GetNetworkDefaultGateway& parameters = dm::TDS__GetNetworkDefaultGateway() );
        /**
            Blocking call to SetNetworkDefaultGateway.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetNetworkDefaultGatewayResponse setNetworkDefaultGateway( const dm::TDS__SetNetworkDefaultGateway& parameters );
        /**
            Asynchronous call to SetNetworkDefaultGateway.
            Remember to connect to setNetworkDefaultGatewayDone and
            setNetworkDefaultGatewayError.
         */
        void asyncSetNetworkDefaultGateway( const dm::TDS__SetNetworkDefaultGateway& parameters );
        /**
            Blocking call to GetZeroConfiguration.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetZeroConfigurationResponse getZeroConfiguration( const dm::TDS__GetZeroConfiguration& parameters = dm::TDS__GetZeroConfiguration() );
        /**
            Asynchronous call to GetZeroConfiguration.
            Remember to connect to getZeroConfigurationDone and
            getZeroConfigurationError.
         */
        void asyncGetZeroConfiguration( const dm::TDS__GetZeroConfiguration& parameters = dm::TDS__GetZeroConfiguration() );
        /**
            Blocking call to SetZeroConfiguration.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetZeroConfigurationResponse setZeroConfiguration( const dm::TDS__SetZeroConfiguration& parameters );
        /**
            Asynchronous call to SetZeroConfiguration.
            Remember to connect to setZeroConfigurationDone and
            setZeroConfigurationError.
         */
        void asyncSetZeroConfiguration( const dm::TDS__SetZeroConfiguration& parameters );
        /**
            Blocking call to GetIPAddressFilter.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetIPAddressFilterResponse getIPAddressFilter( const dm::TDS__GetIPAddressFilter& parameters = dm::TDS__GetIPAddressFilter() );
        /**
            Asynchronous call to GetIPAddressFilter.
            Remember to connect to getIPAddressFilterDone and
            getIPAddressFilterError.
         */
        void asyncGetIPAddressFilter( const dm::TDS__GetIPAddressFilter& parameters = dm::TDS__GetIPAddressFilter() );
        /**
            Blocking call to SetIPAddressFilter.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetIPAddressFilterResponse setIPAddressFilter( const dm::TDS__SetIPAddressFilter& parameters );
        /**
            Asynchronous call to SetIPAddressFilter.
            Remember to connect to setIPAddressFilterDone and
            setIPAddressFilterError.
         */
        void asyncSetIPAddressFilter( const dm::TDS__SetIPAddressFilter& parameters );
        /**
            Blocking call to AddIPAddressFilter.
            Not recommended in a GUI thread.
         */
        dm::TDS__AddIPAddressFilterResponse addIPAddressFilter( const dm::TDS__AddIPAddressFilter& parameters );
        /**
            Asynchronous call to AddIPAddressFilter.
            Remember to connect to addIPAddressFilterDone and
            addIPAddressFilterError.
         */
        void asyncAddIPAddressFilter( const dm::TDS__AddIPAddressFilter& parameters );
        /**
            Blocking call to RemoveIPAddressFilter.
            Not recommended in a GUI thread.
         */
        dm::TDS__RemoveIPAddressFilterResponse removeIPAddressFilter( const dm::TDS__RemoveIPAddressFilter& parameters );
        /**
            Asynchronous call to RemoveIPAddressFilter.
            Remember to connect to removeIPAddressFilterDone and
            removeIPAddressFilterError.
         */
        void asyncRemoveIPAddressFilter( const dm::TDS__RemoveIPAddressFilter& parameters );
        /**
            Blocking call to GetAccessPolicy.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetAccessPolicyResponse getAccessPolicy( const dm::TDS__GetAccessPolicy& parameters = dm::TDS__GetAccessPolicy() );
        /**
            Asynchronous call to GetAccessPolicy.
            Remember to connect to getAccessPolicyDone and
            getAccessPolicyError.
         */
        void asyncGetAccessPolicy( const dm::TDS__GetAccessPolicy& parameters = dm::TDS__GetAccessPolicy() );
        /**
            Blocking call to SetAccessPolicy.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetAccessPolicyResponse setAccessPolicy( const dm::TDS__SetAccessPolicy& parameters );
        /**
            Asynchronous call to SetAccessPolicy.
            Remember to connect to setAccessPolicyDone and
            setAccessPolicyError.
         */
        void asyncSetAccessPolicy( const dm::TDS__SetAccessPolicy& parameters );
        /**
            Blocking call to CreateCertificate.
            Not recommended in a GUI thread.
         */
        dm::TDS__CreateCertificateResponse createCertificate( const dm::TDS__CreateCertificate& parameters );
        /**
            Asynchronous call to CreateCertificate.
            Remember to connect to createCertificateDone and
            createCertificateError.
         */
        void asyncCreateCertificate( const dm::TDS__CreateCertificate& parameters );
        /**
            Blocking call to GetCertificates.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetCertificatesResponse getCertificates( const dm::TDS__GetCertificates& parameters = dm::TDS__GetCertificates() );
        /**
            Asynchronous call to GetCertificates.
            Remember to connect to getCertificatesDone and
            getCertificatesError.
         */
        void asyncGetCertificates( const dm::TDS__GetCertificates& parameters = dm::TDS__GetCertificates() );
        /**
            Blocking call to GetCertificatesStatus.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetCertificatesStatusResponse getCertificatesStatus( const dm::TDS__GetCertificatesStatus& parameters = dm::TDS__GetCertificatesStatus() );
        /**
            Asynchronous call to GetCertificatesStatus.
            Remember to connect to getCertificatesStatusDone and
            getCertificatesStatusError.
         */
        void asyncGetCertificatesStatus( const dm::TDS__GetCertificatesStatus& parameters = dm::TDS__GetCertificatesStatus() );
        /**
            Blocking call to SetCertificatesStatus.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetCertificatesStatusResponse setCertificatesStatus( const dm::TDS__SetCertificatesStatus& parameters );
        /**
            Asynchronous call to SetCertificatesStatus.
            Remember to connect to setCertificatesStatusDone and
            setCertificatesStatusError.
         */
        void asyncSetCertificatesStatus( const dm::TDS__SetCertificatesStatus& parameters );
        /**
            Blocking call to DeleteCertificates.
            Not recommended in a GUI thread.
         */
        dm::TDS__DeleteCertificatesResponse deleteCertificates( const dm::TDS__DeleteCertificates& parameters );
        /**
            Asynchronous call to DeleteCertificates.
            Remember to connect to deleteCertificatesDone and
            deleteCertificatesError.
         */
        void asyncDeleteCertificates( const dm::TDS__DeleteCertificates& parameters );
        /**
            Blocking call to GetPkcs10Request.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetPkcs10RequestResponse getPkcs10Request( const dm::TDS__GetPkcs10Request& parameters );
        /**
            Asynchronous call to GetPkcs10Request.
            Remember to connect to getPkcs10RequestDone and
            getPkcs10RequestError.
         */
        void asyncGetPkcs10Request( const dm::TDS__GetPkcs10Request& parameters );
        /**
            Blocking call to LoadCertificates.
            Not recommended in a GUI thread.
         */
        dm::TDS__LoadCertificatesResponse loadCertificates( const dm::TDS__LoadCertificates& parameters );
        /**
            Asynchronous call to LoadCertificates.
            Remember to connect to loadCertificatesDone and
            loadCertificatesError.
         */
        void asyncLoadCertificates( const dm::TDS__LoadCertificates& parameters );
        /**
            Blocking call to GetClientCertificateMode.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetClientCertificateModeResponse getClientCertificateMode( const dm::TDS__GetClientCertificateMode& parameters = dm::TDS__GetClientCertificateMode() );
        /**
            Asynchronous call to GetClientCertificateMode.
            Remember to connect to getClientCertificateModeDone and
            getClientCertificateModeError.
         */
        void asyncGetClientCertificateMode( const dm::TDS__GetClientCertificateMode& parameters = dm::TDS__GetClientCertificateMode() );
        /**
            Blocking call to SetClientCertificateMode.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetClientCertificateModeResponse setClientCertificateMode( const dm::TDS__SetClientCertificateMode& parameters );
        /**
            Asynchronous call to SetClientCertificateMode.
            Remember to connect to setClientCertificateModeDone and
            setClientCertificateModeError.
         */
        void asyncSetClientCertificateMode( const dm::TDS__SetClientCertificateMode& parameters );
        /**
            Blocking call to GetRelayOutputs.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetRelayOutputsResponse getRelayOutputs( const dm::TDS__GetRelayOutputs& parameters = dm::TDS__GetRelayOutputs() );
        /**
            Asynchronous call to GetRelayOutputs.
            Remember to connect to getRelayOutputsDone and
            getRelayOutputsError.
         */
        void asyncGetRelayOutputs( const dm::TDS__GetRelayOutputs& parameters = dm::TDS__GetRelayOutputs() );
        /**
            Blocking call to SetRelayOutputSettings.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetRelayOutputSettingsResponse setRelayOutputSettings( const dm::TDS__SetRelayOutputSettings& parameters );
        /**
            Asynchronous call to SetRelayOutputSettings.
            Remember to connect to setRelayOutputSettingsDone and
            setRelayOutputSettingsError.
         */
        void asyncSetRelayOutputSettings( const dm::TDS__SetRelayOutputSettings& parameters );
        /**
            Blocking call to SetRelayOutputState.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetRelayOutputStateResponse setRelayOutputState( const dm::TDS__SetRelayOutputState& parameters );
        /**
            Asynchronous call to SetRelayOutputState.
            Remember to connect to setRelayOutputStateDone and
            setRelayOutputStateError.
         */
        void asyncSetRelayOutputState( const dm::TDS__SetRelayOutputState& parameters );
        /**
            Blocking call to SendAuxiliaryCommand.
            Not recommended in a GUI thread.
         */
        dm::TDS__SendAuxiliaryCommandResponse sendAuxiliaryCommand( const dm::TDS__SendAuxiliaryCommand& parameters );
        /**
            Asynchronous call to SendAuxiliaryCommand.
            Remember to connect to sendAuxiliaryCommandDone and
            sendAuxiliaryCommandError.
         */
        void asyncSendAuxiliaryCommand( const dm::TDS__SendAuxiliaryCommand& parameters );
        /**
            Blocking call to GetCACertificates.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetCACertificatesResponse getCACertificates( const dm::TDS__GetCACertificates& parameters = dm::TDS__GetCACertificates() );
        /**
            Asynchronous call to GetCACertificates.
            Remember to connect to getCACertificatesDone and
            getCACertificatesError.
         */
        void asyncGetCACertificates( const dm::TDS__GetCACertificates& parameters = dm::TDS__GetCACertificates() );
        /**
            Blocking call to LoadCertificateWithPrivateKey.
            Not recommended in a GUI thread.
         */
        dm::TDS__LoadCertificateWithPrivateKeyResponse loadCertificateWithPrivateKey( const dm::TDS__LoadCertificateWithPrivateKey& parameters );
        /**
            Asynchronous call to LoadCertificateWithPrivateKey.
            Remember to connect to loadCertificateWithPrivateKeyDone and
            loadCertificateWithPrivateKeyError.
         */
        void asyncLoadCertificateWithPrivateKey( const dm::TDS__LoadCertificateWithPrivateKey& parameters );
        /**
            Blocking call to GetCertificateInformation.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetCertificateInformationResponse getCertificateInformation( const dm::TDS__GetCertificateInformation& parameters );
        /**
            Asynchronous call to GetCertificateInformation.
            Remember to connect to getCertificateInformationDone and
            getCertificateInformationError.
         */
        void asyncGetCertificateInformation( const dm::TDS__GetCertificateInformation& parameters );
        /**
            Blocking call to LoadCACertificates.
            Not recommended in a GUI thread.
         */
        dm::TDS__LoadCACertificatesResponse loadCACertificates( const dm::TDS__LoadCACertificates& parameters );
        /**
            Asynchronous call to LoadCACertificates.
            Remember to connect to loadCACertificatesDone and
            loadCACertificatesError.
         */
        void asyncLoadCACertificates( const dm::TDS__LoadCACertificates& parameters );
        /**
            Blocking call to CreateDot1XConfiguration.
            Not recommended in a GUI thread.
         */
        dm::TDS__CreateDot1XConfigurationResponse createDot1XConfiguration( const dm::TDS__CreateDot1XConfiguration& parameters );
        /**
            Asynchronous call to CreateDot1XConfiguration.
            Remember to connect to createDot1XConfigurationDone and
            createDot1XConfigurationError.
         */
        void asyncCreateDot1XConfiguration( const dm::TDS__CreateDot1XConfiguration& parameters );
        /**
            Blocking call to SetDot1XConfiguration.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetDot1XConfigurationResponse setDot1XConfiguration( const dm::TDS__SetDot1XConfiguration& parameters );
        /**
            Asynchronous call to SetDot1XConfiguration.
            Remember to connect to setDot1XConfigurationDone and
            setDot1XConfigurationError.
         */
        void asyncSetDot1XConfiguration( const dm::TDS__SetDot1XConfiguration& parameters );
        /**
            Blocking call to GetDot1XConfiguration.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetDot1XConfigurationResponse getDot1XConfiguration( const dm::TDS__GetDot1XConfiguration& parameters );
        /**
            Asynchronous call to GetDot1XConfiguration.
            Remember to connect to getDot1XConfigurationDone and
            getDot1XConfigurationError.
         */
        void asyncGetDot1XConfiguration( const dm::TDS__GetDot1XConfiguration& parameters );
        /**
            Blocking call to GetDot1XConfigurations.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetDot1XConfigurationsResponse getDot1XConfigurations( const dm::TDS__GetDot1XConfigurations& parameters = dm::TDS__GetDot1XConfigurations() );
        /**
            Asynchronous call to GetDot1XConfigurations.
            Remember to connect to getDot1XConfigurationsDone and
            getDot1XConfigurationsError.
         */
        void asyncGetDot1XConfigurations( const dm::TDS__GetDot1XConfigurations& parameters = dm::TDS__GetDot1XConfigurations() );
        /**
            Blocking call to DeleteDot1XConfiguration.
            Not recommended in a GUI thread.
         */
        dm::TDS__DeleteDot1XConfigurationResponse deleteDot1XConfiguration( const dm::TDS__DeleteDot1XConfiguration& parameters );
        /**
            Asynchronous call to DeleteDot1XConfiguration.
            Remember to connect to deleteDot1XConfigurationDone and
            deleteDot1XConfigurationError.
         */
        void asyncDeleteDot1XConfiguration( const dm::TDS__DeleteDot1XConfiguration& parameters );
        /**
            Blocking call to GetDot11Capabilities.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetDot11CapabilitiesResponse getDot11Capabilities( const dm::TDS__GetDot11Capabilities& parameters );
        /**
            Asynchronous call to GetDot11Capabilities.
            Remember to connect to getDot11CapabilitiesDone and
            getDot11CapabilitiesError.
         */
        void asyncGetDot11Capabilities( const dm::TDS__GetDot11Capabilities& parameters );
        /**
            Blocking call to GetDot11Status.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetDot11StatusResponse getDot11Status( const dm::TDS__GetDot11Status& parameters );
        /**
            Asynchronous call to GetDot11Status.
            Remember to connect to getDot11StatusDone and getDot11StatusError.
         */
        void asyncGetDot11Status( const dm::TDS__GetDot11Status& parameters );
        /**
            Blocking call to ScanAvailableDot11Networks.
            Not recommended in a GUI thread.
         */
        dm::TDS__ScanAvailableDot11NetworksResponse scanAvailableDot11Networks( const dm::TDS__ScanAvailableDot11Networks& parameters );
        /**
            Asynchronous call to ScanAvailableDot11Networks.
            Remember to connect to scanAvailableDot11NetworksDone and
            scanAvailableDot11NetworksError.
         */
        void asyncScanAvailableDot11Networks( const dm::TDS__ScanAvailableDot11Networks& parameters );
        /**
            Blocking call to GetSystemUris.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetSystemUrisResponse getSystemUris( const dm::TDS__GetSystemUris& parameters = dm::TDS__GetSystemUris() );
        /**
            Asynchronous call to GetSystemUris.
            Remember to connect to getSystemUrisDone and getSystemUrisError.
         */
        void asyncGetSystemUris( const dm::TDS__GetSystemUris& parameters = dm::TDS__GetSystemUris() );
        /**
            Blocking call to StartFirmwareUpgrade.
            Not recommended in a GUI thread.
         */
        dm::TDS__StartFirmwareUpgradeResponse startFirmwareUpgrade( const dm::TDS__StartFirmwareUpgrade& parameters = dm::TDS__StartFirmwareUpgrade() );
        /**
            Asynchronous call to StartFirmwareUpgrade.
            Remember to connect to startFirmwareUpgradeDone and
            startFirmwareUpgradeError.
         */
        void asyncStartFirmwareUpgrade( const dm::TDS__StartFirmwareUpgrade& parameters = dm::TDS__StartFirmwareUpgrade() );
        /**
            Blocking call to StartSystemRestore.
            Not recommended in a GUI thread.
         */
        dm::TDS__StartSystemRestoreResponse startSystemRestore( const dm::TDS__StartSystemRestore& parameters = dm::TDS__StartSystemRestore() );
        /**
            Asynchronous call to StartSystemRestore.
            Remember to connect to startSystemRestoreDone and
            startSystemRestoreError.
         */
        void asyncStartSystemRestore( const dm::TDS__StartSystemRestore& parameters = dm::TDS__StartSystemRestore() );
        /**
            Blocking call to GetStorageConfigurations.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetStorageConfigurationsResponse getStorageConfigurations( const dm::TDS__GetStorageConfigurations& parameters = dm::TDS__GetStorageConfigurations() );
        /**
            Asynchronous call to GetStorageConfigurations.
            Remember to connect to getStorageConfigurationsDone and
            getStorageConfigurationsError.
         */
        void asyncGetStorageConfigurations( const dm::TDS__GetStorageConfigurations& parameters = dm::TDS__GetStorageConfigurations() );
        /**
            Blocking call to CreateStorageConfiguration.
            Not recommended in a GUI thread.
         */
        dm::TDS__CreateStorageConfigurationResponse createStorageConfiguration( const dm::TDS__CreateStorageConfiguration& parameters );
        /**
            Asynchronous call to CreateStorageConfiguration.
            Remember to connect to createStorageConfigurationDone and
            createStorageConfigurationError.
         */
        void asyncCreateStorageConfiguration( const dm::TDS__CreateStorageConfiguration& parameters );
        /**
            Blocking call to GetStorageConfiguration.
            Not recommended in a GUI thread.
         */
        dm::TDS__GetStorageConfigurationResponse getStorageConfiguration( const dm::TDS__GetStorageConfiguration& parameters );
        /**
            Asynchronous call to GetStorageConfiguration.
            Remember to connect to getStorageConfigurationDone and
            getStorageConfigurationError.
         */
        void asyncGetStorageConfiguration( const dm::TDS__GetStorageConfiguration& parameters );
        /**
            Blocking call to SetStorageConfiguration.
            Not recommended in a GUI thread.
         */
        dm::TDS__SetStorageConfigurationResponse setStorageConfiguration( const dm::TDS__SetStorageConfiguration& parameters );
        /**
            Asynchronous call to SetStorageConfiguration.
            Remember to connect to setStorageConfigurationDone and
            setStorageConfigurationError.
         */
        void asyncSetStorageConfiguration( const dm::TDS__SetStorageConfiguration& parameters );
        /**
            Blocking call to DeleteStorageConfiguration.
            Not recommended in a GUI thread.
         */
        dm::TDS__DeleteStorageConfigurationResponse deleteStorageConfiguration( const dm::TDS__DeleteStorageConfiguration& parameters );
        /**
            Asynchronous call to DeleteStorageConfiguration.
            Remember to connect to deleteStorageConfigurationDone and
            deleteStorageConfigurationError.
         */
        void asyncDeleteStorageConfiguration( const dm::TDS__DeleteStorageConfiguration& parameters );

    Q_SIGNALS:
        /**
            This signal is emitted whenever a SOAP call failed, for a central
            processing of all SOAP errors.
            method is the name of the method (or operation) that returned the
            fault, for instance "addContact".
         */
        void soapError( const QString& method, const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getServices()
            succeeded.
         */
        void getServicesDone( const dm::TDS__GetServicesResponse& parameters );
        /**
            This signal is emitted whenever the call to getServices() failed.
         */
        void getServicesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            getServiceCapabilities() succeeded.
         */
        void getServiceCapabilitiesDone( const dm::TDS__GetServiceCapabilitiesResponse& parameters );
        /**
            This signal is emitted whenever the call to
            getServiceCapabilities() failed.
         */
        void getServiceCapabilitiesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getDeviceInformation()
            succeeded.
         */
        void getDeviceInformationDone( const dm::TDS__GetDeviceInformationResponse& parameters );
        /**
            This signal is emitted whenever the call to getDeviceInformation()
            failed.
         */
        void getDeviceInformationError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setSystemDateAndTime()
            succeeded.
         */
        void setSystemDateAndTimeDone( const dm::TDS__SetSystemDateAndTimeResponse& parameters );
        /**
            This signal is emitted whenever the call to setSystemDateAndTime()
            failed.
         */
        void setSystemDateAndTimeError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getSystemDateAndTime()
            succeeded.
         */
        void getSystemDateAndTimeDone( const dm::TDS__GetSystemDateAndTimeResponse& parameters );
        /**
            This signal is emitted whenever the call to getSystemDateAndTime()
            failed.
         */
        void getSystemDateAndTimeError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            setSystemFactoryDefault() succeeded.
         */
        void setSystemFactoryDefaultDone( const dm::TDS__SetSystemFactoryDefaultResponse& parameters );
        /**
            This signal is emitted whenever the call to
            setSystemFactoryDefault() failed.
         */
        void setSystemFactoryDefaultError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to upgradeSystemFirmware()
            succeeded.
         */
        void upgradeSystemFirmwareDone( const dm::TDS__UpgradeSystemFirmwareResponse& parameters );
        /**
            This signal is emitted whenever the call to upgradeSystemFirmware()
            failed.
         */
        void upgradeSystemFirmwareError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to systemReboot()
            succeeded.
         */
        void systemRebootDone( const dm::TDS__SystemRebootResponse& parameters );
        /**
            This signal is emitted whenever the call to systemReboot() failed.
         */
        void systemRebootError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to restoreSystem()
            succeeded.
         */
        void restoreSystemDone( const dm::TDS__RestoreSystemResponse& parameters );
        /**
            This signal is emitted whenever the call to restoreSystem() failed.
         */
        void restoreSystemError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getSystemBackup()
            succeeded.
         */
        void getSystemBackupDone( const dm::TDS__GetSystemBackupResponse& parameters );
        /**
            This signal is emitted whenever the call to getSystemBackup()
            failed.
         */
        void getSystemBackupError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getSystemLog()
            succeeded.
         */
        void getSystemLogDone( const dm::TDS__GetSystemLogResponse& parameters );
        /**
            This signal is emitted whenever the call to getSystemLog() failed.
         */
        void getSystemLogError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            getSystemSupportInformation() succeeded.
         */
        void getSystemSupportInformationDone( const dm::TDS__GetSystemSupportInformationResponse& parameters );
        /**
            This signal is emitted whenever the call to
            getSystemSupportInformation() failed.
         */
        void getSystemSupportInformationError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getScopes() succeeded.
         */
        void getScopesDone( const dm::TDS__GetScopesResponse& parameters );
        /**
            This signal is emitted whenever the call to getScopes() failed.
         */
        void getScopesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setScopes() succeeded.
         */
        void setScopesDone( const dm::TDS__SetScopesResponse& parameters );
        /**
            This signal is emitted whenever the call to setScopes() failed.
         */
        void setScopesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to addScopes() succeeded.
         */
        void addScopesDone( const dm::TDS__AddScopesResponse& parameters );
        /**
            This signal is emitted whenever the call to addScopes() failed.
         */
        void addScopesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to removeScopes()
            succeeded.
         */
        void removeScopesDone( const dm::TDS__RemoveScopesResponse& parameters );
        /**
            This signal is emitted whenever the call to removeScopes() failed.
         */
        void removeScopesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getDiscoveryMode()
            succeeded.
         */
        void getDiscoveryModeDone( const dm::TDS__GetDiscoveryModeResponse& parameters );
        /**
            This signal is emitted whenever the call to getDiscoveryMode()
            failed.
         */
        void getDiscoveryModeError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setDiscoveryMode()
            succeeded.
         */
        void setDiscoveryModeDone( const dm::TDS__SetDiscoveryModeResponse& parameters );
        /**
            This signal is emitted whenever the call to setDiscoveryMode()
            failed.
         */
        void setDiscoveryModeError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            getRemoteDiscoveryMode() succeeded.
         */
        void getRemoteDiscoveryModeDone( const dm::TDS__GetRemoteDiscoveryModeResponse& parameters );
        /**
            This signal is emitted whenever the call to
            getRemoteDiscoveryMode() failed.
         */
        void getRemoteDiscoveryModeError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            setRemoteDiscoveryMode() succeeded.
         */
        void setRemoteDiscoveryModeDone( const dm::TDS__SetRemoteDiscoveryModeResponse& parameters );
        /**
            This signal is emitted whenever the call to
            setRemoteDiscoveryMode() failed.
         */
        void setRemoteDiscoveryModeError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getDPAddresses()
            succeeded.
         */
        void getDPAddressesDone( const dm::TDS__GetDPAddressesResponse& parameters );
        /**
            This signal is emitted whenever the call to getDPAddresses()
            failed.
         */
        void getDPAddressesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setDPAddresses()
            succeeded.
         */
        void setDPAddressesDone( const dm::TDS__SetDPAddressesResponse& parameters );
        /**
            This signal is emitted whenever the call to setDPAddresses()
            failed.
         */
        void setDPAddressesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getEndpointReference()
            succeeded.
         */
        void getEndpointReferenceDone( const dm::TDS__GetEndpointReferenceResponse& parameters );
        /**
            This signal is emitted whenever the call to getEndpointReference()
            failed.
         */
        void getEndpointReferenceError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getRemoteUser()
            succeeded.
         */
        void getRemoteUserDone( const dm::TDS__GetRemoteUserResponse& parameters );
        /**
            This signal is emitted whenever the call to getRemoteUser() failed.
         */
        void getRemoteUserError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setRemoteUser()
            succeeded.
         */
        void setRemoteUserDone( const dm::TDS__SetRemoteUserResponse& parameters );
        /**
            This signal is emitted whenever the call to setRemoteUser() failed.
         */
        void setRemoteUserError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getUsers() succeeded.
         */
        void getUsersDone( const dm::TDS__GetUsersResponse& parameters );
        /**
            This signal is emitted whenever the call to getUsers() failed.
         */
        void getUsersError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to createUsers()
            succeeded.
         */
        void createUsersDone( const dm::TDS__CreateUsersResponse& parameters );
        /**
            This signal is emitted whenever the call to createUsers() failed.
         */
        void createUsersError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to deleteUsers()
            succeeded.
         */
        void deleteUsersDone( const dm::TDS__DeleteUsersResponse& parameters );
        /**
            This signal is emitted whenever the call to deleteUsers() failed.
         */
        void deleteUsersError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setUser() succeeded.
         */
        void setUserDone( const dm::TDS__SetUserResponse& parameters );
        /**
            This signal is emitted whenever the call to setUser() failed.
         */
        void setUserError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getWsdlUrl() succeeded.
         */
        void getWsdlUrlDone( const dm::TDS__GetWsdlUrlResponse& parameters );
        /**
            This signal is emitted whenever the call to getWsdlUrl() failed.
         */
        void getWsdlUrlError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getCapabilities()
            succeeded.
         */
        void getCapabilitiesDone( const dm::TDS__GetCapabilitiesResponse& parameters );
        /**
            This signal is emitted whenever the call to getCapabilities()
            failed.
         */
        void getCapabilitiesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getHostname()
            succeeded.
         */
        void getHostnameDone( const dm::TDS__GetHostnameResponse& parameters );
        /**
            This signal is emitted whenever the call to getHostname() failed.
         */
        void getHostnameError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setHostname()
            succeeded.
         */
        void setHostnameDone( const dm::TDS__SetHostnameResponse& parameters );
        /**
            This signal is emitted whenever the call to setHostname() failed.
         */
        void setHostnameError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setHostnameFromDHCP()
            succeeded.
         */
        void setHostnameFromDHCPDone( const dm::TDS__SetHostnameFromDHCPResponse& parameters );
        /**
            This signal is emitted whenever the call to setHostnameFromDHCP()
            failed.
         */
        void setHostnameFromDHCPError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getDNS() succeeded.
         */
        void getDNSDone( const dm::TDS__GetDNSResponse& parameters );
        /**
            This signal is emitted whenever the call to getDNS() failed.
         */
        void getDNSError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setDNS() succeeded.
         */
        void setDNSDone( const dm::TDS__SetDNSResponse& parameters );
        /**
            This signal is emitted whenever the call to setDNS() failed.
         */
        void setDNSError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getNTP() succeeded.
         */
        void getNTPDone( const dm::TDS__GetNTPResponse& parameters );
        /**
            This signal is emitted whenever the call to getNTP() failed.
         */
        void getNTPError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setNTP() succeeded.
         */
        void setNTPDone( const dm::TDS__SetNTPResponse& parameters );
        /**
            This signal is emitted whenever the call to setNTP() failed.
         */
        void setNTPError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getDynamicDNS()
            succeeded.
         */
        void getDynamicDNSDone( const dm::TDS__GetDynamicDNSResponse& parameters );
        /**
            This signal is emitted whenever the call to getDynamicDNS() failed.
         */
        void getDynamicDNSError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setDynamicDNS()
            succeeded.
         */
        void setDynamicDNSDone( const dm::TDS__SetDynamicDNSResponse& parameters );
        /**
            This signal is emitted whenever the call to setDynamicDNS() failed.
         */
        void setDynamicDNSError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getNetworkInterfaces()
            succeeded.
         */
        void getNetworkInterfacesDone( const dm::TDS__GetNetworkInterfacesResponse& parameters );
        /**
            This signal is emitted whenever the call to getNetworkInterfaces()
            failed.
         */
        void getNetworkInterfacesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setNetworkInterfaces()
            succeeded.
         */
        void setNetworkInterfacesDone( const dm::TDS__SetNetworkInterfacesResponse& parameters );
        /**
            This signal is emitted whenever the call to setNetworkInterfaces()
            failed.
         */
        void setNetworkInterfacesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getNetworkProtocols()
            succeeded.
         */
        void getNetworkProtocolsDone( const dm::TDS__GetNetworkProtocolsResponse& parameters );
        /**
            This signal is emitted whenever the call to getNetworkProtocols()
            failed.
         */
        void getNetworkProtocolsError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setNetworkProtocols()
            succeeded.
         */
        void setNetworkProtocolsDone( const dm::TDS__SetNetworkProtocolsResponse& parameters );
        /**
            This signal is emitted whenever the call to setNetworkProtocols()
            failed.
         */
        void setNetworkProtocolsError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            getNetworkDefaultGateway() succeeded.
         */
        void getNetworkDefaultGatewayDone( const dm::TDS__GetNetworkDefaultGatewayResponse& parameters );
        /**
            This signal is emitted whenever the call to
            getNetworkDefaultGateway() failed.
         */
        void getNetworkDefaultGatewayError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            setNetworkDefaultGateway() succeeded.
         */
        void setNetworkDefaultGatewayDone( const dm::TDS__SetNetworkDefaultGatewayResponse& parameters );
        /**
            This signal is emitted whenever the call to
            setNetworkDefaultGateway() failed.
         */
        void setNetworkDefaultGatewayError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getZeroConfiguration()
            succeeded.
         */
        void getZeroConfigurationDone( const dm::TDS__GetZeroConfigurationResponse& parameters );
        /**
            This signal is emitted whenever the call to getZeroConfiguration()
            failed.
         */
        void getZeroConfigurationError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setZeroConfiguration()
            succeeded.
         */
        void setZeroConfigurationDone( const dm::TDS__SetZeroConfigurationResponse& parameters );
        /**
            This signal is emitted whenever the call to setZeroConfiguration()
            failed.
         */
        void setZeroConfigurationError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getIPAddressFilter()
            succeeded.
         */
        void getIPAddressFilterDone( const dm::TDS__GetIPAddressFilterResponse& parameters );
        /**
            This signal is emitted whenever the call to getIPAddressFilter()
            failed.
         */
        void getIPAddressFilterError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setIPAddressFilter()
            succeeded.
         */
        void setIPAddressFilterDone( const dm::TDS__SetIPAddressFilterResponse& parameters );
        /**
            This signal is emitted whenever the call to setIPAddressFilter()
            failed.
         */
        void setIPAddressFilterError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to addIPAddressFilter()
            succeeded.
         */
        void addIPAddressFilterDone( const dm::TDS__AddIPAddressFilterResponse& parameters );
        /**
            This signal is emitted whenever the call to addIPAddressFilter()
            failed.
         */
        void addIPAddressFilterError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to removeIPAddressFilter()
            succeeded.
         */
        void removeIPAddressFilterDone( const dm::TDS__RemoveIPAddressFilterResponse& parameters );
        /**
            This signal is emitted whenever the call to removeIPAddressFilter()
            failed.
         */
        void removeIPAddressFilterError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getAccessPolicy()
            succeeded.
         */
        void getAccessPolicyDone( const dm::TDS__GetAccessPolicyResponse& parameters );
        /**
            This signal is emitted whenever the call to getAccessPolicy()
            failed.
         */
        void getAccessPolicyError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setAccessPolicy()
            succeeded.
         */
        void setAccessPolicyDone( const dm::TDS__SetAccessPolicyResponse& parameters );
        /**
            This signal is emitted whenever the call to setAccessPolicy()
            failed.
         */
        void setAccessPolicyError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to createCertificate()
            succeeded.
         */
        void createCertificateDone( const dm::TDS__CreateCertificateResponse& parameters );
        /**
            This signal is emitted whenever the call to createCertificate()
            failed.
         */
        void createCertificateError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getCertificates()
            succeeded.
         */
        void getCertificatesDone( const dm::TDS__GetCertificatesResponse& parameters );
        /**
            This signal is emitted whenever the call to getCertificates()
            failed.
         */
        void getCertificatesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getCertificatesStatus()
            succeeded.
         */
        void getCertificatesStatusDone( const dm::TDS__GetCertificatesStatusResponse& parameters );
        /**
            This signal is emitted whenever the call to getCertificatesStatus()
            failed.
         */
        void getCertificatesStatusError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setCertificatesStatus()
            succeeded.
         */
        void setCertificatesStatusDone( const dm::TDS__SetCertificatesStatusResponse& parameters );
        /**
            This signal is emitted whenever the call to setCertificatesStatus()
            failed.
         */
        void setCertificatesStatusError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to deleteCertificates()
            succeeded.
         */
        void deleteCertificatesDone( const dm::TDS__DeleteCertificatesResponse& parameters );
        /**
            This signal is emitted whenever the call to deleteCertificates()
            failed.
         */
        void deleteCertificatesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getPkcs10Request()
            succeeded.
         */
        void getPkcs10RequestDone( const dm::TDS__GetPkcs10RequestResponse& parameters );
        /**
            This signal is emitted whenever the call to getPkcs10Request()
            failed.
         */
        void getPkcs10RequestError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to loadCertificates()
            succeeded.
         */
        void loadCertificatesDone( const dm::TDS__LoadCertificatesResponse& parameters );
        /**
            This signal is emitted whenever the call to loadCertificates()
            failed.
         */
        void loadCertificatesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            getClientCertificateMode() succeeded.
         */
        void getClientCertificateModeDone( const dm::TDS__GetClientCertificateModeResponse& parameters );
        /**
            This signal is emitted whenever the call to
            getClientCertificateMode() failed.
         */
        void getClientCertificateModeError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            setClientCertificateMode() succeeded.
         */
        void setClientCertificateModeDone( const dm::TDS__SetClientCertificateModeResponse& parameters );
        /**
            This signal is emitted whenever the call to
            setClientCertificateMode() failed.
         */
        void setClientCertificateModeError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getRelayOutputs()
            succeeded.
         */
        void getRelayOutputsDone( const dm::TDS__GetRelayOutputsResponse& parameters );
        /**
            This signal is emitted whenever the call to getRelayOutputs()
            failed.
         */
        void getRelayOutputsError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            setRelayOutputSettings() succeeded.
         */
        void setRelayOutputSettingsDone( const dm::TDS__SetRelayOutputSettingsResponse& parameters );
        /**
            This signal is emitted whenever the call to
            setRelayOutputSettings() failed.
         */
        void setRelayOutputSettingsError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setRelayOutputState()
            succeeded.
         */
        void setRelayOutputStateDone( const dm::TDS__SetRelayOutputStateResponse& parameters );
        /**
            This signal is emitted whenever the call to setRelayOutputState()
            failed.
         */
        void setRelayOutputStateError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to sendAuxiliaryCommand()
            succeeded.
         */
        void sendAuxiliaryCommandDone( const dm::TDS__SendAuxiliaryCommandResponse& parameters );
        /**
            This signal is emitted whenever the call to sendAuxiliaryCommand()
            failed.
         */
        void sendAuxiliaryCommandError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getCACertificates()
            succeeded.
         */
        void getCACertificatesDone( const dm::TDS__GetCACertificatesResponse& parameters );
        /**
            This signal is emitted whenever the call to getCACertificates()
            failed.
         */
        void getCACertificatesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            loadCertificateWithPrivateKey() succeeded.
         */
        void loadCertificateWithPrivateKeyDone( const dm::TDS__LoadCertificateWithPrivateKeyResponse& parameters );
        /**
            This signal is emitted whenever the call to
            loadCertificateWithPrivateKey() failed.
         */
        void loadCertificateWithPrivateKeyError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            getCertificateInformation() succeeded.
         */
        void getCertificateInformationDone( const dm::TDS__GetCertificateInformationResponse& parameters );
        /**
            This signal is emitted whenever the call to
            getCertificateInformation() failed.
         */
        void getCertificateInformationError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to loadCACertificates()
            succeeded.
         */
        void loadCACertificatesDone( const dm::TDS__LoadCACertificatesResponse& parameters );
        /**
            This signal is emitted whenever the call to loadCACertificates()
            failed.
         */
        void loadCACertificatesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            createDot1XConfiguration() succeeded.
         */
        void createDot1XConfigurationDone( const dm::TDS__CreateDot1XConfigurationResponse& parameters );
        /**
            This signal is emitted whenever the call to
            createDot1XConfiguration() failed.
         */
        void createDot1XConfigurationError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to setDot1XConfiguration()
            succeeded.
         */
        void setDot1XConfigurationDone( const dm::TDS__SetDot1XConfigurationResponse& parameters );
        /**
            This signal is emitted whenever the call to setDot1XConfiguration()
            failed.
         */
        void setDot1XConfigurationError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getDot1XConfiguration()
            succeeded.
         */
        void getDot1XConfigurationDone( const dm::TDS__GetDot1XConfigurationResponse& parameters );
        /**
            This signal is emitted whenever the call to getDot1XConfiguration()
            failed.
         */
        void getDot1XConfigurationError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            getDot1XConfigurations() succeeded.
         */
        void getDot1XConfigurationsDone( const dm::TDS__GetDot1XConfigurationsResponse& parameters );
        /**
            This signal is emitted whenever the call to
            getDot1XConfigurations() failed.
         */
        void getDot1XConfigurationsError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            deleteDot1XConfiguration() succeeded.
         */
        void deleteDot1XConfigurationDone( const dm::TDS__DeleteDot1XConfigurationResponse& parameters );
        /**
            This signal is emitted whenever the call to
            deleteDot1XConfiguration() failed.
         */
        void deleteDot1XConfigurationError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getDot11Capabilities()
            succeeded.
         */
        void getDot11CapabilitiesDone( const dm::TDS__GetDot11CapabilitiesResponse& parameters );
        /**
            This signal is emitted whenever the call to getDot11Capabilities()
            failed.
         */
        void getDot11CapabilitiesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getDot11Status()
            succeeded.
         */
        void getDot11StatusDone( const dm::TDS__GetDot11StatusResponse& parameters );
        /**
            This signal is emitted whenever the call to getDot11Status()
            failed.
         */
        void getDot11StatusError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            scanAvailableDot11Networks() succeeded.
         */
        void scanAvailableDot11NetworksDone( const dm::TDS__ScanAvailableDot11NetworksResponse& parameters );
        /**
            This signal is emitted whenever the call to
            scanAvailableDot11Networks() failed.
         */
        void scanAvailableDot11NetworksError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getSystemUris()
            succeeded.
         */
        void getSystemUrisDone( const dm::TDS__GetSystemUrisResponse& parameters );
        /**
            This signal is emitted whenever the call to getSystemUris() failed.
         */
        void getSystemUrisError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to startFirmwareUpgrade()
            succeeded.
         */
        void startFirmwareUpgradeDone( const dm::TDS__StartFirmwareUpgradeResponse& parameters );
        /**
            This signal is emitted whenever the call to startFirmwareUpgrade()
            failed.
         */
        void startFirmwareUpgradeError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to startSystemRestore()
            succeeded.
         */
        void startSystemRestoreDone( const dm::TDS__StartSystemRestoreResponse& parameters );
        /**
            This signal is emitted whenever the call to startSystemRestore()
            failed.
         */
        void startSystemRestoreError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            getStorageConfigurations() succeeded.
         */
        void getStorageConfigurationsDone( const dm::TDS__GetStorageConfigurationsResponse& parameters );
        /**
            This signal is emitted whenever the call to
            getStorageConfigurations() failed.
         */
        void getStorageConfigurationsError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            createStorageConfiguration() succeeded.
         */
        void createStorageConfigurationDone( const dm::TDS__CreateStorageConfigurationResponse& parameters );
        /**
            This signal is emitted whenever the call to
            createStorageConfiguration() failed.
         */
        void createStorageConfigurationError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            getStorageConfiguration() succeeded.
         */
        void getStorageConfigurationDone( const dm::TDS__GetStorageConfigurationResponse& parameters );
        /**
            This signal is emitted whenever the call to
            getStorageConfiguration() failed.
         */
        void getStorageConfigurationError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            setStorageConfiguration() succeeded.
         */
        void setStorageConfigurationDone( const dm::TDS__SetStorageConfigurationResponse& parameters );
        /**
            This signal is emitted whenever the call to
            setStorageConfiguration() failed.
         */
        void setStorageConfigurationError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            deleteStorageConfiguration() succeeded.
         */
        void deleteStorageConfigurationDone( const dm::TDS__DeleteStorageConfigurationResponse& parameters );
        /**
            This signal is emitted whenever the call to
            deleteStorageConfiguration() failed.
         */
        void deleteStorageConfigurationError( const KDSoapMessage& fault );

    private Q_SLOTS:
        void _kd_slotGetServicesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetServiceCapabilitiesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetDeviceInformationFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetSystemDateAndTimeFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetSystemDateAndTimeFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetSystemFactoryDefaultFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotUpgradeSystemFirmwareFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSystemRebootFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotRestoreSystemFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetSystemBackupFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetSystemLogFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetSystemSupportInformationFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetScopesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetScopesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotAddScopesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotRemoveScopesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetDiscoveryModeFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetDiscoveryModeFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetRemoteDiscoveryModeFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetRemoteDiscoveryModeFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetDPAddressesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetDPAddressesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetEndpointReferenceFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetRemoteUserFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetRemoteUserFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetUsersFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotCreateUsersFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotDeleteUsersFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetUserFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetWsdlUrlFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetCapabilitiesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetHostnameFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetHostnameFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetHostnameFromDHCPFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetDNSFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetDNSFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetNTPFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetNTPFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetDynamicDNSFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetDynamicDNSFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetNetworkInterfacesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetNetworkInterfacesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetNetworkProtocolsFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetNetworkProtocolsFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetNetworkDefaultGatewayFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetNetworkDefaultGatewayFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetZeroConfigurationFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetZeroConfigurationFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetIPAddressFilterFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetIPAddressFilterFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotAddIPAddressFilterFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotRemoveIPAddressFilterFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetAccessPolicyFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetAccessPolicyFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotCreateCertificateFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetCertificatesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetCertificatesStatusFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetCertificatesStatusFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotDeleteCertificatesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetPkcs10RequestFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotLoadCertificatesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetClientCertificateModeFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetClientCertificateModeFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetRelayOutputsFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetRelayOutputSettingsFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetRelayOutputStateFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSendAuxiliaryCommandFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetCACertificatesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotLoadCertificateWithPrivateKeyFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetCertificateInformationFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotLoadCACertificatesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotCreateDot1XConfigurationFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetDot1XConfigurationFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetDot1XConfigurationFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetDot1XConfigurationsFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotDeleteDot1XConfigurationFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetDot11CapabilitiesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetDot11StatusFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotScanAvailableDot11NetworksFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetSystemUrisFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotStartFirmwareUpgradeFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotStartSystemRestoreFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetStorageConfigurationsFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotCreateStorageConfigurationFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetStorageConfigurationFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotSetStorageConfigurationFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotDeleteStorageConfigurationFinished( KDSoapPendingCallWatcher* watcher );

    private:
        class PrivateDPtr;
        PrivateDPtr *d_ptr;
};
} // namespace end

#endif
